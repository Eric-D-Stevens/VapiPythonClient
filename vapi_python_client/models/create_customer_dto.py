# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateCustomerDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'number_e164_check_enabled': 'bool',
        'extension': 'str',
        'number': 'str',
        'sip_uri': 'str',
        'name': 'str'
    }

    attribute_map = {
        'number_e164_check_enabled': 'numberE164CheckEnabled',
        'extension': 'extension',
        'number': 'number',
        'sip_uri': 'sipUri',
        'name': 'name'
    }

    def __init__(self, number_e164_check_enabled=True, extension=None, number=None, sip_uri=None, name=None):  # noqa: E501
        """CreateCustomerDTO - a model defined in Swagger"""  # noqa: E501
        self._number_e164_check_enabled = None
        self._extension = None
        self._number = None
        self._sip_uri = None
        self._name = None
        self.discriminator = None
        if number_e164_check_enabled is not None:
            self.number_e164_check_enabled = number_e164_check_enabled
        if extension is not None:
            self.extension = extension
        if number is not None:
            self.number = number
        if sip_uri is not None:
            self.sip_uri = sip_uri
        if name is not None:
            self.name = name

    @property
    def number_e164_check_enabled(self):
        """Gets the number_e164_check_enabled of this CreateCustomerDTO.  # noqa: E501

        This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.  Use cases: - `false`: To allow non-E164 numbers like `+001234567890`, `1234', or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks. - `true` (default): To allow only E164 numbers like `+14155551234`. This is for most standard PSTN calls.  If `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\\+?[a-zA-Z0-9]+$/`).  @default true (E164 check is enabled)  # noqa: E501

        :return: The number_e164_check_enabled of this CreateCustomerDTO.  # noqa: E501
        :rtype: bool
        """
        return self._number_e164_check_enabled

    @number_e164_check_enabled.setter
    def number_e164_check_enabled(self, number_e164_check_enabled):
        """Sets the number_e164_check_enabled of this CreateCustomerDTO.

        This is the flag to toggle the E164 check for the `number` field. This is an advanced property which should be used if you know your use case requires it.  Use cases: - `false`: To allow non-E164 numbers like `+001234567890`, `1234', or `abc`. This is useful for dialing out to non-E164 numbers on your SIP trunks. - `true` (default): To allow only E164 numbers like `+14155551234`. This is for most standard PSTN calls.  If `false`, the `number` is still required to only contain alphanumeric characters (regex: `/^\\+?[a-zA-Z0-9]+$/`).  @default true (E164 check is enabled)  # noqa: E501

        :param number_e164_check_enabled: The number_e164_check_enabled of this CreateCustomerDTO.  # noqa: E501
        :type: bool
        """

        self._number_e164_check_enabled = number_e164_check_enabled

    @property
    def extension(self):
        """Gets the extension of this CreateCustomerDTO.  # noqa: E501

        This is the extension that will be dialed after the call is answered.  # noqa: E501

        :return: The extension of this CreateCustomerDTO.  # noqa: E501
        :rtype: str
        """
        return self._extension

    @extension.setter
    def extension(self, extension):
        """Sets the extension of this CreateCustomerDTO.

        This is the extension that will be dialed after the call is answered.  # noqa: E501

        :param extension: The extension of this CreateCustomerDTO.  # noqa: E501
        :type: str
        """

        self._extension = extension

    @property
    def number(self):
        """Gets the number of this CreateCustomerDTO.  # noqa: E501

        This is the number of the customer.  # noqa: E501

        :return: The number of this CreateCustomerDTO.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this CreateCustomerDTO.

        This is the number of the customer.  # noqa: E501

        :param number: The number of this CreateCustomerDTO.  # noqa: E501
        :type: str
        """

        self._number = number

    @property
    def sip_uri(self):
        """Gets the sip_uri of this CreateCustomerDTO.  # noqa: E501

        This is the SIP URI of the customer.  # noqa: E501

        :return: The sip_uri of this CreateCustomerDTO.  # noqa: E501
        :rtype: str
        """
        return self._sip_uri

    @sip_uri.setter
    def sip_uri(self, sip_uri):
        """Sets the sip_uri of this CreateCustomerDTO.

        This is the SIP URI of the customer.  # noqa: E501

        :param sip_uri: The sip_uri of this CreateCustomerDTO.  # noqa: E501
        :type: str
        """

        self._sip_uri = sip_uri

    @property
    def name(self):
        """Gets the name of this CreateCustomerDTO.  # noqa: E501

        This is the name of the customer. This is just for your own reference.  # noqa: E501

        :return: The name of this CreateCustomerDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateCustomerDTO.

        This is the name of the customer. This is just for your own reference.  # noqa: E501

        :param name: The name of this CreateCustomerDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateCustomerDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateCustomerDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
