# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Call(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'messages': 'list[OneOfCallMessagesItems]',
        'phone_call_provider': 'str',
        'phone_call_transport': 'str',
        'status': 'str',
        'ended_reason': 'str',
        'destination': 'OneOfCallDestination',
        'id': 'str',
        'org_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'started_at': 'datetime',
        'ended_at': 'datetime',
        'cost': 'float',
        'cost_breakdown': 'AllOfCallCostBreakdown',
        'costs': 'list[object]',
        'transcript': 'str',
        'recording_url': 'str',
        'stereo_recording_url': 'str',
        'artifact': 'AllOfCallArtifact',
        'artifact_plan': 'AllOfCallArtifactPlan',
        'analysis': 'AllOfCallAnalysis',
        'phone_call_provider_id': 'str',
        'assistant_id': 'str',
        'assistant': 'AllOfCallAssistant',
        'assistant_overrides': 'AllOfCallAssistantOverrides',
        'squad_id': 'str',
        'squad': 'AllOfCallSquad',
        'phone_number_id': 'str',
        'phone_number': 'AllOfCallPhoneNumber',
        'customer_id': 'str',
        'customer': 'AllOfCallCustomer',
        'name': 'str'
    }

    attribute_map = {
        'type': 'type',
        'messages': 'messages',
        'phone_call_provider': 'phoneCallProvider',
        'phone_call_transport': 'phoneCallTransport',
        'status': 'status',
        'ended_reason': 'endedReason',
        'destination': 'destination',
        'id': 'id',
        'org_id': 'orgId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'started_at': 'startedAt',
        'ended_at': 'endedAt',
        'cost': 'cost',
        'cost_breakdown': 'costBreakdown',
        'costs': 'costs',
        'transcript': 'transcript',
        'recording_url': 'recordingUrl',
        'stereo_recording_url': 'stereoRecordingUrl',
        'artifact': 'artifact',
        'artifact_plan': 'artifactPlan',
        'analysis': 'analysis',
        'phone_call_provider_id': 'phoneCallProviderId',
        'assistant_id': 'assistantId',
        'assistant': 'assistant',
        'assistant_overrides': 'assistantOverrides',
        'squad_id': 'squadId',
        'squad': 'squad',
        'phone_number_id': 'phoneNumberId',
        'phone_number': 'phoneNumber',
        'customer_id': 'customerId',
        'customer': 'customer',
        'name': 'name'
    }

    def __init__(self, type=None, messages=None, phone_call_provider=None, phone_call_transport=None, status=None, ended_reason=None, destination=None, id=None, org_id=None, created_at=None, updated_at=None, started_at=None, ended_at=None, cost=None, cost_breakdown=None, costs=None, transcript=None, recording_url=None, stereo_recording_url=None, artifact=None, artifact_plan=None, analysis=None, phone_call_provider_id=None, assistant_id=None, assistant=None, assistant_overrides=None, squad_id=None, squad=None, phone_number_id=None, phone_number=None, customer_id=None, customer=None, name=None):  # noqa: E501
        """Call - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._messages = None
        self._phone_call_provider = None
        self._phone_call_transport = None
        self._status = None
        self._ended_reason = None
        self._destination = None
        self._id = None
        self._org_id = None
        self._created_at = None
        self._updated_at = None
        self._started_at = None
        self._ended_at = None
        self._cost = None
        self._cost_breakdown = None
        self._costs = None
        self._transcript = None
        self._recording_url = None
        self._stereo_recording_url = None
        self._artifact = None
        self._artifact_plan = None
        self._analysis = None
        self._phone_call_provider_id = None
        self._assistant_id = None
        self._assistant = None
        self._assistant_overrides = None
        self._squad_id = None
        self._squad = None
        self._phone_number_id = None
        self._phone_number = None
        self._customer_id = None
        self._customer = None
        self._name = None
        self.discriminator = None
        if type is not None:
            self.type = type
        if messages is not None:
            self.messages = messages
        if phone_call_provider is not None:
            self.phone_call_provider = phone_call_provider
        if phone_call_transport is not None:
            self.phone_call_transport = phone_call_transport
        if status is not None:
            self.status = status
        if ended_reason is not None:
            self.ended_reason = ended_reason
        if destination is not None:
            self.destination = destination
        self.id = id
        self.org_id = org_id
        self.created_at = created_at
        self.updated_at = updated_at
        if started_at is not None:
            self.started_at = started_at
        if ended_at is not None:
            self.ended_at = ended_at
        if cost is not None:
            self.cost = cost
        if cost_breakdown is not None:
            self.cost_breakdown = cost_breakdown
        if costs is not None:
            self.costs = costs
        if transcript is not None:
            self.transcript = transcript
        if recording_url is not None:
            self.recording_url = recording_url
        if stereo_recording_url is not None:
            self.stereo_recording_url = stereo_recording_url
        if artifact is not None:
            self.artifact = artifact
        if artifact_plan is not None:
            self.artifact_plan = artifact_plan
        if analysis is not None:
            self.analysis = analysis
        if phone_call_provider_id is not None:
            self.phone_call_provider_id = phone_call_provider_id
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if assistant is not None:
            self.assistant = assistant
        if assistant_overrides is not None:
            self.assistant_overrides = assistant_overrides
        if squad_id is not None:
            self.squad_id = squad_id
        if squad is not None:
            self.squad = squad
        if phone_number_id is not None:
            self.phone_number_id = phone_number_id
        if phone_number is not None:
            self.phone_number = phone_number
        if customer_id is not None:
            self.customer_id = customer_id
        if customer is not None:
            self.customer = customer
        if name is not None:
            self.name = name

    @property
    def type(self):
        """Gets the type of this Call.  # noqa: E501

        This is the type of call.  # noqa: E501

        :return: The type of this Call.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this Call.

        This is the type of call.  # noqa: E501

        :param type: The type of this Call.  # noqa: E501
        :type: str
        """
        allowed_values = ["inboundPhoneCall", "outboundPhoneCall", "webCall"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def messages(self):
        """Gets the messages of this Call.  # noqa: E501

        These are the messages that were spoken during the call.  # noqa: E501

        :return: The messages of this Call.  # noqa: E501
        :rtype: list[OneOfCallMessagesItems]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this Call.

        These are the messages that were spoken during the call.  # noqa: E501

        :param messages: The messages of this Call.  # noqa: E501
        :type: list[OneOfCallMessagesItems]
        """

        self._messages = messages

    @property
    def phone_call_provider(self):
        """Gets the phone_call_provider of this Call.  # noqa: E501

        This is the provider of the call.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The phone_call_provider of this Call.  # noqa: E501
        :rtype: str
        """
        return self._phone_call_provider

    @phone_call_provider.setter
    def phone_call_provider(self, phone_call_provider):
        """Sets the phone_call_provider of this Call.

        This is the provider of the call.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param phone_call_provider: The phone_call_provider of this Call.  # noqa: E501
        :type: str
        """
        allowed_values = ["twilio", "vonage", "vapi"]  # noqa: E501
        if phone_call_provider not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_call_provider` ({0}), must be one of {1}"  # noqa: E501
                .format(phone_call_provider, allowed_values)
            )

        self._phone_call_provider = phone_call_provider

    @property
    def phone_call_transport(self):
        """Gets the phone_call_transport of this Call.  # noqa: E501

        This is the transport of the phone call.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The phone_call_transport of this Call.  # noqa: E501
        :rtype: str
        """
        return self._phone_call_transport

    @phone_call_transport.setter
    def phone_call_transport(self, phone_call_transport):
        """Sets the phone_call_transport of this Call.

        This is the transport of the phone call.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param phone_call_transport: The phone_call_transport of this Call.  # noqa: E501
        :type: str
        """
        allowed_values = ["sip", "pstn"]  # noqa: E501
        if phone_call_transport not in allowed_values:
            raise ValueError(
                "Invalid value for `phone_call_transport` ({0}), must be one of {1}"  # noqa: E501
                .format(phone_call_transport, allowed_values)
            )

        self._phone_call_transport = phone_call_transport

    @property
    def status(self):
        """Gets the status of this Call.  # noqa: E501

        This is the status of the call.  # noqa: E501

        :return: The status of this Call.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this Call.

        This is the status of the call.  # noqa: E501

        :param status: The status of this Call.  # noqa: E501
        :type: str
        """
        allowed_values = ["queued", "ringing", "in-progress", "forwarding", "ended"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def ended_reason(self):
        """Gets the ended_reason of this Call.  # noqa: E501

        This is the explanation for how the call ended.  # noqa: E501

        :return: The ended_reason of this Call.  # noqa: E501
        :rtype: str
        """
        return self._ended_reason

    @ended_reason.setter
    def ended_reason(self, ended_reason):
        """Sets the ended_reason of this Call.

        This is the explanation for how the call ended.  # noqa: E501

        :param ended_reason: The ended_reason of this Call.  # noqa: E501
        :type: str
        """
        allowed_values = ["assistant-error", "assistant-not-found", "db-error", "no-server-available", "pipeline-error-openai-llm-failed", "pipeline-error-azure-openai-llm-failed", "pipeline-error-groq-llm-failed", "pipeline-error-openai-voice-failed", "pipeline-error-cartesia-voice-failed", "pipeline-error-deepgram-transcriber-failed", "pipeline-error-deepgram-voice-failed", "pipeline-error-gladia-transcriber-failed", "pipeline-error-eleven-labs-voice-failed", "pipeline-error-playht-voice-failed", "pipeline-error-lmnt-voice-failed", "pipeline-error-azure-voice-failed", "pipeline-error-rime-ai-voice-failed", "pipeline-error-neets-voice-failed", "pipeline-no-available-model", "worker-shutdown", "twilio-failed-to-connect-call", "unknown-error", "vonage-disconnected", "vonage-failed-to-connect-call", "phone-call-provider-bypass-enabled-but-no-call-received", "vapi-error-phone-call-worker-setup-socket-error", "vapi-error-phone-call-worker-worker-setup-socket-timeout", "vapi-error-phone-call-worker-could-not-find-call", "vapi-error-phone-call-worker-call-never-connected", "vapi-error-web-call-worker-setup-failed", "assistant-not-invalid", "assistant-not-provided", "call-start-error-neither-assistant-nor-server-set", "assistant-request-failed", "assistant-request-returned-error", "assistant-request-returned-unspeakable-error", "assistant-request-returned-invalid-assistant", "assistant-request-returned-no-assistant", "assistant-request-returned-forwarding-phone-number", "assistant-ended-call", "assistant-said-end-call-phrase", "assistant-forwarded-call", "assistant-join-timed-out", "customer-busy", "customer-ended-call", "customer-did-not-answer", "customer-did-not-give-microphone-permission", "assistant-said-message-with-end-call-enabled", "exceeded-max-duration", "manually-canceled", "phone-call-provider-closed-websocket", "pipeline-error-anthropic-llm-failed", "pipeline-error-together-ai-llm-failed", "pipeline-error-anyscale-llm-failed", "pipeline-error-openrouter-llm-failed", "pipeline-error-perplexity-ai-llm-failed", "pipeline-error-deepinfra-llm-failed", "pipeline-error-runpod-llm-failed", "pipeline-error-custom-llm-llm-failed", "pipeline-error-eleven-labs-voice-not-found", "pipeline-error-eleven-labs-quota-exceeded", "pipeline-error-eleven-labs-unauthorized-access", "pipeline-error-eleven-labs-unauthorized-to-access-model", "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus", "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade", "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade", "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade", "pipeline-error-eleven-labs-system-busy-and-requested-upgrade", "pipeline-error-eleven-labs-voice-not-fine-tuned", "pipeline-error-eleven-labs-invalid-api-key", "pipeline-error-eleven-labs-invalid-voice-samples", "pipeline-error-eleven-labs-voice-disabled-by-owner", "pipeline-error-eleven-labs-blocked-account-in-probation", "pipeline-error-playht-request-timed-out", "pipeline-error-playht-invalid-voice", "pipeline-error-playht-unexpected-error", "pipeline-error-playht-out-of-credits", "pipeline-error-playht-rate-limit-exceeded", "pipeline-error-playht-502-gateway-error", "pipeline-error-playht-504-gateway-error", "pipeline-error-gladia-transcriber-failed", "silence-timed-out", "voicemail", "vonage-rejected"]  # noqa: E501
        if ended_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `ended_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(ended_reason, allowed_values)
            )

        self._ended_reason = ended_reason

    @property
    def destination(self):
        """Gets the destination of this Call.  # noqa: E501

        This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.  # noqa: E501

        :return: The destination of this Call.  # noqa: E501
        :rtype: OneOfCallDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this Call.

        This is the destination where the call ended up being transferred to. If the call was not transferred, this will be empty.  # noqa: E501

        :param destination: The destination of this Call.  # noqa: E501
        :type: OneOfCallDestination
        """

        self._destination = destination

    @property
    def id(self):
        """Gets the id of this Call.  # noqa: E501

        This is the unique identifier for the call.  # noqa: E501

        :return: The id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Call.

        This is the unique identifier for the call.  # noqa: E501

        :param id: The id of this Call.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this Call.  # noqa: E501

        This is the unique identifier for the org that this call belongs to.  # noqa: E501

        :return: The org_id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Call.

        This is the unique identifier for the org that this call belongs to.  # noqa: E501

        :param org_id: The org_id of this Call.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def created_at(self):
        """Gets the created_at of this Call.  # noqa: E501

        This is the ISO 8601 date-time string of when the call was created.  # noqa: E501

        :return: The created_at of this Call.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Call.

        This is the ISO 8601 date-time string of when the call was created.  # noqa: E501

        :param created_at: The created_at of this Call.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Call.  # noqa: E501

        This is the ISO 8601 date-time string of when the call was last updated.  # noqa: E501

        :return: The updated_at of this Call.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Call.

        This is the ISO 8601 date-time string of when the call was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Call.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def started_at(self):
        """Gets the started_at of this Call.  # noqa: E501

        This is the ISO 8601 date-time string of when the call was started.  # noqa: E501

        :return: The started_at of this Call.  # noqa: E501
        :rtype: datetime
        """
        return self._started_at

    @started_at.setter
    def started_at(self, started_at):
        """Sets the started_at of this Call.

        This is the ISO 8601 date-time string of when the call was started.  # noqa: E501

        :param started_at: The started_at of this Call.  # noqa: E501
        :type: datetime
        """

        self._started_at = started_at

    @property
    def ended_at(self):
        """Gets the ended_at of this Call.  # noqa: E501

        This is the ISO 8601 date-time string of when the call was ended.  # noqa: E501

        :return: The ended_at of this Call.  # noqa: E501
        :rtype: datetime
        """
        return self._ended_at

    @ended_at.setter
    def ended_at(self, ended_at):
        """Sets the ended_at of this Call.

        This is the ISO 8601 date-time string of when the call was ended.  # noqa: E501

        :param ended_at: The ended_at of this Call.  # noqa: E501
        :type: datetime
        """

        self._ended_at = ended_at

    @property
    def cost(self):
        """Gets the cost of this Call.  # noqa: E501

        This is the cost of the call in USD.  # noqa: E501

        :return: The cost of this Call.  # noqa: E501
        :rtype: float
        """
        return self._cost

    @cost.setter
    def cost(self, cost):
        """Sets the cost of this Call.

        This is the cost of the call in USD.  # noqa: E501

        :param cost: The cost of this Call.  # noqa: E501
        :type: float
        """

        self._cost = cost

    @property
    def cost_breakdown(self):
        """Gets the cost_breakdown of this Call.  # noqa: E501

        This is the cost of the call in USD.  # noqa: E501

        :return: The cost_breakdown of this Call.  # noqa: E501
        :rtype: AllOfCallCostBreakdown
        """
        return self._cost_breakdown

    @cost_breakdown.setter
    def cost_breakdown(self, cost_breakdown):
        """Sets the cost_breakdown of this Call.

        This is the cost of the call in USD.  # noqa: E501

        :param cost_breakdown: The cost_breakdown of this Call.  # noqa: E501
        :type: AllOfCallCostBreakdown
        """

        self._cost_breakdown = cost_breakdown

    @property
    def costs(self):
        """Gets the costs of this Call.  # noqa: E501

        These are the costs of individual components of the call in USD.  # noqa: E501

        :return: The costs of this Call.  # noqa: E501
        :rtype: list[object]
        """
        return self._costs

    @costs.setter
    def costs(self, costs):
        """Sets the costs of this Call.

        These are the costs of individual components of the call in USD.  # noqa: E501

        :param costs: The costs of this Call.  # noqa: E501
        :type: list[object]
        """

        self._costs = costs

    @property
    def transcript(self):
        """Gets the transcript of this Call.  # noqa: E501

        This is the transcript of the call.  # noqa: E501

        :return: The transcript of this Call.  # noqa: E501
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this Call.

        This is the transcript of the call.  # noqa: E501

        :param transcript: The transcript of this Call.  # noqa: E501
        :type: str
        """

        self._transcript = transcript

    @property
    def recording_url(self):
        """Gets the recording_url of this Call.  # noqa: E501

        This is the URL of the recording of the call.  # noqa: E501

        :return: The recording_url of this Call.  # noqa: E501
        :rtype: str
        """
        return self._recording_url

    @recording_url.setter
    def recording_url(self, recording_url):
        """Sets the recording_url of this Call.

        This is the URL of the recording of the call.  # noqa: E501

        :param recording_url: The recording_url of this Call.  # noqa: E501
        :type: str
        """

        self._recording_url = recording_url

    @property
    def stereo_recording_url(self):
        """Gets the stereo_recording_url of this Call.  # noqa: E501

        This is the URL of the recording of the call in two channels.  # noqa: E501

        :return: The stereo_recording_url of this Call.  # noqa: E501
        :rtype: str
        """
        return self._stereo_recording_url

    @stereo_recording_url.setter
    def stereo_recording_url(self, stereo_recording_url):
        """Sets the stereo_recording_url of this Call.

        This is the URL of the recording of the call in two channels.  # noqa: E501

        :param stereo_recording_url: The stereo_recording_url of this Call.  # noqa: E501
        :type: str
        """

        self._stereo_recording_url = stereo_recording_url

    @property
    def artifact(self):
        """Gets the artifact of this Call.  # noqa: E501

        This stores artifacts of the call. Customize what artifacts are created by configuring `assistant.artifactPlan`.  # noqa: E501

        :return: The artifact of this Call.  # noqa: E501
        :rtype: AllOfCallArtifact
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this Call.

        This stores artifacts of the call. Customize what artifacts are created by configuring `assistant.artifactPlan`.  # noqa: E501

        :param artifact: The artifact of this Call.  # noqa: E501
        :type: AllOfCallArtifact
        """

        self._artifact = artifact

    @property
    def artifact_plan(self):
        """Gets the artifact_plan of this Call.  # noqa: E501

        This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.  # noqa: E501

        :return: The artifact_plan of this Call.  # noqa: E501
        :rtype: AllOfCallArtifactPlan
        """
        return self._artifact_plan

    @artifact_plan.setter
    def artifact_plan(self, artifact_plan):
        """Sets the artifact_plan of this Call.

        This is a copy of assistant artifact plan. This isn't actually stored on the call but rather just returned in POST /call/web to enable artifact creation client side.  # noqa: E501

        :param artifact_plan: The artifact_plan of this Call.  # noqa: E501
        :type: AllOfCallArtifactPlan
        """

        self._artifact_plan = artifact_plan

    @property
    def analysis(self):
        """Gets the analysis of this Call.  # noqa: E501

        This is the analysis of the call. Customize the analysis by configuring `assistant.analysisPlan`.  # noqa: E501

        :return: The analysis of this Call.  # noqa: E501
        :rtype: AllOfCallAnalysis
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this Call.

        This is the analysis of the call. Customize the analysis by configuring `assistant.analysisPlan`.  # noqa: E501

        :param analysis: The analysis of this Call.  # noqa: E501
        :type: AllOfCallAnalysis
        """

        self._analysis = analysis

    @property
    def phone_call_provider_id(self):
        """Gets the phone_call_provider_id of this Call.  # noqa: E501

        The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The phone_call_provider_id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._phone_call_provider_id

    @phone_call_provider_id.setter
    def phone_call_provider_id(self, phone_call_provider_id):
        """Sets the phone_call_provider_id of this Call.

        The ID of the call as provided by the phone number service. callSid in Twilio. conversationUuid in Vonage.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param phone_call_provider_id: The phone_call_provider_id of this Call.  # noqa: E501
        :type: str
        """

        self._phone_call_provider_id = phone_call_provider_id

    @property
    def assistant_id(self):
        """Gets the assistant_id of this Call.  # noqa: E501

        This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.  # noqa: E501

        :return: The assistant_id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this Call.

        This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.  # noqa: E501

        :param assistant_id: The assistant_id of this Call.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def assistant(self):
        """Gets the assistant of this Call.  # noqa: E501

        This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.  # noqa: E501

        :return: The assistant of this Call.  # noqa: E501
        :rtype: AllOfCallAssistant
        """
        return self._assistant

    @assistant.setter
    def assistant(self, assistant):
        """Sets the assistant of this Call.

        This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.  # noqa: E501

        :param assistant: The assistant of this Call.  # noqa: E501
        :type: AllOfCallAssistant
        """

        self._assistant = assistant

    @property
    def assistant_overrides(self):
        """Gets the assistant_overrides of this Call.  # noqa: E501

        These are the overrides for the `assistant` or `assistantId`'s settings and template variables.  # noqa: E501

        :return: The assistant_overrides of this Call.  # noqa: E501
        :rtype: AllOfCallAssistantOverrides
        """
        return self._assistant_overrides

    @assistant_overrides.setter
    def assistant_overrides(self, assistant_overrides):
        """Sets the assistant_overrides of this Call.

        These are the overrides for the `assistant` or `assistantId`'s settings and template variables.  # noqa: E501

        :param assistant_overrides: The assistant_overrides of this Call.  # noqa: E501
        :type: AllOfCallAssistantOverrides
        """

        self._assistant_overrides = assistant_overrides

    @property
    def squad_id(self):
        """Gets the squad_id of this Call.  # noqa: E501

        This is the squad that will be used for the call. To use a transient squad, use `squad` instead.  # noqa: E501

        :return: The squad_id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._squad_id

    @squad_id.setter
    def squad_id(self, squad_id):
        """Sets the squad_id of this Call.

        This is the squad that will be used for the call. To use a transient squad, use `squad` instead.  # noqa: E501

        :param squad_id: The squad_id of this Call.  # noqa: E501
        :type: str
        """

        self._squad_id = squad_id

    @property
    def squad(self):
        """Gets the squad of this Call.  # noqa: E501

        This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.  # noqa: E501

        :return: The squad of this Call.  # noqa: E501
        :rtype: AllOfCallSquad
        """
        return self._squad

    @squad.setter
    def squad(self, squad):
        """Sets the squad of this Call.

        This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.  # noqa: E501

        :param squad: The squad of this Call.  # noqa: E501
        :type: AllOfCallSquad
        """

        self._squad = squad

    @property
    def phone_number_id(self):
        """Gets the phone_number_id of this Call.  # noqa: E501

        This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The phone_number_id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._phone_number_id

    @phone_number_id.setter
    def phone_number_id(self, phone_number_id):
        """Sets the phone_number_id of this Call.

        This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param phone_number_id: The phone_number_id of this Call.  # noqa: E501
        :type: str
        """

        self._phone_number_id = phone_number_id

    @property
    def phone_number(self):
        """Gets the phone_number of this Call.  # noqa: E501

        This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The phone_number of this Call.  # noqa: E501
        :rtype: AllOfCallPhoneNumber
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this Call.

        This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param phone_number: The phone_number of this Call.  # noqa: E501
        :type: AllOfCallPhoneNumber
        """

        self._phone_number = phone_number

    @property
    def customer_id(self):
        """Gets the customer_id of this Call.  # noqa: E501

        This is the customer that will be called. To call a transient customer , use `customer` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The customer_id of this Call.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this Call.

        This is the customer that will be called. To call a transient customer , use `customer` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param customer_id: The customer_id of this Call.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def customer(self):
        """Gets the customer of this Call.  # noqa: E501

        This is the customer that will be called. To call an existing customer, use `customerId` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The customer of this Call.  # noqa: E501
        :rtype: AllOfCallCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this Call.

        This is the customer that will be called. To call an existing customer, use `customerId` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param customer: The customer of this Call.  # noqa: E501
        :type: AllOfCallCustomer
        """

        self._customer = customer

    @property
    def name(self):
        """Gets the name of this Call.  # noqa: E501

        This is the name of the call. This is just for your own reference.  # noqa: E501

        :return: The name of this Call.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Call.

        This is the name of the call. This is just for your own reference.  # noqa: E501

        :param name: The name of this Call.  # noqa: E501
        :type: str
        """

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Call, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Call):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
