# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GhlToolProviderDetails(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'template_url': 'str',
        'setup_instructions': 'list[ToolTemplateSetup]',
        'type': 'str',
        'workflow_id': 'str',
        'workflow_name': 'str',
        'webhook_hook_id': 'str',
        'webhook_hook_name': 'str',
        'location_id': 'str'
    }

    attribute_map = {
        'template_url': 'templateUrl',
        'setup_instructions': 'setupInstructions',
        'type': 'type',
        'workflow_id': 'workflowId',
        'workflow_name': 'workflowName',
        'webhook_hook_id': 'webhookHookId',
        'webhook_hook_name': 'webhookHookName',
        'location_id': 'locationId'
    }

    def __init__(self, template_url=None, setup_instructions=None, type=None, workflow_id=None, workflow_name=None, webhook_hook_id=None, webhook_hook_name=None, location_id=None):  # noqa: E501
        """GhlToolProviderDetails - a model defined in Swagger"""  # noqa: E501
        self._template_url = None
        self._setup_instructions = None
        self._type = None
        self._workflow_id = None
        self._workflow_name = None
        self._webhook_hook_id = None
        self._webhook_hook_name = None
        self._location_id = None
        self.discriminator = None
        if template_url is not None:
            self.template_url = template_url
        if setup_instructions is not None:
            self.setup_instructions = setup_instructions
        self.type = type
        if workflow_id is not None:
            self.workflow_id = workflow_id
        if workflow_name is not None:
            self.workflow_name = workflow_name
        if webhook_hook_id is not None:
            self.webhook_hook_id = webhook_hook_id
        if webhook_hook_name is not None:
            self.webhook_hook_name = webhook_hook_name
        if location_id is not None:
            self.location_id = location_id

    @property
    def template_url(self):
        """Gets the template_url of this GhlToolProviderDetails.  # noqa: E501

        This is the Template URL or the Snapshot URL corresponding to the Template.  # noqa: E501

        :return: The template_url of this GhlToolProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._template_url

    @template_url.setter
    def template_url(self, template_url):
        """Sets the template_url of this GhlToolProviderDetails.

        This is the Template URL or the Snapshot URL corresponding to the Template.  # noqa: E501

        :param template_url: The template_url of this GhlToolProviderDetails.  # noqa: E501
        :type: str
        """

        self._template_url = template_url

    @property
    def setup_instructions(self):
        """Gets the setup_instructions of this GhlToolProviderDetails.  # noqa: E501


        :return: The setup_instructions of this GhlToolProviderDetails.  # noqa: E501
        :rtype: list[ToolTemplateSetup]
        """
        return self._setup_instructions

    @setup_instructions.setter
    def setup_instructions(self, setup_instructions):
        """Sets the setup_instructions of this GhlToolProviderDetails.


        :param setup_instructions: The setup_instructions of this GhlToolProviderDetails.  # noqa: E501
        :type: list[ToolTemplateSetup]
        """

        self._setup_instructions = setup_instructions

    @property
    def type(self):
        """Gets the type of this GhlToolProviderDetails.  # noqa: E501

        The type of tool. \"ghl\" for GHL tool.  # noqa: E501

        :return: The type of this GhlToolProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this GhlToolProviderDetails.

        The type of tool. \"ghl\" for GHL tool.  # noqa: E501

        :param type: The type of this GhlToolProviderDetails.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["ghl"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def workflow_id(self):
        """Gets the workflow_id of this GhlToolProviderDetails.  # noqa: E501


        :return: The workflow_id of this GhlToolProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._workflow_id

    @workflow_id.setter
    def workflow_id(self, workflow_id):
        """Sets the workflow_id of this GhlToolProviderDetails.


        :param workflow_id: The workflow_id of this GhlToolProviderDetails.  # noqa: E501
        :type: str
        """

        self._workflow_id = workflow_id

    @property
    def workflow_name(self):
        """Gets the workflow_name of this GhlToolProviderDetails.  # noqa: E501


        :return: The workflow_name of this GhlToolProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._workflow_name

    @workflow_name.setter
    def workflow_name(self, workflow_name):
        """Sets the workflow_name of this GhlToolProviderDetails.


        :param workflow_name: The workflow_name of this GhlToolProviderDetails.  # noqa: E501
        :type: str
        """

        self._workflow_name = workflow_name

    @property
    def webhook_hook_id(self):
        """Gets the webhook_hook_id of this GhlToolProviderDetails.  # noqa: E501


        :return: The webhook_hook_id of this GhlToolProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._webhook_hook_id

    @webhook_hook_id.setter
    def webhook_hook_id(self, webhook_hook_id):
        """Sets the webhook_hook_id of this GhlToolProviderDetails.


        :param webhook_hook_id: The webhook_hook_id of this GhlToolProviderDetails.  # noqa: E501
        :type: str
        """

        self._webhook_hook_id = webhook_hook_id

    @property
    def webhook_hook_name(self):
        """Gets the webhook_hook_name of this GhlToolProviderDetails.  # noqa: E501


        :return: The webhook_hook_name of this GhlToolProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._webhook_hook_name

    @webhook_hook_name.setter
    def webhook_hook_name(self, webhook_hook_name):
        """Sets the webhook_hook_name of this GhlToolProviderDetails.


        :param webhook_hook_name: The webhook_hook_name of this GhlToolProviderDetails.  # noqa: E501
        :type: str
        """

        self._webhook_hook_name = webhook_hook_name

    @property
    def location_id(self):
        """Gets the location_id of this GhlToolProviderDetails.  # noqa: E501


        :return: The location_id of this GhlToolProviderDetails.  # noqa: E501
        :rtype: str
        """
        return self._location_id

    @location_id.setter
    def location_id(self, location_id):
        """Sets the location_id of this GhlToolProviderDetails.


        :param location_id: The location_id of this GhlToolProviderDetails.  # noqa: E501
        :type: str
        """

        self._location_id = location_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GhlToolProviderDetails, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GhlToolProviderDetails):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
