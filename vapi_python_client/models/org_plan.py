# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'included_providers': 'list[object]',
        'included_minutes': 'float',
        'cost_per_overage_minute': 'float'
    }

    attribute_map = {
        'included_providers': 'includedProviders',
        'included_minutes': 'includedMinutes',
        'cost_per_overage_minute': 'costPerOverageMinute'
    }

    def __init__(self, included_providers=None, included_minutes=None, cost_per_overage_minute=None):  # noqa: E501
        """OrgPlan - a model defined in Swagger"""  # noqa: E501
        self._included_providers = None
        self._included_minutes = None
        self._cost_per_overage_minute = None
        self.discriminator = None
        if included_providers is not None:
            self.included_providers = included_providers
        if included_minutes is not None:
            self.included_minutes = included_minutes
        if cost_per_overage_minute is not None:
            self.cost_per_overage_minute = cost_per_overage_minute

    @property
    def included_providers(self):
        """Gets the included_providers of this OrgPlan.  # noqa: E501


        :return: The included_providers of this OrgPlan.  # noqa: E501
        :rtype: list[object]
        """
        return self._included_providers

    @included_providers.setter
    def included_providers(self, included_providers):
        """Sets the included_providers of this OrgPlan.


        :param included_providers: The included_providers of this OrgPlan.  # noqa: E501
        :type: list[object]
        """

        self._included_providers = included_providers

    @property
    def included_minutes(self):
        """Gets the included_minutes of this OrgPlan.  # noqa: E501


        :return: The included_minutes of this OrgPlan.  # noqa: E501
        :rtype: float
        """
        return self._included_minutes

    @included_minutes.setter
    def included_minutes(self, included_minutes):
        """Sets the included_minutes of this OrgPlan.


        :param included_minutes: The included_minutes of this OrgPlan.  # noqa: E501
        :type: float
        """

        self._included_minutes = included_minutes

    @property
    def cost_per_overage_minute(self):
        """Gets the cost_per_overage_minute of this OrgPlan.  # noqa: E501


        :return: The cost_per_overage_minute of this OrgPlan.  # noqa: E501
        :rtype: float
        """
        return self._cost_per_overage_minute

    @cost_per_overage_minute.setter
    def cost_per_overage_minute(self, cost_per_overage_minute):
        """Sets the cost_per_overage_minute of this OrgPlan.


        :param cost_per_overage_minute: The cost_per_overage_minute of this OrgPlan.  # noqa: E501
        :type: float
        """

        self._cost_per_overage_minute = cost_per_overage_minute

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
