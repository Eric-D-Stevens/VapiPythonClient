# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerMessageEndOfCallReport(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'ended_reason': 'str',
        'messages': 'list[OneOfServerMessageEndOfCallReportMessagesItems]',
        'recording_url': 'str',
        'stereo_recording_url': 'str',
        'recording_wav': 'object',
        'phone_number': 'object',
        'customer': 'object',
        'call': 'object',
        'artifact': 'AllOfServerMessageEndOfCallReportArtifact',
        'timestamp': 'str',
        'transcript': 'str',
        'summary': 'str',
        'analysis': 'AllOfServerMessageEndOfCallReportAnalysis'
    }

    attribute_map = {
        'type': 'type',
        'ended_reason': 'endedReason',
        'messages': 'messages',
        'recording_url': 'recordingUrl',
        'stereo_recording_url': 'stereoRecordingUrl',
        'recording_wav': 'recordingWav',
        'phone_number': 'phoneNumber',
        'customer': 'customer',
        'call': 'call',
        'artifact': 'artifact',
        'timestamp': 'timestamp',
        'transcript': 'transcript',
        'summary': 'summary',
        'analysis': 'analysis'
    }

    def __init__(self, type=None, ended_reason=None, messages=None, recording_url=None, stereo_recording_url=None, recording_wav=None, phone_number=None, customer=None, call=None, artifact=None, timestamp=None, transcript=None, summary=None, analysis=None):  # noqa: E501
        """ServerMessageEndOfCallReport - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._ended_reason = None
        self._messages = None
        self._recording_url = None
        self._stereo_recording_url = None
        self._recording_wav = None
        self._phone_number = None
        self._customer = None
        self._call = None
        self._artifact = None
        self._timestamp = None
        self._transcript = None
        self._summary = None
        self._analysis = None
        self.discriminator = None
        self.type = type
        self.ended_reason = ended_reason
        if messages is not None:
            self.messages = messages
        if recording_url is not None:
            self.recording_url = recording_url
        if stereo_recording_url is not None:
            self.stereo_recording_url = stereo_recording_url
        if recording_wav is not None:
            self.recording_wav = recording_wav
        if phone_number is not None:
            self.phone_number = phone_number
        self.customer = customer
        self.call = call
        if artifact is not None:
            self.artifact = artifact
        if timestamp is not None:
            self.timestamp = timestamp
        self.transcript = transcript
        self.summary = summary
        self.analysis = analysis

    @property
    def type(self):
        """Gets the type of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the type of the message. \"end-of-call-report\" is sent when the call ends and post-processing is complete.  # noqa: E501

        :return: The type of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServerMessageEndOfCallReport.

        This is the type of the message. \"end-of-call-report\" is sent when the call ends and post-processing is complete.  # noqa: E501

        :param type: The type of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["end-of-call-report"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def ended_reason(self):
        """Gets the ended_reason of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the reason the call ended.  # noqa: E501

        :return: The ended_reason of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: str
        """
        return self._ended_reason

    @ended_reason.setter
    def ended_reason(self, ended_reason):
        """Sets the ended_reason of this ServerMessageEndOfCallReport.

        This is the reason the call ended.  # noqa: E501

        :param ended_reason: The ended_reason of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: str
        """
        if ended_reason is None:
            raise ValueError("Invalid value for `ended_reason`, must not be `None`")  # noqa: E501
        allowed_values = ["assistant-error", "assistant-not-found", "db-error", "no-server-available", "pipeline-error-openai-llm-failed", "pipeline-error-azure-openai-llm-failed", "pipeline-error-groq-llm-failed", "pipeline-error-openai-voice-failed", "pipeline-error-cartesia-voice-failed", "pipeline-error-deepgram-transcriber-failed", "pipeline-error-deepgram-voice-failed", "pipeline-error-gladia-transcriber-failed", "pipeline-error-eleven-labs-voice-failed", "pipeline-error-playht-voice-failed", "pipeline-error-lmnt-voice-failed", "pipeline-error-azure-voice-failed", "pipeline-error-rime-ai-voice-failed", "pipeline-error-neets-voice-failed", "pipeline-no-available-model", "worker-shutdown", "twilio-failed-to-connect-call", "unknown-error", "vonage-disconnected", "vonage-failed-to-connect-call", "phone-call-provider-bypass-enabled-but-no-call-received", "vapi-error-phone-call-worker-setup-socket-error", "vapi-error-phone-call-worker-worker-setup-socket-timeout", "vapi-error-phone-call-worker-could-not-find-call", "vapi-error-phone-call-worker-call-never-connected", "vapi-error-web-call-worker-setup-failed", "assistant-not-invalid", "assistant-not-provided", "call-start-error-neither-assistant-nor-server-set", "assistant-request-failed", "assistant-request-returned-error", "assistant-request-returned-unspeakable-error", "assistant-request-returned-invalid-assistant", "assistant-request-returned-no-assistant", "assistant-request-returned-forwarding-phone-number", "assistant-ended-call", "assistant-said-end-call-phrase", "assistant-forwarded-call", "assistant-join-timed-out", "customer-busy", "customer-ended-call", "customer-did-not-answer", "customer-did-not-give-microphone-permission", "assistant-said-message-with-end-call-enabled", "exceeded-max-duration", "manually-canceled", "phone-call-provider-closed-websocket", "pipeline-error-anthropic-llm-failed", "pipeline-error-together-ai-llm-failed", "pipeline-error-anyscale-llm-failed", "pipeline-error-openrouter-llm-failed", "pipeline-error-perplexity-ai-llm-failed", "pipeline-error-deepinfra-llm-failed", "pipeline-error-runpod-llm-failed", "pipeline-error-custom-llm-llm-failed", "pipeline-error-eleven-labs-voice-not-found", "pipeline-error-eleven-labs-quota-exceeded", "pipeline-error-eleven-labs-unauthorized-access", "pipeline-error-eleven-labs-unauthorized-to-access-model", "pipeline-error-eleven-labs-professional-voices-only-for-creator-plus", "pipeline-error-eleven-labs-blocked-free-plan-and-requested-upgrade", "pipeline-error-eleven-labs-blocked-concurrent-requests-and-requested-upgrade", "pipeline-error-eleven-labs-blocked-using-instant-voice-clone-and-requested-upgrade", "pipeline-error-eleven-labs-system-busy-and-requested-upgrade", "pipeline-error-eleven-labs-voice-not-fine-tuned", "pipeline-error-eleven-labs-invalid-api-key", "pipeline-error-eleven-labs-invalid-voice-samples", "pipeline-error-eleven-labs-voice-disabled-by-owner", "pipeline-error-eleven-labs-blocked-account-in-probation", "pipeline-error-playht-request-timed-out", "pipeline-error-playht-invalid-voice", "pipeline-error-playht-unexpected-error", "pipeline-error-playht-out-of-credits", "pipeline-error-playht-rate-limit-exceeded", "pipeline-error-playht-502-gateway-error", "pipeline-error-playht-504-gateway-error", "pipeline-error-gladia-transcriber-failed", "silence-timed-out", "voicemail", "vonage-rejected"]  # noqa: E501
        if ended_reason not in allowed_values:
            raise ValueError(
                "Invalid value for `ended_reason` ({0}), must be one of {1}"  # noqa: E501
                .format(ended_reason, allowed_values)
            )

        self._ended_reason = ended_reason

    @property
    def messages(self):
        """Gets the messages of this ServerMessageEndOfCallReport.  # noqa: E501

        These are the message history of the call. The format is not OpenAI format but a custom VAPI format.  # noqa: E501

        :return: The messages of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: list[OneOfServerMessageEndOfCallReportMessagesItems]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ServerMessageEndOfCallReport.

        These are the message history of the call. The format is not OpenAI format but a custom VAPI format.  # noqa: E501

        :param messages: The messages of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: list[OneOfServerMessageEndOfCallReportMessagesItems]
        """

        self._messages = messages

    @property
    def recording_url(self):
        """Gets the recording_url of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the URL of the call recording.  # noqa: E501

        :return: The recording_url of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: str
        """
        return self._recording_url

    @recording_url.setter
    def recording_url(self, recording_url):
        """Sets the recording_url of this ServerMessageEndOfCallReport.

        This is the URL of the call recording.  # noqa: E501

        :param recording_url: The recording_url of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: str
        """

        self._recording_url = recording_url

    @property
    def stereo_recording_url(self):
        """Gets the stereo_recording_url of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the URL of the stereo call recording.  # noqa: E501

        :return: The stereo_recording_url of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: str
        """
        return self._stereo_recording_url

    @stereo_recording_url.setter
    def stereo_recording_url(self, stereo_recording_url):
        """Sets the stereo_recording_url of this ServerMessageEndOfCallReport.

        This is the URL of the stereo call recording.  # noqa: E501

        :param stereo_recording_url: The stereo_recording_url of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: str
        """

        self._stereo_recording_url = stereo_recording_url

    @property
    def recording_wav(self):
        """Gets the recording_wav of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the WAV buffer of the call recording.  # noqa: E501

        :return: The recording_wav of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: object
        """
        return self._recording_wav

    @recording_wav.setter
    def recording_wav(self, recording_wav):
        """Sets the recording_wav of this ServerMessageEndOfCallReport.

        This is the WAV buffer of the call recording.  # noqa: E501

        :param recording_wav: The recording_wav of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: object
        """

        self._recording_wav = recording_wav

    @property
    def phone_number(self):
        """Gets the phone_number of this ServerMessageEndOfCallReport.  # noqa: E501

        The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`.  # noqa: E501

        :return: The phone_number of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: object
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ServerMessageEndOfCallReport.

        The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`.  # noqa: E501

        :param phone_number: The phone_number of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: object
        """

        self._phone_number = phone_number

    @property
    def customer(self):
        """Gets the customer of this ServerMessageEndOfCallReport.  # noqa: E501

        The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`.  # noqa: E501

        :return: The customer of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: object
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ServerMessageEndOfCallReport.

        The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`.  # noqa: E501

        :param customer: The customer of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: object
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def call(self):
        """Gets the call of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the main `call` object of the call.  # noqa: E501

        :return: The call of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: object
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this ServerMessageEndOfCallReport.

        This is the main `call` object of the call.  # noqa: E501

        :param call: The call of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: object
        """
        if call is None:
            raise ValueError("Invalid value for `call`, must not be `None`")  # noqa: E501

        self._call = call

    @property
    def artifact(self):
        """Gets the artifact of this ServerMessageEndOfCallReport.  # noqa: E501

        These are the artifacts from the call.  # noqa: E501

        :return: The artifact of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: AllOfServerMessageEndOfCallReportArtifact
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this ServerMessageEndOfCallReport.

        These are the artifacts from the call.  # noqa: E501

        :param artifact: The artifact of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: AllOfServerMessageEndOfCallReportArtifact
        """

        self._artifact = artifact

    @property
    def timestamp(self):
        """Gets the timestamp of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the timestamp of the message.  # noqa: E501

        :return: The timestamp of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ServerMessageEndOfCallReport.

        This is the timestamp of the message.  # noqa: E501

        :param timestamp: The timestamp of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def transcript(self):
        """Gets the transcript of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the transcript of the call.  # noqa: E501

        :return: The transcript of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: str
        """
        return self._transcript

    @transcript.setter
    def transcript(self, transcript):
        """Sets the transcript of this ServerMessageEndOfCallReport.

        This is the transcript of the call.  # noqa: E501

        :param transcript: The transcript of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: str
        """
        if transcript is None:
            raise ValueError("Invalid value for `transcript`, must not be `None`")  # noqa: E501

        self._transcript = transcript

    @property
    def summary(self):
        """Gets the summary of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the summary of the call.  # noqa: E501

        :return: The summary of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: str
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this ServerMessageEndOfCallReport.

        This is the summary of the call.  # noqa: E501

        :param summary: The summary of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: str
        """
        if summary is None:
            raise ValueError("Invalid value for `summary`, must not be `None`")  # noqa: E501

        self._summary = summary

    @property
    def analysis(self):
        """Gets the analysis of this ServerMessageEndOfCallReport.  # noqa: E501

        This is the analysis of the call.  # noqa: E501

        :return: The analysis of this ServerMessageEndOfCallReport.  # noqa: E501
        :rtype: AllOfServerMessageEndOfCallReportAnalysis
        """
        return self._analysis

    @analysis.setter
    def analysis(self, analysis):
        """Sets the analysis of this ServerMessageEndOfCallReport.

        This is the analysis of the call.  # noqa: E501

        :param analysis: The analysis of this ServerMessageEndOfCallReport.  # noqa: E501
        :type: AllOfServerMessageEndOfCallReportAnalysis
        """
        if analysis is None:
            raise ValueError("Invalid value for `analysis`, must not be `None`")  # noqa: E501

        self._analysis = analysis

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerMessageEndOfCallReport, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerMessageEndOfCallReport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
