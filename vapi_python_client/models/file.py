# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class File(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'object': 'str',
        'status': 'str',
        'name': 'str',
        'original_name': 'str',
        'bytes': 'float',
        'purpose': 'str',
        'mimetype': 'str',
        'key': 'str',
        'path': 'str',
        'bucket': 'str',
        'url': 'str',
        'metadata': 'object',
        'id': 'str',
        'org_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'object': 'object',
        'status': 'status',
        'name': 'name',
        'original_name': 'originalName',
        'bytes': 'bytes',
        'purpose': 'purpose',
        'mimetype': 'mimetype',
        'key': 'key',
        'path': 'path',
        'bucket': 'bucket',
        'url': 'url',
        'metadata': 'metadata',
        'id': 'id',
        'org_id': 'orgId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, object=None, status=None, name=None, original_name=None, bytes=None, purpose=None, mimetype=None, key=None, path=None, bucket=None, url=None, metadata=None, id=None, org_id=None, created_at=None, updated_at=None):  # noqa: E501
        """File - a model defined in Swagger"""  # noqa: E501
        self._object = None
        self._status = None
        self._name = None
        self._original_name = None
        self._bytes = None
        self._purpose = None
        self._mimetype = None
        self._key = None
        self._path = None
        self._bucket = None
        self._url = None
        self._metadata = None
        self._id = None
        self._org_id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if object is not None:
            self.object = object
        if status is not None:
            self.status = status
        if name is not None:
            self.name = name
        if original_name is not None:
            self.original_name = original_name
        if bytes is not None:
            self.bytes = bytes
        if purpose is not None:
            self.purpose = purpose
        if mimetype is not None:
            self.mimetype = mimetype
        if key is not None:
            self.key = key
        if path is not None:
            self.path = path
        if bucket is not None:
            self.bucket = bucket
        if url is not None:
            self.url = url
        if metadata is not None:
            self.metadata = metadata
        self.id = id
        self.org_id = org_id
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def object(self):
        """Gets the object of this File.  # noqa: E501


        :return: The object of this File.  # noqa: E501
        :rtype: str
        """
        return self._object

    @object.setter
    def object(self, object):
        """Sets the object of this File.


        :param object: The object of this File.  # noqa: E501
        :type: str
        """
        allowed_values = ["file"]  # noqa: E501
        if object not in allowed_values:
            raise ValueError(
                "Invalid value for `object` ({0}), must be one of {1}"  # noqa: E501
                .format(object, allowed_values)
            )

        self._object = object

    @property
    def status(self):
        """Gets the status of this File.  # noqa: E501


        :return: The status of this File.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this File.


        :param status: The status of this File.  # noqa: E501
        :type: str
        """
        allowed_values = ["indexed", "not_indexed"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def name(self):
        """Gets the name of this File.  # noqa: E501

        This is the name of the file. This is just for your own reference.  # noqa: E501

        :return: The name of this File.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this File.

        This is the name of the file. This is just for your own reference.  # noqa: E501

        :param name: The name of this File.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def original_name(self):
        """Gets the original_name of this File.  # noqa: E501


        :return: The original_name of this File.  # noqa: E501
        :rtype: str
        """
        return self._original_name

    @original_name.setter
    def original_name(self, original_name):
        """Sets the original_name of this File.


        :param original_name: The original_name of this File.  # noqa: E501
        :type: str
        """

        self._original_name = original_name

    @property
    def bytes(self):
        """Gets the bytes of this File.  # noqa: E501


        :return: The bytes of this File.  # noqa: E501
        :rtype: float
        """
        return self._bytes

    @bytes.setter
    def bytes(self, bytes):
        """Sets the bytes of this File.


        :param bytes: The bytes of this File.  # noqa: E501
        :type: float
        """

        self._bytes = bytes

    @property
    def purpose(self):
        """Gets the purpose of this File.  # noqa: E501


        :return: The purpose of this File.  # noqa: E501
        :rtype: str
        """
        return self._purpose

    @purpose.setter
    def purpose(self, purpose):
        """Sets the purpose of this File.


        :param purpose: The purpose of this File.  # noqa: E501
        :type: str
        """

        self._purpose = purpose

    @property
    def mimetype(self):
        """Gets the mimetype of this File.  # noqa: E501


        :return: The mimetype of this File.  # noqa: E501
        :rtype: str
        """
        return self._mimetype

    @mimetype.setter
    def mimetype(self, mimetype):
        """Sets the mimetype of this File.


        :param mimetype: The mimetype of this File.  # noqa: E501
        :type: str
        """

        self._mimetype = mimetype

    @property
    def key(self):
        """Gets the key of this File.  # noqa: E501


        :return: The key of this File.  # noqa: E501
        :rtype: str
        """
        return self._key

    @key.setter
    def key(self, key):
        """Sets the key of this File.


        :param key: The key of this File.  # noqa: E501
        :type: str
        """

        self._key = key

    @property
    def path(self):
        """Gets the path of this File.  # noqa: E501


        :return: The path of this File.  # noqa: E501
        :rtype: str
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this File.


        :param path: The path of this File.  # noqa: E501
        :type: str
        """

        self._path = path

    @property
    def bucket(self):
        """Gets the bucket of this File.  # noqa: E501


        :return: The bucket of this File.  # noqa: E501
        :rtype: str
        """
        return self._bucket

    @bucket.setter
    def bucket(self, bucket):
        """Sets the bucket of this File.


        :param bucket: The bucket of this File.  # noqa: E501
        :type: str
        """

        self._bucket = bucket

    @property
    def url(self):
        """Gets the url of this File.  # noqa: E501


        :return: The url of this File.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this File.


        :param url: The url of this File.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def metadata(self):
        """Gets the metadata of this File.  # noqa: E501


        :return: The metadata of this File.  # noqa: E501
        :rtype: object
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this File.


        :param metadata: The metadata of this File.  # noqa: E501
        :type: object
        """

        self._metadata = metadata

    @property
    def id(self):
        """Gets the id of this File.  # noqa: E501

        This is the unique identifier for the file.  # noqa: E501

        :return: The id of this File.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this File.

        This is the unique identifier for the file.  # noqa: E501

        :param id: The id of this File.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this File.  # noqa: E501

        This is the unique identifier for the org that this file belongs to.  # noqa: E501

        :return: The org_id of this File.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this File.

        This is the unique identifier for the org that this file belongs to.  # noqa: E501

        :param org_id: The org_id of this File.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def created_at(self):
        """Gets the created_at of this File.  # noqa: E501

        This is the ISO 8601 date-time string of when the file was created.  # noqa: E501

        :return: The created_at of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this File.

        This is the ISO 8601 date-time string of when the file was created.  # noqa: E501

        :param created_at: The created_at of this File.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this File.  # noqa: E501

        This is the ISO 8601 date-time string of when the file was last updated.  # noqa: E501

        :return: The updated_at of this File.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this File.

        This is the ISO 8601 date-time string of when the file was last updated.  # noqa: E501

        :param updated_at: The updated_at of this File.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(File, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, File):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
