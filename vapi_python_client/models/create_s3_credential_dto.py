# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateS3CredentialDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'str',
        'aws_access_key_id': 'str',
        'aws_secret_access_key': 'str',
        'region': 'str',
        's3_bucket_name': 'str',
        's3_path_prefix': 'str'
    }

    attribute_map = {
        'provider': 'provider',
        'aws_access_key_id': 'awsAccessKeyId',
        'aws_secret_access_key': 'awsSecretAccessKey',
        'region': 'region',
        's3_bucket_name': 's3BucketName',
        's3_path_prefix': 's3PathPrefix'
    }

    def __init__(self, provider=None, aws_access_key_id=None, aws_secret_access_key=None, region=None, s3_bucket_name=None, s3_path_prefix=None):  # noqa: E501
        """CreateS3CredentialDTO - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._aws_access_key_id = None
        self._aws_secret_access_key = None
        self._region = None
        self._s3_bucket_name = None
        self._s3_path_prefix = None
        self.discriminator = None
        self.provider = provider
        self.aws_access_key_id = aws_access_key_id
        self.aws_secret_access_key = aws_secret_access_key
        self.region = region
        self.s3_bucket_name = s3_bucket_name
        self.s3_path_prefix = s3_path_prefix

    @property
    def provider(self):
        """Gets the provider of this CreateS3CredentialDTO.  # noqa: E501

        Credential provider. Only allowed value is s3  # noqa: E501

        :return: The provider of this CreateS3CredentialDTO.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CreateS3CredentialDTO.

        Credential provider. Only allowed value is s3  # noqa: E501

        :param provider: The provider of this CreateS3CredentialDTO.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["s3"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def aws_access_key_id(self):
        """Gets the aws_access_key_id of this CreateS3CredentialDTO.  # noqa: E501

        AWS access key ID.  # noqa: E501

        :return: The aws_access_key_id of this CreateS3CredentialDTO.  # noqa: E501
        :rtype: str
        """
        return self._aws_access_key_id

    @aws_access_key_id.setter
    def aws_access_key_id(self, aws_access_key_id):
        """Sets the aws_access_key_id of this CreateS3CredentialDTO.

        AWS access key ID.  # noqa: E501

        :param aws_access_key_id: The aws_access_key_id of this CreateS3CredentialDTO.  # noqa: E501
        :type: str
        """
        if aws_access_key_id is None:
            raise ValueError("Invalid value for `aws_access_key_id`, must not be `None`")  # noqa: E501

        self._aws_access_key_id = aws_access_key_id

    @property
    def aws_secret_access_key(self):
        """Gets the aws_secret_access_key of this CreateS3CredentialDTO.  # noqa: E501

        AWS access key secret. This is not returned in the API.  # noqa: E501

        :return: The aws_secret_access_key of this CreateS3CredentialDTO.  # noqa: E501
        :rtype: str
        """
        return self._aws_secret_access_key

    @aws_secret_access_key.setter
    def aws_secret_access_key(self, aws_secret_access_key):
        """Sets the aws_secret_access_key of this CreateS3CredentialDTO.

        AWS access key secret. This is not returned in the API.  # noqa: E501

        :param aws_secret_access_key: The aws_secret_access_key of this CreateS3CredentialDTO.  # noqa: E501
        :type: str
        """
        if aws_secret_access_key is None:
            raise ValueError("Invalid value for `aws_secret_access_key`, must not be `None`")  # noqa: E501

        self._aws_secret_access_key = aws_secret_access_key

    @property
    def region(self):
        """Gets the region of this CreateS3CredentialDTO.  # noqa: E501

        AWS region in which the S3 bucket is located.  # noqa: E501

        :return: The region of this CreateS3CredentialDTO.  # noqa: E501
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """Sets the region of this CreateS3CredentialDTO.

        AWS region in which the S3 bucket is located.  # noqa: E501

        :param region: The region of this CreateS3CredentialDTO.  # noqa: E501
        :type: str
        """
        if region is None:
            raise ValueError("Invalid value for `region`, must not be `None`")  # noqa: E501

        self._region = region

    @property
    def s3_bucket_name(self):
        """Gets the s3_bucket_name of this CreateS3CredentialDTO.  # noqa: E501

        AWS S3 bucket name.  # noqa: E501

        :return: The s3_bucket_name of this CreateS3CredentialDTO.  # noqa: E501
        :rtype: str
        """
        return self._s3_bucket_name

    @s3_bucket_name.setter
    def s3_bucket_name(self, s3_bucket_name):
        """Sets the s3_bucket_name of this CreateS3CredentialDTO.

        AWS S3 bucket name.  # noqa: E501

        :param s3_bucket_name: The s3_bucket_name of this CreateS3CredentialDTO.  # noqa: E501
        :type: str
        """
        if s3_bucket_name is None:
            raise ValueError("Invalid value for `s3_bucket_name`, must not be `None`")  # noqa: E501

        self._s3_bucket_name = s3_bucket_name

    @property
    def s3_path_prefix(self):
        """Gets the s3_path_prefix of this CreateS3CredentialDTO.  # noqa: E501

        The path prefix for the uploaded recording. Ex. \"recordings/\"  # noqa: E501

        :return: The s3_path_prefix of this CreateS3CredentialDTO.  # noqa: E501
        :rtype: str
        """
        return self._s3_path_prefix

    @s3_path_prefix.setter
    def s3_path_prefix(self, s3_path_prefix):
        """Sets the s3_path_prefix of this CreateS3CredentialDTO.

        The path prefix for the uploaded recording. Ex. \"recordings/\"  # noqa: E501

        :param s3_path_prefix: The s3_path_prefix of this CreateS3CredentialDTO.  # noqa: E501
        :type: str
        """
        if s3_path_prefix is None:
            raise ValueError("Invalid value for `s3_path_prefix`, must not be `None`")  # noqa: E501

        self._s3_path_prefix = s3_path_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateS3CredentialDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateS3CredentialDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
