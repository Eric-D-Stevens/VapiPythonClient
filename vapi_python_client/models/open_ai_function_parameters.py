# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OpenAIFunctionParameters(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'properties': 'dict(str, JsonSchema)',
        'required': 'list[str]'
    }

    attribute_map = {
        'type': 'type',
        'properties': 'properties',
        'required': 'required'
    }

    def __init__(self, type=None, properties=None, required=None):  # noqa: E501
        """OpenAIFunctionParameters - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._properties = None
        self._required = None
        self.discriminator = None
        self.type = type
        self.properties = properties
        if required is not None:
            self.required = required

    @property
    def type(self):
        """Gets the type of this OpenAIFunctionParameters.  # noqa: E501

        This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.  # noqa: E501

        :return: The type of this OpenAIFunctionParameters.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OpenAIFunctionParameters.

        This must be set to 'object'. It instructs the model to return a JSON object containing the function call properties.  # noqa: E501

        :param type: The type of this OpenAIFunctionParameters.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["object"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def properties(self):
        """Gets the properties of this OpenAIFunctionParameters.  # noqa: E501

        This provides a description of the properties required by the function. JSON Schema can be used to specify expectations for each property. Refer to [this doc](https://ajv.js.org/json-schema.html#json-data-type) for a comprehensive guide on JSON Schema.  # noqa: E501

        :return: The properties of this OpenAIFunctionParameters.  # noqa: E501
        :rtype: dict(str, JsonSchema)
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this OpenAIFunctionParameters.

        This provides a description of the properties required by the function. JSON Schema can be used to specify expectations for each property. Refer to [this doc](https://ajv.js.org/json-schema.html#json-data-type) for a comprehensive guide on JSON Schema.  # noqa: E501

        :param properties: The properties of this OpenAIFunctionParameters.  # noqa: E501
        :type: dict(str, JsonSchema)
        """
        if properties is None:
            raise ValueError("Invalid value for `properties`, must not be `None`")  # noqa: E501

        self._properties = properties

    @property
    def required(self):
        """Gets the required of this OpenAIFunctionParameters.  # noqa: E501

        This specifies the properties that are required by the function.  # noqa: E501

        :return: The required of this OpenAIFunctionParameters.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this OpenAIFunctionParameters.

        This specifies the properties that are required by the function.  # noqa: E501

        :param required: The required of this OpenAIFunctionParameters.  # noqa: E501
        :type: list[str]
        """

        self._required = required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OpenAIFunctionParameters, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OpenAIFunctionParameters):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
