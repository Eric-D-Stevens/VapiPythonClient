# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransportConfigurationTwilio(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'str',
        'timeout': 'float',
        'record': 'bool',
        'recording_channels': 'str'
    }

    attribute_map = {
        'provider': 'provider',
        'timeout': 'timeout',
        'record': 'record',
        'recording_channels': 'recordingChannels'
    }

    def __init__(self, provider=None, timeout=None, record=None, recording_channels=None):  # noqa: E501
        """TransportConfigurationTwilio - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._timeout = None
        self._record = None
        self._recording_channels = None
        self.discriminator = None
        self.provider = provider
        if timeout is not None:
            self.timeout = timeout
        if record is not None:
            self.record = record
        if recording_channels is not None:
            self.recording_channels = recording_channels

    @property
    def provider(self):
        """Gets the provider of this TransportConfigurationTwilio.  # noqa: E501


        :return: The provider of this TransportConfigurationTwilio.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this TransportConfigurationTwilio.


        :param provider: The provider of this TransportConfigurationTwilio.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["twilio"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def timeout(self):
        """Gets the timeout of this TransportConfigurationTwilio.  # noqa: E501

        The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.  @default 60  # noqa: E501

        :return: The timeout of this TransportConfigurationTwilio.  # noqa: E501
        :rtype: float
        """
        return self._timeout

    @timeout.setter
    def timeout(self, timeout):
        """Sets the timeout of this TransportConfigurationTwilio.

        The integer number of seconds that we should allow the phone to ring before assuming there is no answer. The default is `60` seconds and the maximum is `600` seconds. For some call flows, we will add a 5-second buffer to the timeout value you provide. For this reason, a timeout value of 10 seconds could result in an actual timeout closer to 15 seconds. You can set this to a short time, such as `15` seconds, to hang up before reaching an answering machine or voicemail.  @default 60  # noqa: E501

        :param timeout: The timeout of this TransportConfigurationTwilio.  # noqa: E501
        :type: float
        """

        self._timeout = timeout

    @property
    def record(self):
        """Gets the record of this TransportConfigurationTwilio.  # noqa: E501

        Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`.  @default false  # noqa: E501

        :return: The record of this TransportConfigurationTwilio.  # noqa: E501
        :rtype: bool
        """
        return self._record

    @record.setter
    def record(self, record):
        """Sets the record of this TransportConfigurationTwilio.

        Whether to record the call. Can be `true` to record the phone call, or `false` to not. The default is `false`.  @default false  # noqa: E501

        :param record: The record of this TransportConfigurationTwilio.  # noqa: E501
        :type: bool
        """

        self._record = record

    @property
    def recording_channels(self):
        """Gets the recording_channels of this TransportConfigurationTwilio.  # noqa: E501

        The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.  @default 'mono'  # noqa: E501

        :return: The recording_channels of this TransportConfigurationTwilio.  # noqa: E501
        :rtype: str
        """
        return self._recording_channels

    @recording_channels.setter
    def recording_channels(self, recording_channels):
        """Sets the recording_channels of this TransportConfigurationTwilio.

        The number of channels in the final recording. Can be: `mono` or `dual`. The default is `mono`. `mono` records both legs of the call in a single channel of the recording file. `dual` records each leg to a separate channel of the recording file. The first channel of a dual-channel recording contains the parent call and the second channel contains the child call.  @default 'mono'  # noqa: E501

        :param recording_channels: The recording_channels of this TransportConfigurationTwilio.  # noqa: E501
        :type: str
        """
        allowed_values = ["mono", "dual"]  # noqa: E501
        if recording_channels not in allowed_values:
            raise ValueError(
                "Invalid value for `recording_channels` ({0}), must be one of {1}"  # noqa: E501
                .format(recording_channels, allowed_values)
            )

        self._recording_channels = recording_channels

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransportConfigurationTwilio, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransportConfigurationTwilio):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
