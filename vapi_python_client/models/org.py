# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Org(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hipaa_enabled': 'bool',
        'id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'stripe_customer_id': 'str',
        'stripe_subscription_id': 'str',
        'stripe_subscription_item_id': 'str',
        'stripe_subscription_current_period_start': 'datetime',
        'stripe_subscription_status': 'str',
        'plan': 'AllOfOrgPlan',
        'name': 'str',
        'billing_limit': 'float',
        'server_url': 'str',
        'server_url_secret': 'str',
        'concurrency_limit': 'float'
    }

    attribute_map = {
        'hipaa_enabled': 'hipaaEnabled',
        'id': 'id',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'stripe_customer_id': 'stripeCustomerId',
        'stripe_subscription_id': 'stripeSubscriptionId',
        'stripe_subscription_item_id': 'stripeSubscriptionItemId',
        'stripe_subscription_current_period_start': 'stripeSubscriptionCurrentPeriodStart',
        'stripe_subscription_status': 'stripeSubscriptionStatus',
        'plan': 'plan',
        'name': 'name',
        'billing_limit': 'billingLimit',
        'server_url': 'serverUrl',
        'server_url_secret': 'serverUrlSecret',
        'concurrency_limit': 'concurrencyLimit'
    }

    def __init__(self, hipaa_enabled=None, id=None, created_at=None, updated_at=None, stripe_customer_id=None, stripe_subscription_id=None, stripe_subscription_item_id=None, stripe_subscription_current_period_start=None, stripe_subscription_status=None, plan=None, name=None, billing_limit=None, server_url=None, server_url_secret=None, concurrency_limit=None):  # noqa: E501
        """Org - a model defined in Swagger"""  # noqa: E501
        self._hipaa_enabled = None
        self._id = None
        self._created_at = None
        self._updated_at = None
        self._stripe_customer_id = None
        self._stripe_subscription_id = None
        self._stripe_subscription_item_id = None
        self._stripe_subscription_current_period_start = None
        self._stripe_subscription_status = None
        self._plan = None
        self._name = None
        self._billing_limit = None
        self._server_url = None
        self._server_url_secret = None
        self._concurrency_limit = None
        self.discriminator = None
        if hipaa_enabled is not None:
            self.hipaa_enabled = hipaa_enabled
        self.id = id
        self.created_at = created_at
        self.updated_at = updated_at
        if stripe_customer_id is not None:
            self.stripe_customer_id = stripe_customer_id
        if stripe_subscription_id is not None:
            self.stripe_subscription_id = stripe_subscription_id
        if stripe_subscription_item_id is not None:
            self.stripe_subscription_item_id = stripe_subscription_item_id
        if stripe_subscription_current_period_start is not None:
            self.stripe_subscription_current_period_start = stripe_subscription_current_period_start
        if stripe_subscription_status is not None:
            self.stripe_subscription_status = stripe_subscription_status
        if plan is not None:
            self.plan = plan
        if name is not None:
            self.name = name
        if billing_limit is not None:
            self.billing_limit = billing_limit
        if server_url is not None:
            self.server_url = server_url
        if server_url_secret is not None:
            self.server_url_secret = server_url_secret
        if concurrency_limit is not None:
            self.concurrency_limit = concurrency_limit

    @property
    def hipaa_enabled(self):
        """Gets the hipaa_enabled of this Org.  # noqa: E501

        When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false. When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively. This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.  # noqa: E501

        :return: The hipaa_enabled of this Org.  # noqa: E501
        :rtype: bool
        """
        return self._hipaa_enabled

    @hipaa_enabled.setter
    def hipaa_enabled(self, hipaa_enabled):
        """Sets the hipaa_enabled of this Org.

        When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false. When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively. This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.  # noqa: E501

        :param hipaa_enabled: The hipaa_enabled of this Org.  # noqa: E501
        :type: bool
        """

        self._hipaa_enabled = hipaa_enabled

    @property
    def id(self):
        """Gets the id of this Org.  # noqa: E501

        This is the unique identifier for the org.  # noqa: E501

        :return: The id of this Org.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Org.

        This is the unique identifier for the org.  # noqa: E501

        :param id: The id of this Org.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this Org.  # noqa: E501

        This is the ISO 8601 date-time string of when the org was created.  # noqa: E501

        :return: The created_at of this Org.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Org.

        This is the ISO 8601 date-time string of when the org was created.  # noqa: E501

        :param created_at: The created_at of this Org.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Org.  # noqa: E501

        This is the ISO 8601 date-time string of when the org was last updated.  # noqa: E501

        :return: The updated_at of this Org.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Org.

        This is the ISO 8601 date-time string of when the org was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Org.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def stripe_customer_id(self):
        """Gets the stripe_customer_id of this Org.  # noqa: E501

        This is the Stripe customer for the org.  # noqa: E501

        :return: The stripe_customer_id of this Org.  # noqa: E501
        :rtype: str
        """
        return self._stripe_customer_id

    @stripe_customer_id.setter
    def stripe_customer_id(self, stripe_customer_id):
        """Sets the stripe_customer_id of this Org.

        This is the Stripe customer for the org.  # noqa: E501

        :param stripe_customer_id: The stripe_customer_id of this Org.  # noqa: E501
        :type: str
        """

        self._stripe_customer_id = stripe_customer_id

    @property
    def stripe_subscription_id(self):
        """Gets the stripe_subscription_id of this Org.  # noqa: E501

        This is the subscription for the org.  # noqa: E501

        :return: The stripe_subscription_id of this Org.  # noqa: E501
        :rtype: str
        """
        return self._stripe_subscription_id

    @stripe_subscription_id.setter
    def stripe_subscription_id(self, stripe_subscription_id):
        """Sets the stripe_subscription_id of this Org.

        This is the subscription for the org.  # noqa: E501

        :param stripe_subscription_id: The stripe_subscription_id of this Org.  # noqa: E501
        :type: str
        """

        self._stripe_subscription_id = stripe_subscription_id

    @property
    def stripe_subscription_item_id(self):
        """Gets the stripe_subscription_item_id of this Org.  # noqa: E501

        This is the subscription's subscription item.  # noqa: E501

        :return: The stripe_subscription_item_id of this Org.  # noqa: E501
        :rtype: str
        """
        return self._stripe_subscription_item_id

    @stripe_subscription_item_id.setter
    def stripe_subscription_item_id(self, stripe_subscription_item_id):
        """Sets the stripe_subscription_item_id of this Org.

        This is the subscription's subscription item.  # noqa: E501

        :param stripe_subscription_item_id: The stripe_subscription_item_id of this Org.  # noqa: E501
        :type: str
        """

        self._stripe_subscription_item_id = stripe_subscription_item_id

    @property
    def stripe_subscription_current_period_start(self):
        """Gets the stripe_subscription_current_period_start of this Org.  # noqa: E501

        This is the subscription's current period start.  # noqa: E501

        :return: The stripe_subscription_current_period_start of this Org.  # noqa: E501
        :rtype: datetime
        """
        return self._stripe_subscription_current_period_start

    @stripe_subscription_current_period_start.setter
    def stripe_subscription_current_period_start(self, stripe_subscription_current_period_start):
        """Sets the stripe_subscription_current_period_start of this Org.

        This is the subscription's current period start.  # noqa: E501

        :param stripe_subscription_current_period_start: The stripe_subscription_current_period_start of this Org.  # noqa: E501
        :type: datetime
        """

        self._stripe_subscription_current_period_start = stripe_subscription_current_period_start

    @property
    def stripe_subscription_status(self):
        """Gets the stripe_subscription_status of this Org.  # noqa: E501

        This is the subscription's status.  # noqa: E501

        :return: The stripe_subscription_status of this Org.  # noqa: E501
        :rtype: str
        """
        return self._stripe_subscription_status

    @stripe_subscription_status.setter
    def stripe_subscription_status(self, stripe_subscription_status):
        """Sets the stripe_subscription_status of this Org.

        This is the subscription's status.  # noqa: E501

        :param stripe_subscription_status: The stripe_subscription_status of this Org.  # noqa: E501
        :type: str
        """

        self._stripe_subscription_status = stripe_subscription_status

    @property
    def plan(self):
        """Gets the plan of this Org.  # noqa: E501

        This is the plan for the org.  # noqa: E501

        :return: The plan of this Org.  # noqa: E501
        :rtype: AllOfOrgPlan
        """
        return self._plan

    @plan.setter
    def plan(self, plan):
        """Sets the plan of this Org.

        This is the plan for the org.  # noqa: E501

        :param plan: The plan of this Org.  # noqa: E501
        :type: AllOfOrgPlan
        """

        self._plan = plan

    @property
    def name(self):
        """Gets the name of this Org.  # noqa: E501

        This is the name of the org. This is just for your own reference.  # noqa: E501

        :return: The name of this Org.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Org.

        This is the name of the org. This is just for your own reference.  # noqa: E501

        :param name: The name of this Org.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def billing_limit(self):
        """Gets the billing_limit of this Org.  # noqa: E501

        This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.  # noqa: E501

        :return: The billing_limit of this Org.  # noqa: E501
        :rtype: float
        """
        return self._billing_limit

    @billing_limit.setter
    def billing_limit(self, billing_limit):
        """Sets the billing_limit of this Org.

        This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.  # noqa: E501

        :param billing_limit: The billing_limit of this Org.  # noqa: E501
        :type: float
        """

        self._billing_limit = billing_limit

    @property
    def server_url(self):
        """Gets the server_url of this Org.  # noqa: E501

        This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.  All requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.  # noqa: E501

        :return: The server_url of this Org.  # noqa: E501
        :rtype: str
        """
        return self._server_url

    @server_url.setter
    def server_url(self, server_url):
        """Sets the server_url of this Org.

        This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.  All requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.  # noqa: E501

        :param server_url: The server_url of this Org.  # noqa: E501
        :type: str
        """

        self._server_url = server_url

    @property
    def server_url_secret(self):
        """Gets the server_url_secret of this Org.  # noqa: E501

        This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.  # noqa: E501

        :return: The server_url_secret of this Org.  # noqa: E501
        :rtype: str
        """
        return self._server_url_secret

    @server_url_secret.setter
    def server_url_secret(self, server_url_secret):
        """Sets the server_url_secret of this Org.

        This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.  # noqa: E501

        :param server_url_secret: The server_url_secret of this Org.  # noqa: E501
        :type: str
        """

        self._server_url_secret = server_url_secret

    @property
    def concurrency_limit(self):
        """Gets the concurrency_limit of this Org.  # noqa: E501

        This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.  # noqa: E501

        :return: The concurrency_limit of this Org.  # noqa: E501
        :rtype: float
        """
        return self._concurrency_limit

    @concurrency_limit.setter
    def concurrency_limit(self, concurrency_limit):
        """Sets the concurrency_limit of this Org.

        This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.  # noqa: E501

        :param concurrency_limit: The concurrency_limit of this Org.  # noqa: E501
        :type: float
        """

        self._concurrency_limit = concurrency_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Org, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Org):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
