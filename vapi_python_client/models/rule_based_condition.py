# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class RuleBasedCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'operator': 'str',
        'left_side': 'str',
        'right_side': 'str'
    }

    attribute_map = {
        'type': 'type',
        'operator': 'operator',
        'left_side': 'leftSide',
        'right_side': 'rightSide'
    }

    def __init__(self, type=None, operator=None, left_side=None, right_side=None):  # noqa: E501
        """RuleBasedCondition - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._operator = None
        self._left_side = None
        self._right_side = None
        self.discriminator = None
        self.type = type
        self.operator = operator
        self.left_side = left_side
        self.right_side = right_side

    @property
    def type(self):
        """Gets the type of this RuleBasedCondition.  # noqa: E501

        This condition is based on a strict rule.  # noqa: E501

        :return: The type of this RuleBasedCondition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this RuleBasedCondition.

        This condition is based on a strict rule.  # noqa: E501

        :param type: The type of this RuleBasedCondition.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["rule-based"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def operator(self):
        """Gets the operator of this RuleBasedCondition.  # noqa: E501

        This is the operator you want to use to compare the left side and right side.  The operation becomes `(leftSide) operator (rightSide)`.  # noqa: E501

        :return: The operator of this RuleBasedCondition.  # noqa: E501
        :rtype: str
        """
        return self._operator

    @operator.setter
    def operator(self, operator):
        """Sets the operator of this RuleBasedCondition.

        This is the operator you want to use to compare the left side and right side.  The operation becomes `(leftSide) operator (rightSide)`.  # noqa: E501

        :param operator: The operator of this RuleBasedCondition.  # noqa: E501
        :type: str
        """
        if operator is None:
            raise ValueError("Invalid value for `operator`, must not be `None`")  # noqa: E501
        allowed_values = ["eq", "neq", "gt", "gte", "lt", "lte"]  # noqa: E501
        if operator not in allowed_values:
            raise ValueError(
                "Invalid value for `operator` ({0}), must be one of {1}"  # noqa: E501
                .format(operator, allowed_values)
            )

        self._operator = operator

    @property
    def left_side(self):
        """Gets the left_side of this RuleBasedCondition.  # noqa: E501

        This is the left side of the operation.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{input.your-property-name}}\" for current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  Or, you can use a constant: - \"1\" - \"text\" - \"true\" - \"false\"  Or, you can mix and match with string interpolation: - \"{{your-property-name}}-{{input.your-property-name-2}}-1\"  # noqa: E501

        :return: The left_side of this RuleBasedCondition.  # noqa: E501
        :rtype: str
        """
        return self._left_side

    @left_side.setter
    def left_side(self, left_side):
        """Sets the left_side of this RuleBasedCondition.

        This is the left side of the operation.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{input.your-property-name}}\" for current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  Or, you can use a constant: - \"1\" - \"text\" - \"true\" - \"false\"  Or, you can mix and match with string interpolation: - \"{{your-property-name}}-{{input.your-property-name-2}}-1\"  # noqa: E501

        :param left_side: The left_side of this RuleBasedCondition.  # noqa: E501
        :type: str
        """
        if left_side is None:
            raise ValueError("Invalid value for `left_side`, must not be `None`")  # noqa: E501

        self._left_side = left_side

    @property
    def right_side(self):
        """Gets the right_side of this RuleBasedCondition.  # noqa: E501

        This is the right side of the operation.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{input.your-property-name}}\" for current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  Or, you can use a constant: - \"1\" - \"text\" - \"true\" - \"false\"  Or, you can mix and match with string interpolation: - \"{{your-property-name}}-{{input.your-property-name-2}}-1\"  # noqa: E501

        :return: The right_side of this RuleBasedCondition.  # noqa: E501
        :rtype: str
        """
        return self._right_side

    @right_side.setter
    def right_side(self, right_side):
        """Sets the right_side of this RuleBasedCondition.

        This is the right side of the operation.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{input.your-property-name}}\" for current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  Or, you can use a constant: - \"1\" - \"text\" - \"true\" - \"false\"  Or, you can mix and match with string interpolation: - \"{{your-property-name}}-{{input.your-property-name-2}}-1\"  # noqa: E501

        :param right_side: The right_side of this RuleBasedCondition.  # noqa: E501
        :type: str
        """
        if right_side is None:
            raise ValueError("Invalid value for `right_side`, must not be `None`")  # noqa: E501

        self._right_side = right_side

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(RuleBasedCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RuleBasedCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
