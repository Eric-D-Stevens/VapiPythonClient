# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerMessageTransferUpdate(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'destination': 'OneOfServerMessageTransferUpdateDestination',
        'phone_number': 'object',
        'customer': 'object',
        'call': 'object',
        'artifact': 'object',
        'timestamp': 'str',
        'to_assistant': 'AllOfServerMessageTransferUpdateToAssistant',
        'from_assistant': 'AllOfServerMessageTransferUpdateFromAssistant'
    }

    attribute_map = {
        'type': 'type',
        'destination': 'destination',
        'phone_number': 'phoneNumber',
        'customer': 'customer',
        'call': 'call',
        'artifact': 'artifact',
        'timestamp': 'timestamp',
        'to_assistant': 'toAssistant',
        'from_assistant': 'fromAssistant'
    }

    def __init__(self, type=None, destination=None, phone_number=None, customer=None, call=None, artifact=None, timestamp=None, to_assistant=None, from_assistant=None):  # noqa: E501
        """ServerMessageTransferUpdate - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._destination = None
        self._phone_number = None
        self._customer = None
        self._call = None
        self._artifact = None
        self._timestamp = None
        self._to_assistant = None
        self._from_assistant = None
        self.discriminator = None
        self.type = type
        if destination is not None:
            self.destination = destination
        if phone_number is not None:
            self.phone_number = phone_number
        self.customer = customer
        self.call = call
        if artifact is not None:
            self.artifact = artifact
        if timestamp is not None:
            self.timestamp = timestamp
        if to_assistant is not None:
            self.to_assistant = to_assistant
        if from_assistant is not None:
            self.from_assistant = from_assistant

    @property
    def type(self):
        """Gets the type of this ServerMessageTransferUpdate.  # noqa: E501

        This is the type of the message. \"transfer-update\" is sent whenever a transfer happens.  # noqa: E501

        :return: The type of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ServerMessageTransferUpdate.

        This is the type of the message. \"transfer-update\" is sent whenever a transfer happens.  # noqa: E501

        :param type: The type of this ServerMessageTransferUpdate.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["transfer-update"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def destination(self):
        """Gets the destination of this ServerMessageTransferUpdate.  # noqa: E501

        This is the destination of the transfer.  # noqa: E501

        :return: The destination of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: OneOfServerMessageTransferUpdateDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ServerMessageTransferUpdate.

        This is the destination of the transfer.  # noqa: E501

        :param destination: The destination of this ServerMessageTransferUpdate.  # noqa: E501
        :type: OneOfServerMessageTransferUpdateDestination
        """

        self._destination = destination

    @property
    def phone_number(self):
        """Gets the phone_number of this ServerMessageTransferUpdate.  # noqa: E501

        The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`.  # noqa: E501

        :return: The phone_number of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: object
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this ServerMessageTransferUpdate.

        The phone number associated with the call. This either directly matches `call.phoneNumber` or is expanded from `call.phoneNumberId`.  # noqa: E501

        :param phone_number: The phone_number of this ServerMessageTransferUpdate.  # noqa: E501
        :type: object
        """

        self._phone_number = phone_number

    @property
    def customer(self):
        """Gets the customer of this ServerMessageTransferUpdate.  # noqa: E501

        The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`.  # noqa: E501

        :return: The customer of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: object
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this ServerMessageTransferUpdate.

        The customer associated with the call. This either directly matches `call.customer` or is expanded from `call.customerId`.  # noqa: E501

        :param customer: The customer of this ServerMessageTransferUpdate.  # noqa: E501
        :type: object
        """
        if customer is None:
            raise ValueError("Invalid value for `customer`, must not be `None`")  # noqa: E501

        self._customer = customer

    @property
    def call(self):
        """Gets the call of this ServerMessageTransferUpdate.  # noqa: E501

        This is the main `call` object of the call.  # noqa: E501

        :return: The call of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: object
        """
        return self._call

    @call.setter
    def call(self, call):
        """Sets the call of this ServerMessageTransferUpdate.

        This is the main `call` object of the call.  # noqa: E501

        :param call: The call of this ServerMessageTransferUpdate.  # noqa: E501
        :type: object
        """
        if call is None:
            raise ValueError("Invalid value for `call`, must not be `None`")  # noqa: E501

        self._call = call

    @property
    def artifact(self):
        """Gets the artifact of this ServerMessageTransferUpdate.  # noqa: E501

        These are the live artifacts of the call.  # noqa: E501

        :return: The artifact of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: object
        """
        return self._artifact

    @artifact.setter
    def artifact(self, artifact):
        """Sets the artifact of this ServerMessageTransferUpdate.

        These are the live artifacts of the call.  # noqa: E501

        :param artifact: The artifact of this ServerMessageTransferUpdate.  # noqa: E501
        :type: object
        """

        self._artifact = artifact

    @property
    def timestamp(self):
        """Gets the timestamp of this ServerMessageTransferUpdate.  # noqa: E501

        This is the timestamp of the message.  # noqa: E501

        :return: The timestamp of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this ServerMessageTransferUpdate.

        This is the timestamp of the message.  # noqa: E501

        :param timestamp: The timestamp of this ServerMessageTransferUpdate.  # noqa: E501
        :type: str
        """

        self._timestamp = timestamp

    @property
    def to_assistant(self):
        """Gets the to_assistant of this ServerMessageTransferUpdate.  # noqa: E501

        This is the assistant that the call is being transferred to. This is only sent if `destination.type` is \"assistant\".  # noqa: E501

        :return: The to_assistant of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: AllOfServerMessageTransferUpdateToAssistant
        """
        return self._to_assistant

    @to_assistant.setter
    def to_assistant(self, to_assistant):
        """Sets the to_assistant of this ServerMessageTransferUpdate.

        This is the assistant that the call is being transferred to. This is only sent if `destination.type` is \"assistant\".  # noqa: E501

        :param to_assistant: The to_assistant of this ServerMessageTransferUpdate.  # noqa: E501
        :type: AllOfServerMessageTransferUpdateToAssistant
        """

        self._to_assistant = to_assistant

    @property
    def from_assistant(self):
        """Gets the from_assistant of this ServerMessageTransferUpdate.  # noqa: E501

        This is the assistant that the call is being transferred from. This is only sent if `destination.type` is \"assistant\".  # noqa: E501

        :return: The from_assistant of this ServerMessageTransferUpdate.  # noqa: E501
        :rtype: AllOfServerMessageTransferUpdateFromAssistant
        """
        return self._from_assistant

    @from_assistant.setter
    def from_assistant(self, from_assistant):
        """Sets the from_assistant of this ServerMessageTransferUpdate.

        This is the assistant that the call is being transferred from. This is only sent if `destination.type` is \"assistant\".  # noqa: E501

        :param from_assistant: The from_assistant of this ServerMessageTransferUpdate.  # noqa: E501
        :type: AllOfServerMessageTransferUpdateFromAssistant
        """

        self._from_assistant = from_assistant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerMessageTransferUpdate, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerMessageTransferUpdate):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
