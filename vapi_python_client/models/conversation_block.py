# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ConversationBlock(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'messages': 'list[OneOfConversationBlockMessagesItems]',
        'input_schema': 'AllOfConversationBlockInputSchema',
        'output_schema': 'AllOfConversationBlockOutputSchema',
        'type': 'str',
        'id': 'str',
        'org_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'name': 'str',
        'instruction': 'str'
    }

    attribute_map = {
        'messages': 'messages',
        'input_schema': 'inputSchema',
        'output_schema': 'outputSchema',
        'type': 'type',
        'id': 'id',
        'org_id': 'orgId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'name': 'name',
        'instruction': 'instruction'
    }

    def __init__(self, messages=None, input_schema=None, output_schema=None, type=None, id=None, org_id=None, created_at=None, updated_at=None, name=None, instruction=None):  # noqa: E501
        """ConversationBlock - a model defined in Swagger"""  # noqa: E501
        self._messages = None
        self._input_schema = None
        self._output_schema = None
        self._type = None
        self._id = None
        self._org_id = None
        self._created_at = None
        self._updated_at = None
        self._name = None
        self._instruction = None
        self.discriminator = None
        if messages is not None:
            self.messages = messages
        if input_schema is not None:
            self.input_schema = input_schema
        if output_schema is not None:
            self.output_schema = output_schema
        self.type = type
        self.id = id
        self.org_id = org_id
        self.created_at = created_at
        self.updated_at = updated_at
        if name is not None:
            self.name = name
        self.instruction = instruction

    @property
    def messages(self):
        """Gets the messages of this ConversationBlock.  # noqa: E501

        These are the pre-configured messages that will be spoken to the user while the block is running.  # noqa: E501

        :return: The messages of this ConversationBlock.  # noqa: E501
        :rtype: list[OneOfConversationBlockMessagesItems]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this ConversationBlock.

        These are the pre-configured messages that will be spoken to the user while the block is running.  # noqa: E501

        :param messages: The messages of this ConversationBlock.  # noqa: E501
        :type: list[OneOfConversationBlockMessagesItems]
        """

        self._messages = messages

    @property
    def input_schema(self):
        """Gets the input_schema of this ConversationBlock.  # noqa: E501

        This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`  These are accessible as variables: - ({{input.propertyName}}) in context of the block execution (step) - ({{stepName.input.propertyName}}) in context of the workflow  # noqa: E501

        :return: The input_schema of this ConversationBlock.  # noqa: E501
        :rtype: AllOfConversationBlockInputSchema
        """
        return self._input_schema

    @input_schema.setter
    def input_schema(self, input_schema):
        """Sets the input_schema of this ConversationBlock.

        This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`  These are accessible as variables: - ({{input.propertyName}}) in context of the block execution (step) - ({{stepName.input.propertyName}}) in context of the workflow  # noqa: E501

        :param input_schema: The input_schema of this ConversationBlock.  # noqa: E501
        :type: AllOfConversationBlockInputSchema
        """

        self._input_schema = input_schema

    @property
    def output_schema(self):
        """Gets the output_schema of this ConversationBlock.  # noqa: E501

        This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).  These are accessible as variables: - ({{output.propertyName}}) in context of the block execution (step) - ({{stepName.output.propertyName}}) in context of the workflow  # noqa: E501

        :return: The output_schema of this ConversationBlock.  # noqa: E501
        :rtype: AllOfConversationBlockOutputSchema
        """
        return self._output_schema

    @output_schema.setter
    def output_schema(self, output_schema):
        """Sets the output_schema of this ConversationBlock.

        This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).  These are accessible as variables: - ({{output.propertyName}}) in context of the block execution (step) - ({{stepName.output.propertyName}}) in context of the workflow  # noqa: E501

        :param output_schema: The output_schema of this ConversationBlock.  # noqa: E501
        :type: AllOfConversationBlockOutputSchema
        """

        self._output_schema = output_schema

    @property
    def type(self):
        """Gets the type of this ConversationBlock.  # noqa: E501

        This block is used for conversation. This can be a free flow conversation or a conversation with a specific goal like collecting some information.  For free block conversation, put clearly in the `instruction` when the block can be considered done. ``` {  \"type\": \"conversation\",  \"instruction\": \"Chit chat with the user asking them about their day. When user asks a specific question or once you have talked to the user for a couple of turns of conversation, move on.\" } ```  For conversation with a specific goal, you can define an `outputSchema` with required fields. The block won't be considered done until the user has provided all the required fields in the `outputSchema`. ``` {  \"type\": \"conversation\",  \"instruction\": \"Ask the user about their hobbies, hopes and dreams.\",  \"outputSchema\": {    \"type\": \"object\",    \"properties\": {      \"hobbies\": {        \"type\": \"string\"      },      \"hopes\": {        \"type\": \"string\"      },      \"dreams\": {        \"type\": \"string\"      }    },    \"required\": [\"hobbies\"]  } } ``` For the above example, the conversation block will be considered done once the user has provided the `hobbies` (even if they have not provided the `hopes` and `dreams`).  # noqa: E501

        :return: The type of this ConversationBlock.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ConversationBlock.

        This block is used for conversation. This can be a free flow conversation or a conversation with a specific goal like collecting some information.  For free block conversation, put clearly in the `instruction` when the block can be considered done. ``` {  \"type\": \"conversation\",  \"instruction\": \"Chit chat with the user asking them about their day. When user asks a specific question or once you have talked to the user for a couple of turns of conversation, move on.\" } ```  For conversation with a specific goal, you can define an `outputSchema` with required fields. The block won't be considered done until the user has provided all the required fields in the `outputSchema`. ``` {  \"type\": \"conversation\",  \"instruction\": \"Ask the user about their hobbies, hopes and dreams.\",  \"outputSchema\": {    \"type\": \"object\",    \"properties\": {      \"hobbies\": {        \"type\": \"string\"      },      \"hopes\": {        \"type\": \"string\"      },      \"dreams\": {        \"type\": \"string\"      }    },    \"required\": [\"hobbies\"]  } } ``` For the above example, the conversation block will be considered done once the user has provided the `hobbies` (even if they have not provided the `hopes` and `dreams`).  # noqa: E501

        :param type: The type of this ConversationBlock.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["conversation"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def id(self):
        """Gets the id of this ConversationBlock.  # noqa: E501

        This is the unique identifier for the block.  # noqa: E501

        :return: The id of this ConversationBlock.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ConversationBlock.

        This is the unique identifier for the block.  # noqa: E501

        :param id: The id of this ConversationBlock.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this ConversationBlock.  # noqa: E501

        This is the unique identifier for the organization that this block belongs to.  # noqa: E501

        :return: The org_id of this ConversationBlock.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ConversationBlock.

        This is the unique identifier for the organization that this block belongs to.  # noqa: E501

        :param org_id: The org_id of this ConversationBlock.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def created_at(self):
        """Gets the created_at of this ConversationBlock.  # noqa: E501

        This is the ISO 8601 date-time string of when the block was created.  # noqa: E501

        :return: The created_at of this ConversationBlock.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ConversationBlock.

        This is the ISO 8601 date-time string of when the block was created.  # noqa: E501

        :param created_at: The created_at of this ConversationBlock.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ConversationBlock.  # noqa: E501

        This is the ISO 8601 date-time string of when the block was last updated.  # noqa: E501

        :return: The updated_at of this ConversationBlock.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ConversationBlock.

        This is the ISO 8601 date-time string of when the block was last updated.  # noqa: E501

        :param updated_at: The updated_at of this ConversationBlock.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this ConversationBlock.  # noqa: E501

        This is the name of the block. This is just for your reference.  # noqa: E501

        :return: The name of this ConversationBlock.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ConversationBlock.

        This is the name of the block. This is just for your reference.  # noqa: E501

        :param name: The name of this ConversationBlock.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def instruction(self):
        """Gets the instruction of this ConversationBlock.  # noqa: E501

        This is the instruction to the model.  You can reference any variable in the context of the current block execution (step): - \"{{input.your-property-name}}\" for the current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  This can be as simple or as complex as you want it to be. - \"say hello and ask the user about their day!\" - \"collect the user's first and last name\" - \"user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}\"  # noqa: E501

        :return: The instruction of this ConversationBlock.  # noqa: E501
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this ConversationBlock.

        This is the instruction to the model.  You can reference any variable in the context of the current block execution (step): - \"{{input.your-property-name}}\" for the current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  This can be as simple or as complex as you want it to be. - \"say hello and ask the user about their day!\" - \"collect the user's first and last name\" - \"user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}\"  # noqa: E501

        :param instruction: The instruction of this ConversationBlock.  # noqa: E501
        :type: str
        """
        if instruction is None:
            raise ValueError("Invalid value for `instruction`, must not be `None`")  # noqa: E501

        self._instruction = instruction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ConversationBlock, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ConversationBlock):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
