# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Squad(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'members': 'list[SquadMemberDTO]',
        'members_overrides': 'AllOfSquadMembersOverrides',
        'id': 'str',
        'org_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime'
    }

    attribute_map = {
        'name': 'name',
        'members': 'members',
        'members_overrides': 'membersOverrides',
        'id': 'id',
        'org_id': 'orgId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt'
    }

    def __init__(self, name=None, members=None, members_overrides=None, id=None, org_id=None, created_at=None, updated_at=None):  # noqa: E501
        """Squad - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._members = None
        self._members_overrides = None
        self._id = None
        self._org_id = None
        self._created_at = None
        self._updated_at = None
        self.discriminator = None
        if name is not None:
            self.name = name
        self.members = members
        if members_overrides is not None:
            self.members_overrides = members_overrides
        self.id = id
        self.org_id = org_id
        self.created_at = created_at
        self.updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this Squad.  # noqa: E501

        This is the name of the squad.  # noqa: E501

        :return: The name of this Squad.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Squad.

        This is the name of the squad.  # noqa: E501

        :param name: The name of this Squad.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def members(self):
        """Gets the members of this Squad.  # noqa: E501

        This is the list of assistants that make up the squad.  The call will start with the first assistant in the list.  # noqa: E501

        :return: The members of this Squad.  # noqa: E501
        :rtype: list[SquadMemberDTO]
        """
        return self._members

    @members.setter
    def members(self, members):
        """Sets the members of this Squad.

        This is the list of assistants that make up the squad.  The call will start with the first assistant in the list.  # noqa: E501

        :param members: The members of this Squad.  # noqa: E501
        :type: list[SquadMemberDTO]
        """
        if members is None:
            raise ValueError("Invalid value for `members`, must not be `None`")  # noqa: E501

        self._members = members

    @property
    def members_overrides(self):
        """Gets the members_overrides of this Squad.  # noqa: E501

        This can be used to override all the assistants' settings and provide values for their template variables.  Both `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.  # noqa: E501

        :return: The members_overrides of this Squad.  # noqa: E501
        :rtype: AllOfSquadMembersOverrides
        """
        return self._members_overrides

    @members_overrides.setter
    def members_overrides(self, members_overrides):
        """Sets the members_overrides of this Squad.

        This can be used to override all the assistants' settings and provide values for their template variables.  Both `membersOverrides` and `members[n].assistantOverrides` can be used together. First, `members[n].assistantOverrides` is applied. Then, `membersOverrides` is applied as a global override.  # noqa: E501

        :param members_overrides: The members_overrides of this Squad.  # noqa: E501
        :type: AllOfSquadMembersOverrides
        """

        self._members_overrides = members_overrides

    @property
    def id(self):
        """Gets the id of this Squad.  # noqa: E501

        This is the unique identifier for the squad.  # noqa: E501

        :return: The id of this Squad.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Squad.

        This is the unique identifier for the squad.  # noqa: E501

        :param id: The id of this Squad.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this Squad.  # noqa: E501

        This is the unique identifier for the org that this squad belongs to.  # noqa: E501

        :return: The org_id of this Squad.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Squad.

        This is the unique identifier for the org that this squad belongs to.  # noqa: E501

        :param org_id: The org_id of this Squad.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def created_at(self):
        """Gets the created_at of this Squad.  # noqa: E501

        This is the ISO 8601 date-time string of when the squad was created.  # noqa: E501

        :return: The created_at of this Squad.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Squad.

        This is the ISO 8601 date-time string of when the squad was created.  # noqa: E501

        :param created_at: The created_at of this Squad.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this Squad.  # noqa: E501

        This is the ISO 8601 date-time string of when the squad was last updated.  # noqa: E501

        :return: The updated_at of this Squad.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Squad.

        This is the ISO 8601 date-time string of when the squad was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Squad.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Squad, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Squad):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
