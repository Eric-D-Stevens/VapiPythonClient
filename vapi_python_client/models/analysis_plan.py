# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary_prompt': 'str',
        'summary_request_timeout_seconds': 'float',
        'structured_data_request_timeout_seconds': 'float',
        'success_evaluation_prompt': 'str',
        'success_evaluation_rubric': 'str',
        'success_evaluation_request_timeout_seconds': 'float',
        'structured_data_prompt': 'str',
        'structured_data_schema': 'AllOfAnalysisPlanStructuredDataSchema'
    }

    attribute_map = {
        'summary_prompt': 'summaryPrompt',
        'summary_request_timeout_seconds': 'summaryRequestTimeoutSeconds',
        'structured_data_request_timeout_seconds': 'structuredDataRequestTimeoutSeconds',
        'success_evaluation_prompt': 'successEvaluationPrompt',
        'success_evaluation_rubric': 'successEvaluationRubric',
        'success_evaluation_request_timeout_seconds': 'successEvaluationRequestTimeoutSeconds',
        'structured_data_prompt': 'structuredDataPrompt',
        'structured_data_schema': 'structuredDataSchema'
    }

    def __init__(self, summary_prompt=None, summary_request_timeout_seconds=None, structured_data_request_timeout_seconds=None, success_evaluation_prompt=None, success_evaluation_rubric=None, success_evaluation_request_timeout_seconds=None, structured_data_prompt=None, structured_data_schema=None):  # noqa: E501
        """AnalysisPlan - a model defined in Swagger"""  # noqa: E501
        self._summary_prompt = None
        self._summary_request_timeout_seconds = None
        self._structured_data_request_timeout_seconds = None
        self._success_evaluation_prompt = None
        self._success_evaluation_rubric = None
        self._success_evaluation_request_timeout_seconds = None
        self._structured_data_prompt = None
        self._structured_data_schema = None
        self.discriminator = None
        if summary_prompt is not None:
            self.summary_prompt = summary_prompt
        if summary_request_timeout_seconds is not None:
            self.summary_request_timeout_seconds = summary_request_timeout_seconds
        if structured_data_request_timeout_seconds is not None:
            self.structured_data_request_timeout_seconds = structured_data_request_timeout_seconds
        if success_evaluation_prompt is not None:
            self.success_evaluation_prompt = success_evaluation_prompt
        if success_evaluation_rubric is not None:
            self.success_evaluation_rubric = success_evaluation_rubric
        if success_evaluation_request_timeout_seconds is not None:
            self.success_evaluation_request_timeout_seconds = success_evaluation_request_timeout_seconds
        if structured_data_prompt is not None:
            self.structured_data_prompt = structured_data_prompt
        if structured_data_schema is not None:
            self.structured_data_schema = structured_data_schema

    @property
    def summary_prompt(self):
        """Gets the summary_prompt of this AnalysisPlan.  # noqa: E501

        This is the prompt that's used to summarize the call. The output is stored in `call.analysis.summary`.  Default is \"You are an expert note-taker. You will be given a transcript of a call. Summarize the call in 2-3 sentences. DO NOT return anything except the summary.\".  Set to '' or 'off' to disable.  # noqa: E501

        :return: The summary_prompt of this AnalysisPlan.  # noqa: E501
        :rtype: str
        """
        return self._summary_prompt

    @summary_prompt.setter
    def summary_prompt(self, summary_prompt):
        """Sets the summary_prompt of this AnalysisPlan.

        This is the prompt that's used to summarize the call. The output is stored in `call.analysis.summary`.  Default is \"You are an expert note-taker. You will be given a transcript of a call. Summarize the call in 2-3 sentences. DO NOT return anything except the summary.\".  Set to '' or 'off' to disable.  # noqa: E501

        :param summary_prompt: The summary_prompt of this AnalysisPlan.  # noqa: E501
        :type: str
        """

        self._summary_prompt = summary_prompt

    @property
    def summary_request_timeout_seconds(self):
        """Gets the summary_request_timeout_seconds of this AnalysisPlan.  # noqa: E501

        This is how long the request is tried before giving up. When request times out, `call.analysis.summary` will be empty. Increasing this timeout will delay the end of call report.  Default is 5 seconds.  # noqa: E501

        :return: The summary_request_timeout_seconds of this AnalysisPlan.  # noqa: E501
        :rtype: float
        """
        return self._summary_request_timeout_seconds

    @summary_request_timeout_seconds.setter
    def summary_request_timeout_seconds(self, summary_request_timeout_seconds):
        """Sets the summary_request_timeout_seconds of this AnalysisPlan.

        This is how long the request is tried before giving up. When request times out, `call.analysis.summary` will be empty. Increasing this timeout will delay the end of call report.  Default is 5 seconds.  # noqa: E501

        :param summary_request_timeout_seconds: The summary_request_timeout_seconds of this AnalysisPlan.  # noqa: E501
        :type: float
        """

        self._summary_request_timeout_seconds = summary_request_timeout_seconds

    @property
    def structured_data_request_timeout_seconds(self):
        """Gets the structured_data_request_timeout_seconds of this AnalysisPlan.  # noqa: E501

        This is how long the request is tried before giving up. When request times out, `call.analysis.structuredData` will be empty. Increasing this timeout will delay the end of call report.  Default is 5 seconds.  # noqa: E501

        :return: The structured_data_request_timeout_seconds of this AnalysisPlan.  # noqa: E501
        :rtype: float
        """
        return self._structured_data_request_timeout_seconds

    @structured_data_request_timeout_seconds.setter
    def structured_data_request_timeout_seconds(self, structured_data_request_timeout_seconds):
        """Sets the structured_data_request_timeout_seconds of this AnalysisPlan.

        This is how long the request is tried before giving up. When request times out, `call.analysis.structuredData` will be empty. Increasing this timeout will delay the end of call report.  Default is 5 seconds.  # noqa: E501

        :param structured_data_request_timeout_seconds: The structured_data_request_timeout_seconds of this AnalysisPlan.  # noqa: E501
        :type: float
        """

        self._structured_data_request_timeout_seconds = structured_data_request_timeout_seconds

    @property
    def success_evaluation_prompt(self):
        """Gets the success_evaluation_prompt of this AnalysisPlan.  # noqa: E501

        This is the prompt that's used to evaluate if the call was successful. The output is stored in `call.analysis.successEvaluation`.  Default is \"You are an expert call evaluator. You will be given a transcript of a call and the system prompt of the AI participant. Determine if the call was successful based on the objectives inferred from the system prompt. DO NOT return anything except the result.\".  Set to '' or 'off' to disable.  You can use this standalone or in combination with `successEvaluationRubric`. If both are provided, they are concatenated into appropriate instructions.  # noqa: E501

        :return: The success_evaluation_prompt of this AnalysisPlan.  # noqa: E501
        :rtype: str
        """
        return self._success_evaluation_prompt

    @success_evaluation_prompt.setter
    def success_evaluation_prompt(self, success_evaluation_prompt):
        """Sets the success_evaluation_prompt of this AnalysisPlan.

        This is the prompt that's used to evaluate if the call was successful. The output is stored in `call.analysis.successEvaluation`.  Default is \"You are an expert call evaluator. You will be given a transcript of a call and the system prompt of the AI participant. Determine if the call was successful based on the objectives inferred from the system prompt. DO NOT return anything except the result.\".  Set to '' or 'off' to disable.  You can use this standalone or in combination with `successEvaluationRubric`. If both are provided, they are concatenated into appropriate instructions.  # noqa: E501

        :param success_evaluation_prompt: The success_evaluation_prompt of this AnalysisPlan.  # noqa: E501
        :type: str
        """

        self._success_evaluation_prompt = success_evaluation_prompt

    @property
    def success_evaluation_rubric(self):
        """Gets the success_evaluation_rubric of this AnalysisPlan.  # noqa: E501

        This enforces the rubric of the evaluation. The output is stored in `call.analysis.successEvaluation`.  Options include: - 'NumericScale': A scale of 1 to 10. - 'DescriptiveScale': A scale of Excellent, Good, Fair, Poor. - 'Checklist': A checklist of criteria and their status. - 'Matrix': A grid that evaluates multiple criteria across different performance levels. - 'PercentageScale': A scale of 0% to 100%. - 'LikertScale': A scale of Strongly Agree, Agree, Neutral, Disagree, Strongly Disagree. - 'AutomaticRubric': Automatically break down evaluation into several criteria, each with its own score. - 'PassFail': A simple 'true' if call passed, 'false' if not.  For 'Checklist' and 'Matrix', provide the criteria in `successEvaluationPrompt`.  Default is 'PassFail' if `successEvaluationPrompt` is not provided, and null if `successEvaluationPrompt` is provided.  You can use this standalone or in combination with `successEvaluationPrompt`. If both are provided, they are concatenated into appropriate instructions.  # noqa: E501

        :return: The success_evaluation_rubric of this AnalysisPlan.  # noqa: E501
        :rtype: str
        """
        return self._success_evaluation_rubric

    @success_evaluation_rubric.setter
    def success_evaluation_rubric(self, success_evaluation_rubric):
        """Sets the success_evaluation_rubric of this AnalysisPlan.

        This enforces the rubric of the evaluation. The output is stored in `call.analysis.successEvaluation`.  Options include: - 'NumericScale': A scale of 1 to 10. - 'DescriptiveScale': A scale of Excellent, Good, Fair, Poor. - 'Checklist': A checklist of criteria and their status. - 'Matrix': A grid that evaluates multiple criteria across different performance levels. - 'PercentageScale': A scale of 0% to 100%. - 'LikertScale': A scale of Strongly Agree, Agree, Neutral, Disagree, Strongly Disagree. - 'AutomaticRubric': Automatically break down evaluation into several criteria, each with its own score. - 'PassFail': A simple 'true' if call passed, 'false' if not.  For 'Checklist' and 'Matrix', provide the criteria in `successEvaluationPrompt`.  Default is 'PassFail' if `successEvaluationPrompt` is not provided, and null if `successEvaluationPrompt` is provided.  You can use this standalone or in combination with `successEvaluationPrompt`. If both are provided, they are concatenated into appropriate instructions.  # noqa: E501

        :param success_evaluation_rubric: The success_evaluation_rubric of this AnalysisPlan.  # noqa: E501
        :type: str
        """
        allowed_values = ["NumericScale", "DescriptiveScale", "Checklist", "Matrix", "PercentageScale", "LikertScale", "AutomaticRubric", "PassFail"]  # noqa: E501
        if success_evaluation_rubric not in allowed_values:
            raise ValueError(
                "Invalid value for `success_evaluation_rubric` ({0}), must be one of {1}"  # noqa: E501
                .format(success_evaluation_rubric, allowed_values)
            )

        self._success_evaluation_rubric = success_evaluation_rubric

    @property
    def success_evaluation_request_timeout_seconds(self):
        """Gets the success_evaluation_request_timeout_seconds of this AnalysisPlan.  # noqa: E501

        This is how long the request is tried before giving up. When request times out, `call.analysis.successEvaluation` will be empty. Increasing this timeout will delay the end of call report.  Default is 5 seconds.  # noqa: E501

        :return: The success_evaluation_request_timeout_seconds of this AnalysisPlan.  # noqa: E501
        :rtype: float
        """
        return self._success_evaluation_request_timeout_seconds

    @success_evaluation_request_timeout_seconds.setter
    def success_evaluation_request_timeout_seconds(self, success_evaluation_request_timeout_seconds):
        """Sets the success_evaluation_request_timeout_seconds of this AnalysisPlan.

        This is how long the request is tried before giving up. When request times out, `call.analysis.successEvaluation` will be empty. Increasing this timeout will delay the end of call report.  Default is 5 seconds.  # noqa: E501

        :param success_evaluation_request_timeout_seconds: The success_evaluation_request_timeout_seconds of this AnalysisPlan.  # noqa: E501
        :type: float
        """

        self._success_evaluation_request_timeout_seconds = success_evaluation_request_timeout_seconds

    @property
    def structured_data_prompt(self):
        """Gets the structured_data_prompt of this AnalysisPlan.  # noqa: E501

        This is the prompt that's used to extract structured data from the call. The output is stored in `call.analysis.structuredData`.  Disabled by default.  You can use this standalone or in combination with `structuredDataSchema`. If both are provided, they are concatenated into appropriate instructions.  # noqa: E501

        :return: The structured_data_prompt of this AnalysisPlan.  # noqa: E501
        :rtype: str
        """
        return self._structured_data_prompt

    @structured_data_prompt.setter
    def structured_data_prompt(self, structured_data_prompt):
        """Sets the structured_data_prompt of this AnalysisPlan.

        This is the prompt that's used to extract structured data from the call. The output is stored in `call.analysis.structuredData`.  Disabled by default.  You can use this standalone or in combination with `structuredDataSchema`. If both are provided, they are concatenated into appropriate instructions.  # noqa: E501

        :param structured_data_prompt: The structured_data_prompt of this AnalysisPlan.  # noqa: E501
        :type: str
        """

        self._structured_data_prompt = structured_data_prompt

    @property
    def structured_data_schema(self):
        """Gets the structured_data_schema of this AnalysisPlan.  # noqa: E501

        This enforces the schema of the structured data. This output is stored in `call.analysis.structuredData`.  Complete guide on JSON Schema can be found [here](https://ajv.js.org/json-schema.html#json-data-type).  Disabled by default.  You can use this standalone or in combination with `structuredDataPrompt`. If both are provided, they are concatenated into appropriate instructions.  # noqa: E501

        :return: The structured_data_schema of this AnalysisPlan.  # noqa: E501
        :rtype: AllOfAnalysisPlanStructuredDataSchema
        """
        return self._structured_data_schema

    @structured_data_schema.setter
    def structured_data_schema(self, structured_data_schema):
        """Sets the structured_data_schema of this AnalysisPlan.

        This enforces the schema of the structured data. This output is stored in `call.analysis.structuredData`.  Complete guide on JSON Schema can be found [here](https://ajv.js.org/json-schema.html#json-data-type).  Disabled by default.  You can use this standalone or in combination with `structuredDataPrompt`. If both are provided, they are concatenated into appropriate instructions.  # noqa: E501

        :param structured_data_schema: The structured_data_schema of this AnalysisPlan.  # noqa: E501
        :type: AllOfAnalysisPlanStructuredDataSchema
        """

        self._structured_data_schema = structured_data_schema

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
