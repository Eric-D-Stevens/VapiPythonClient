# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsQueryResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'time_range': 'AllOfAnalyticsQueryResultTimeRange',
        'result': 'list[object]'
    }

    attribute_map = {
        'name': 'name',
        'time_range': 'timeRange',
        'result': 'result'
    }

    def __init__(self, name=None, time_range=None, result=None):  # noqa: E501
        """AnalyticsQueryResult - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._time_range = None
        self._result = None
        self.discriminator = None
        self.name = name
        self.time_range = time_range
        self.result = result

    @property
    def name(self):
        """Gets the name of this AnalyticsQueryResult.  # noqa: E501

        This is the unique key for the query.  # noqa: E501

        :return: The name of this AnalyticsQueryResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsQueryResult.

        This is the unique key for the query.  # noqa: E501

        :param name: The name of this AnalyticsQueryResult.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def time_range(self):
        """Gets the time_range of this AnalyticsQueryResult.  # noqa: E501

        This is the time range for the query.  # noqa: E501

        :return: The time_range of this AnalyticsQueryResult.  # noqa: E501
        :rtype: AllOfAnalyticsQueryResultTimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this AnalyticsQueryResult.

        This is the time range for the query.  # noqa: E501

        :param time_range: The time_range of this AnalyticsQueryResult.  # noqa: E501
        :type: AllOfAnalyticsQueryResultTimeRange
        """
        if time_range is None:
            raise ValueError("Invalid value for `time_range`, must not be `None`")  # noqa: E501

        self._time_range = time_range

    @property
    def result(self):
        """Gets the result of this AnalyticsQueryResult.  # noqa: E501

        This is the result of the query, a list of unique groups with result of their aggregations.  Example: \"result\": [   { \"date\": \"2023-01-01\", \"assistantId\": \"123\", \"endedReason\": \"customer-ended-call\", \"sumDuration\": 120, \"avgCost\": 10.5 },   { \"date\": \"2023-01-02\", \"assistantId\": \"123\", \"endedReason\": \"customer-did-not-give-microphone-permission\", \"sumDuration\": 0, \"avgCost\": 0 },   // Additional results ]  # noqa: E501

        :return: The result of this AnalyticsQueryResult.  # noqa: E501
        :rtype: list[object]
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this AnalyticsQueryResult.

        This is the result of the query, a list of unique groups with result of their aggregations.  Example: \"result\": [   { \"date\": \"2023-01-01\", \"assistantId\": \"123\", \"endedReason\": \"customer-ended-call\", \"sumDuration\": 120, \"avgCost\": 10.5 },   { \"date\": \"2023-01-02\", \"assistantId\": \"123\", \"endedReason\": \"customer-did-not-give-microphone-permission\", \"sumDuration\": 0, \"avgCost\": 0 },   // Additional results ]  # noqa: E501

        :param result: The result of this AnalyticsQueryResult.  # noqa: E501
        :type: list[object]
        """
        if result is None:
            raise ValueError("Invalid value for `result`, must not be `None`")  # noqa: E501

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsQueryResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsQueryResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
