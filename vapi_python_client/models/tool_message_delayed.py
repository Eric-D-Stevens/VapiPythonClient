# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ToolMessageDelayed(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'timing_milliseconds': 'float',
        'content': 'str',
        'conditions': 'list[Condition]'
    }

    attribute_map = {
        'type': 'type',
        'timing_milliseconds': 'timingMilliseconds',
        'content': 'content',
        'conditions': 'conditions'
    }

    def __init__(self, type=None, timing_milliseconds=None, content=None, conditions=None):  # noqa: E501
        """ToolMessageDelayed - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._timing_milliseconds = None
        self._content = None
        self._conditions = None
        self.discriminator = None
        self.type = type
        if timing_milliseconds is not None:
            self.timing_milliseconds = timing_milliseconds
        self.content = content
        if conditions is not None:
            self.conditions = conditions

    @property
    def type(self):
        """Gets the type of this ToolMessageDelayed.  # noqa: E501

        This message is triggered when the tool call is delayed.  There are the two things that can trigger this message: 1. The user talks with the assistant while your server is processing the request. Default is \"Sorry, a few more seconds.\" 2. The server doesn't respond within `timingMilliseconds`.  This message is never triggered for async tool calls.  # noqa: E501

        :return: The type of this ToolMessageDelayed.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ToolMessageDelayed.

        This message is triggered when the tool call is delayed.  There are the two things that can trigger this message: 1. The user talks with the assistant while your server is processing the request. Default is \"Sorry, a few more seconds.\" 2. The server doesn't respond within `timingMilliseconds`.  This message is never triggered for async tool calls.  # noqa: E501

        :param type: The type of this ToolMessageDelayed.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["request-response-delayed"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def timing_milliseconds(self):
        """Gets the timing_milliseconds of this ToolMessageDelayed.  # noqa: E501

        The number of milliseconds to wait for the server response before saying this message.  # noqa: E501

        :return: The timing_milliseconds of this ToolMessageDelayed.  # noqa: E501
        :rtype: float
        """
        return self._timing_milliseconds

    @timing_milliseconds.setter
    def timing_milliseconds(self, timing_milliseconds):
        """Sets the timing_milliseconds of this ToolMessageDelayed.

        The number of milliseconds to wait for the server response before saying this message.  # noqa: E501

        :param timing_milliseconds: The timing_milliseconds of this ToolMessageDelayed.  # noqa: E501
        :type: float
        """

        self._timing_milliseconds = timing_milliseconds

    @property
    def content(self):
        """Gets the content of this ToolMessageDelayed.  # noqa: E501

        This is the content that the assistant says when this message is triggered.  # noqa: E501

        :return: The content of this ToolMessageDelayed.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ToolMessageDelayed.

        This is the content that the assistant says when this message is triggered.  # noqa: E501

        :param content: The content of this ToolMessageDelayed.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def conditions(self):
        """Gets the conditions of this ToolMessageDelayed.  # noqa: E501

        This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.  # noqa: E501

        :return: The conditions of this ToolMessageDelayed.  # noqa: E501
        :rtype: list[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ToolMessageDelayed.

        This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.  # noqa: E501

        :param conditions: The conditions of this ToolMessageDelayed.  # noqa: E501
        :type: list[Condition]
        """

        self._conditions = conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToolMessageDelayed, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolMessageDelayed):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
