# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArtifactPlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'video_recording_enabled': 'bool',
        'recording_s3_path_prefix': 'str'
    }

    attribute_map = {
        'video_recording_enabled': 'videoRecordingEnabled',
        'recording_s3_path_prefix': 'recordingS3PathPrefix'
    }

    def __init__(self, video_recording_enabled=None, recording_s3_path_prefix=None):  # noqa: E501
        """ArtifactPlan - a model defined in Swagger"""  # noqa: E501
        self._video_recording_enabled = None
        self._recording_s3_path_prefix = None
        self.discriminator = None
        if video_recording_enabled is not None:
            self.video_recording_enabled = video_recording_enabled
        if recording_s3_path_prefix is not None:
            self.recording_s3_path_prefix = recording_s3_path_prefix

    @property
    def video_recording_enabled(self):
        """Gets the video_recording_enabled of this ArtifactPlan.  # noqa: E501

        This determines whether the video is recorded during the call. Default is false. Only relevant for `webCall` type.  # noqa: E501

        :return: The video_recording_enabled of this ArtifactPlan.  # noqa: E501
        :rtype: bool
        """
        return self._video_recording_enabled

    @video_recording_enabled.setter
    def video_recording_enabled(self, video_recording_enabled):
        """Sets the video_recording_enabled of this ArtifactPlan.

        This determines whether the video is recorded during the call. Default is false. Only relevant for `webCall` type.  # noqa: E501

        :param video_recording_enabled: The video_recording_enabled of this ArtifactPlan.  # noqa: E501
        :type: bool
        """

        self._video_recording_enabled = video_recording_enabled

    @property
    def recording_s3_path_prefix(self):
        """Gets the recording_s3_path_prefix of this ArtifactPlan.  # noqa: E501

        This is the S3 path prefix for the audio recording. This is only used if you have provided S3 credentials. Check the Providers page in the Dashboard.  If credential.s3PathPrefix is set, this will append to it.  Example: `/my-prefix`. Default is `/`.  # noqa: E501

        :return: The recording_s3_path_prefix of this ArtifactPlan.  # noqa: E501
        :rtype: str
        """
        return self._recording_s3_path_prefix

    @recording_s3_path_prefix.setter
    def recording_s3_path_prefix(self, recording_s3_path_prefix):
        """Sets the recording_s3_path_prefix of this ArtifactPlan.

        This is the S3 path prefix for the audio recording. This is only used if you have provided S3 credentials. Check the Providers page in the Dashboard.  If credential.s3PathPrefix is set, this will append to it.  Example: `/my-prefix`. Default is `/`.  # noqa: E501

        :param recording_s3_path_prefix: The recording_s3_path_prefix of this ArtifactPlan.  # noqa: E501
        :type: str
        """

        self._recording_s3_path_prefix = recording_s3_path_prefix

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArtifactPlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArtifactPlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
