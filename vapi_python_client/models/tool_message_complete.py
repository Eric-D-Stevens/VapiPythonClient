# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ToolMessageComplete(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'role': 'str',
        'end_call_after_spoken_enabled': 'bool',
        'content': 'str',
        'conditions': 'list[Condition]'
    }

    attribute_map = {
        'type': 'type',
        'role': 'role',
        'end_call_after_spoken_enabled': 'endCallAfterSpokenEnabled',
        'content': 'content',
        'conditions': 'conditions'
    }

    def __init__(self, type=None, role=None, end_call_after_spoken_enabled=None, content=None, conditions=None):  # noqa: E501
        """ToolMessageComplete - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._role = None
        self._end_call_after_spoken_enabled = None
        self._content = None
        self._conditions = None
        self.discriminator = None
        self.type = type
        if role is not None:
            self.role = role
        if end_call_after_spoken_enabled is not None:
            self.end_call_after_spoken_enabled = end_call_after_spoken_enabled
        self.content = content
        if conditions is not None:
            self.conditions = conditions

    @property
    def type(self):
        """Gets the type of this ToolMessageComplete.  # noqa: E501

        This message is triggered when the tool call is complete.  This message is triggered immediately without waiting for your server to respond for async tool calls.  If this message is not provided, the model will be requested to respond.  If this message is provided, only this message will be spoken and the model will not be requested to come up with a response. It's an exclusive OR.  # noqa: E501

        :return: The type of this ToolMessageComplete.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ToolMessageComplete.

        This message is triggered when the tool call is complete.  This message is triggered immediately without waiting for your server to respond for async tool calls.  If this message is not provided, the model will be requested to respond.  If this message is provided, only this message will be spoken and the model will not be requested to come up with a response. It's an exclusive OR.  # noqa: E501

        :param type: The type of this ToolMessageComplete.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["request-complete"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def role(self):
        """Gets the role of this ToolMessageComplete.  # noqa: E501

        This is optional and defaults to \"assistant\".  When role=assistant, `content` is said out loud.  When role=system, `content` is passed to the model in a system message. Example:     system: default one     assistant:     user:     assistant:     user:     assistant:     user:     assistant: tool called     tool: your server response     <--- system prompt as hint     ---> model generates response which is spoken This is useful when you want to provide a hint to the model about what to say next.  # noqa: E501

        :return: The role of this ToolMessageComplete.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ToolMessageComplete.

        This is optional and defaults to \"assistant\".  When role=assistant, `content` is said out loud.  When role=system, `content` is passed to the model in a system message. Example:     system: default one     assistant:     user:     assistant:     user:     assistant:     user:     assistant: tool called     tool: your server response     <--- system prompt as hint     ---> model generates response which is spoken This is useful when you want to provide a hint to the model about what to say next.  # noqa: E501

        :param role: The role of this ToolMessageComplete.  # noqa: E501
        :type: str
        """
        allowed_values = ["assistant", "system"]  # noqa: E501
        if role not in allowed_values:
            raise ValueError(
                "Invalid value for `role` ({0}), must be one of {1}"  # noqa: E501
                .format(role, allowed_values)
            )

        self._role = role

    @property
    def end_call_after_spoken_enabled(self):
        """Gets the end_call_after_spoken_enabled of this ToolMessageComplete.  # noqa: E501

        This is an optional boolean that if true, the call will end after the message is spoken. Default is false.  This is ignored if `role` is set to `system`.  @default false  # noqa: E501

        :return: The end_call_after_spoken_enabled of this ToolMessageComplete.  # noqa: E501
        :rtype: bool
        """
        return self._end_call_after_spoken_enabled

    @end_call_after_spoken_enabled.setter
    def end_call_after_spoken_enabled(self, end_call_after_spoken_enabled):
        """Sets the end_call_after_spoken_enabled of this ToolMessageComplete.

        This is an optional boolean that if true, the call will end after the message is spoken. Default is false.  This is ignored if `role` is set to `system`.  @default false  # noqa: E501

        :param end_call_after_spoken_enabled: The end_call_after_spoken_enabled of this ToolMessageComplete.  # noqa: E501
        :type: bool
        """

        self._end_call_after_spoken_enabled = end_call_after_spoken_enabled

    @property
    def content(self):
        """Gets the content of this ToolMessageComplete.  # noqa: E501

        This is the content that the assistant says when this message is triggered.  # noqa: E501

        :return: The content of this ToolMessageComplete.  # noqa: E501
        :rtype: str
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this ToolMessageComplete.

        This is the content that the assistant says when this message is triggered.  # noqa: E501

        :param content: The content of this ToolMessageComplete.  # noqa: E501
        :type: str
        """
        if content is None:
            raise ValueError("Invalid value for `content`, must not be `None`")  # noqa: E501

        self._content = content

    @property
    def conditions(self):
        """Gets the conditions of this ToolMessageComplete.  # noqa: E501

        This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.  # noqa: E501

        :return: The conditions of this ToolMessageComplete.  # noqa: E501
        :rtype: list[Condition]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this ToolMessageComplete.

        This is an optional array of conditions that the tool call arguments must meet in order for this message to be triggered.  # noqa: E501

        :param conditions: The conditions of this ToolMessageComplete.  # noqa: E501
        :type: list[Condition]
        """

        self._conditions = conditions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToolMessageComplete, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolMessageComplete):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
