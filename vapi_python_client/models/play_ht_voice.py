# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PlayHTVoice(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'input_preprocessing_enabled': 'bool',
        'input_reformatting_enabled': 'bool',
        'input_min_characters': 'float',
        'input_punctuation_boundaries': 'list[str]',
        'filler_injection_enabled': 'bool',
        'provider': 'str',
        'voice_id': 'OneOfPlayHTVoiceVoiceId',
        'speed': 'float',
        'temperature': 'float',
        'emotion': 'str',
        'voice_guidance': 'float',
        'style_guidance': 'float',
        'text_guidance': 'float'
    }

    attribute_map = {
        'input_preprocessing_enabled': 'inputPreprocessingEnabled',
        'input_reformatting_enabled': 'inputReformattingEnabled',
        'input_min_characters': 'inputMinCharacters',
        'input_punctuation_boundaries': 'inputPunctuationBoundaries',
        'filler_injection_enabled': 'fillerInjectionEnabled',
        'provider': 'provider',
        'voice_id': 'voiceId',
        'speed': 'speed',
        'temperature': 'temperature',
        'emotion': 'emotion',
        'voice_guidance': 'voiceGuidance',
        'style_guidance': 'styleGuidance',
        'text_guidance': 'textGuidance'
    }

    def __init__(self, input_preprocessing_enabled=None, input_reformatting_enabled=None, input_min_characters=None, input_punctuation_boundaries=None, filler_injection_enabled=None, provider=None, voice_id=None, speed=None, temperature=None, emotion=None, voice_guidance=None, style_guidance=None, text_guidance=None):  # noqa: E501
        """PlayHTVoice - a model defined in Swagger"""  # noqa: E501
        self._input_preprocessing_enabled = None
        self._input_reformatting_enabled = None
        self._input_min_characters = None
        self._input_punctuation_boundaries = None
        self._filler_injection_enabled = None
        self._provider = None
        self._voice_id = None
        self._speed = None
        self._temperature = None
        self._emotion = None
        self._voice_guidance = None
        self._style_guidance = None
        self._text_guidance = None
        self.discriminator = None
        if input_preprocessing_enabled is not None:
            self.input_preprocessing_enabled = input_preprocessing_enabled
        if input_reformatting_enabled is not None:
            self.input_reformatting_enabled = input_reformatting_enabled
        if input_min_characters is not None:
            self.input_min_characters = input_min_characters
        if input_punctuation_boundaries is not None:
            self.input_punctuation_boundaries = input_punctuation_boundaries
        if filler_injection_enabled is not None:
            self.filler_injection_enabled = filler_injection_enabled
        self.provider = provider
        self.voice_id = voice_id
        if speed is not None:
            self.speed = speed
        if temperature is not None:
            self.temperature = temperature
        if emotion is not None:
            self.emotion = emotion
        if voice_guidance is not None:
            self.voice_guidance = voice_guidance
        if style_guidance is not None:
            self.style_guidance = style_guidance
        if text_guidance is not None:
            self.text_guidance = text_guidance

    @property
    def input_preprocessing_enabled(self):
        """Gets the input_preprocessing_enabled of this PlayHTVoice.  # noqa: E501

        This determines whether the model output is preprocessed into chunks before being sent to the voice provider.  Default `true` because voice generation sounds better with chunking (and reformatting them).  To send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.  If disabled, vapi-provided audio control tokens like <flush /> will not work.  # noqa: E501

        :return: The input_preprocessing_enabled of this PlayHTVoice.  # noqa: E501
        :rtype: bool
        """
        return self._input_preprocessing_enabled

    @input_preprocessing_enabled.setter
    def input_preprocessing_enabled(self, input_preprocessing_enabled):
        """Sets the input_preprocessing_enabled of this PlayHTVoice.

        This determines whether the model output is preprocessed into chunks before being sent to the voice provider.  Default `true` because voice generation sounds better with chunking (and reformatting them).  To send every token from the model output directly to the voice provider and rely on the voice provider's audio generation logic, set this to `false`.  If disabled, vapi-provided audio control tokens like <flush /> will not work.  # noqa: E501

        :param input_preprocessing_enabled: The input_preprocessing_enabled of this PlayHTVoice.  # noqa: E501
        :type: bool
        """

        self._input_preprocessing_enabled = input_preprocessing_enabled

    @property
    def input_reformatting_enabled(self):
        """Gets the input_reformatting_enabled of this PlayHTVoice.  # noqa: E501

        This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.  Default `true` because voice generation sounds better with reformatting.  To disable chunk reformatting, set this to `false`.  To disable chunking completely, set `inputPreprocessingEnabled` to `false`.  # noqa: E501

        :return: The input_reformatting_enabled of this PlayHTVoice.  # noqa: E501
        :rtype: bool
        """
        return self._input_reformatting_enabled

    @input_reformatting_enabled.setter
    def input_reformatting_enabled(self, input_reformatting_enabled):
        """Sets the input_reformatting_enabled of this PlayHTVoice.

        This determines whether the chunk is reformatted before being sent to the voice provider. Many things are reformatted including phone numbers, emails and addresses to improve their enunciation.  Default `true` because voice generation sounds better with reformatting.  To disable chunk reformatting, set this to `false`.  To disable chunking completely, set `inputPreprocessingEnabled` to `false`.  # noqa: E501

        :param input_reformatting_enabled: The input_reformatting_enabled of this PlayHTVoice.  # noqa: E501
        :type: bool
        """

        self._input_reformatting_enabled = input_reformatting_enabled

    @property
    def input_min_characters(self):
        """Gets the input_min_characters of this PlayHTVoice.  # noqa: E501

        This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.  Increasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.  Decreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.  # noqa: E501

        :return: The input_min_characters of this PlayHTVoice.  # noqa: E501
        :rtype: float
        """
        return self._input_min_characters

    @input_min_characters.setter
    def input_min_characters(self, input_min_characters):
        """Sets the input_min_characters of this PlayHTVoice.

        This is the minimum number of characters before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults to 30.  Increasing this value might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, increasing might be a good idea if you want to give voice provider bigger chunks so it can pronounce them better.  Decreasing this value might decrease latency but might also decrease quality if the voice provider struggles to pronounce the text correctly.  # noqa: E501

        :param input_min_characters: The input_min_characters of this PlayHTVoice.  # noqa: E501
        :type: float
        """

        self._input_min_characters = input_min_characters

    @property
    def input_punctuation_boundaries(self):
        """Gets the input_punctuation_boundaries of this PlayHTVoice.  # noqa: E501

        These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.  Constraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].  # noqa: E501

        :return: The input_punctuation_boundaries of this PlayHTVoice.  # noqa: E501
        :rtype: list[str]
        """
        return self._input_punctuation_boundaries

    @input_punctuation_boundaries.setter
    def input_punctuation_boundaries(self, input_punctuation_boundaries):
        """Sets the input_punctuation_boundaries of this PlayHTVoice.

        These are the punctuations that are considered valid boundaries before a chunk is created. The chunks that are sent to the voice provider for the voice generation as the model tokens are streaming in. Defaults are chosen differently for each provider.  Constraining the delimiters might add latency as it waits for the model to output a full chunk before sending it to the voice provider. On the other hand, constraining might be a good idea if you want to give voice provider longer chunks so it can sound less disjointed across chunks. Eg. ['.'].  # noqa: E501

        :param input_punctuation_boundaries: The input_punctuation_boundaries of this PlayHTVoice.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["。", "，", ".", "!", "?", ";", ")", "،", "۔", "।", "॥", "|", "||", ",", ":"]  # noqa: E501
        if not set(input_punctuation_boundaries).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `input_punctuation_boundaries` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(input_punctuation_boundaries) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._input_punctuation_boundaries = input_punctuation_boundaries

    @property
    def filler_injection_enabled(self):
        """Gets the filler_injection_enabled of this PlayHTVoice.  # noqa: E501

        This determines whether fillers are injected into the model output before inputting it into the voice provider.  Default `false` because you can achieve better results with prompting the model.  # noqa: E501

        :return: The filler_injection_enabled of this PlayHTVoice.  # noqa: E501
        :rtype: bool
        """
        return self._filler_injection_enabled

    @filler_injection_enabled.setter
    def filler_injection_enabled(self, filler_injection_enabled):
        """Sets the filler_injection_enabled of this PlayHTVoice.

        This determines whether fillers are injected into the model output before inputting it into the voice provider.  Default `false` because you can achieve better results with prompting the model.  # noqa: E501

        :param filler_injection_enabled: The filler_injection_enabled of this PlayHTVoice.  # noqa: E501
        :type: bool
        """

        self._filler_injection_enabled = filler_injection_enabled

    @property
    def provider(self):
        """Gets the provider of this PlayHTVoice.  # noqa: E501

        This is the voice provider that will be used.  # noqa: E501

        :return: The provider of this PlayHTVoice.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this PlayHTVoice.

        This is the voice provider that will be used.  # noqa: E501

        :param provider: The provider of this PlayHTVoice.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["playht"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def voice_id(self):
        """Gets the voice_id of this PlayHTVoice.  # noqa: E501

        This is the provider-specific ID that will be used.  # noqa: E501

        :return: The voice_id of this PlayHTVoice.  # noqa: E501
        :rtype: OneOfPlayHTVoiceVoiceId
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this PlayHTVoice.

        This is the provider-specific ID that will be used.  # noqa: E501

        :param voice_id: The voice_id of this PlayHTVoice.  # noqa: E501
        :type: OneOfPlayHTVoiceVoiceId
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")  # noqa: E501

        self._voice_id = voice_id

    @property
    def speed(self):
        """Gets the speed of this PlayHTVoice.  # noqa: E501

        This is the speed multiplier that will be used.  # noqa: E501

        :return: The speed of this PlayHTVoice.  # noqa: E501
        :rtype: float
        """
        return self._speed

    @speed.setter
    def speed(self, speed):
        """Sets the speed of this PlayHTVoice.

        This is the speed multiplier that will be used.  # noqa: E501

        :param speed: The speed of this PlayHTVoice.  # noqa: E501
        :type: float
        """

        self._speed = speed

    @property
    def temperature(self):
        """Gets the temperature of this PlayHTVoice.  # noqa: E501

        A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice.  # noqa: E501

        :return: The temperature of this PlayHTVoice.  # noqa: E501
        :rtype: float
        """
        return self._temperature

    @temperature.setter
    def temperature(self, temperature):
        """Sets the temperature of this PlayHTVoice.

        A floating point number between 0, exclusive, and 2, inclusive. If equal to null or not provided, the model's default temperature will be used. The temperature parameter controls variance. Lower temperatures result in more predictable results, higher temperatures allow each run to vary more, so the voice may sound less like the baseline voice.  # noqa: E501

        :param temperature: The temperature of this PlayHTVoice.  # noqa: E501
        :type: float
        """

        self._temperature = temperature

    @property
    def emotion(self):
        """Gets the emotion of this PlayHTVoice.  # noqa: E501

        An emotion to be applied to the speech.  # noqa: E501

        :return: The emotion of this PlayHTVoice.  # noqa: E501
        :rtype: str
        """
        return self._emotion

    @emotion.setter
    def emotion(self, emotion):
        """Sets the emotion of this PlayHTVoice.

        An emotion to be applied to the speech.  # noqa: E501

        :param emotion: The emotion of this PlayHTVoice.  # noqa: E501
        :type: str
        """
        allowed_values = ["female_happy", "female_sad", "female_angry", "female_fearful", "female_disgust", "female_surprised", "male_happy", "male_sad", "male_angry", "male_fearful", "male_disgust", "male_surprised"]  # noqa: E501
        if emotion not in allowed_values:
            raise ValueError(
                "Invalid value for `emotion` ({0}), must be one of {1}"  # noqa: E501
                .format(emotion, allowed_values)
            )

        self._emotion = emotion

    @property
    def voice_guidance(self):
        """Gets the voice_guidance of this PlayHTVoice.  # noqa: E501

        A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices.  # noqa: E501

        :return: The voice_guidance of this PlayHTVoice.  # noqa: E501
        :rtype: float
        """
        return self._voice_guidance

    @voice_guidance.setter
    def voice_guidance(self, voice_guidance):
        """Sets the voice_guidance of this PlayHTVoice.

        A number between 1 and 6. Use lower numbers to reduce how unique your chosen voice will be compared to other voices.  # noqa: E501

        :param voice_guidance: The voice_guidance of this PlayHTVoice.  # noqa: E501
        :type: float
        """

        self._voice_guidance = voice_guidance

    @property
    def style_guidance(self):
        """Gets the style_guidance of this PlayHTVoice.  # noqa: E501

        A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance.  # noqa: E501

        :return: The style_guidance of this PlayHTVoice.  # noqa: E501
        :rtype: float
        """
        return self._style_guidance

    @style_guidance.setter
    def style_guidance(self, style_guidance):
        """Sets the style_guidance of this PlayHTVoice.

        A number between 1 and 30. Use lower numbers to to reduce how strong your chosen emotion will be. Higher numbers will create a very emotional performance.  # noqa: E501

        :param style_guidance: The style_guidance of this PlayHTVoice.  # noqa: E501
        :type: float
        """

        self._style_guidance = style_guidance

    @property
    def text_guidance(self):
        """Gets the text_guidance of this PlayHTVoice.  # noqa: E501

        A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text.  # noqa: E501

        :return: The text_guidance of this PlayHTVoice.  # noqa: E501
        :rtype: float
        """
        return self._text_guidance

    @text_guidance.setter
    def text_guidance(self, text_guidance):
        """Sets the text_guidance of this PlayHTVoice.

        A number between 1 and 2. This number influences how closely the generated speech adheres to the input text. Use lower values to create more fluid speech, but with a higher chance of deviating from the input text. Higher numbers will make the generated speech more accurate to the input text, ensuring that the words spoken align closely with the provided text.  # noqa: E501

        :param text_guidance: The text_guidance of this PlayHTVoice.  # noqa: E501
        :type: float
        """

        self._text_guidance = text_guidance

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PlayHTVoice, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PlayHTVoice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
