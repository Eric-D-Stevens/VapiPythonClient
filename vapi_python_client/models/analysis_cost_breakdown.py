# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalysisCostBreakdown(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'summary': 'float',
        'summary_prompt_tokens': 'float',
        'summary_completion_tokens': 'float',
        'structured_data': 'float',
        'structured_data_prompt_tokens': 'float',
        'structured_data_completion_tokens': 'float',
        'success_evaluation': 'float',
        'success_evaluation_prompt_tokens': 'float',
        'success_evaluation_completion_tokens': 'float'
    }

    attribute_map = {
        'summary': 'summary',
        'summary_prompt_tokens': 'summaryPromptTokens',
        'summary_completion_tokens': 'summaryCompletionTokens',
        'structured_data': 'structuredData',
        'structured_data_prompt_tokens': 'structuredDataPromptTokens',
        'structured_data_completion_tokens': 'structuredDataCompletionTokens',
        'success_evaluation': 'successEvaluation',
        'success_evaluation_prompt_tokens': 'successEvaluationPromptTokens',
        'success_evaluation_completion_tokens': 'successEvaluationCompletionTokens'
    }

    def __init__(self, summary=None, summary_prompt_tokens=None, summary_completion_tokens=None, structured_data=None, structured_data_prompt_tokens=None, structured_data_completion_tokens=None, success_evaluation=None, success_evaluation_prompt_tokens=None, success_evaluation_completion_tokens=None):  # noqa: E501
        """AnalysisCostBreakdown - a model defined in Swagger"""  # noqa: E501
        self._summary = None
        self._summary_prompt_tokens = None
        self._summary_completion_tokens = None
        self._structured_data = None
        self._structured_data_prompt_tokens = None
        self._structured_data_completion_tokens = None
        self._success_evaluation = None
        self._success_evaluation_prompt_tokens = None
        self._success_evaluation_completion_tokens = None
        self.discriminator = None
        if summary is not None:
            self.summary = summary
        if summary_prompt_tokens is not None:
            self.summary_prompt_tokens = summary_prompt_tokens
        if summary_completion_tokens is not None:
            self.summary_completion_tokens = summary_completion_tokens
        if structured_data is not None:
            self.structured_data = structured_data
        if structured_data_prompt_tokens is not None:
            self.structured_data_prompt_tokens = structured_data_prompt_tokens
        if structured_data_completion_tokens is not None:
            self.structured_data_completion_tokens = structured_data_completion_tokens
        if success_evaluation is not None:
            self.success_evaluation = success_evaluation
        if success_evaluation_prompt_tokens is not None:
            self.success_evaluation_prompt_tokens = success_evaluation_prompt_tokens
        if success_evaluation_completion_tokens is not None:
            self.success_evaluation_completion_tokens = success_evaluation_completion_tokens

    @property
    def summary(self):
        """Gets the summary of this AnalysisCostBreakdown.  # noqa: E501

        This is the cost to summarize the call.  # noqa: E501

        :return: The summary of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._summary

    @summary.setter
    def summary(self, summary):
        """Sets the summary of this AnalysisCostBreakdown.

        This is the cost to summarize the call.  # noqa: E501

        :param summary: The summary of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._summary = summary

    @property
    def summary_prompt_tokens(self):
        """Gets the summary_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501

        This is the number of prompt tokens used to summarize the call.  # noqa: E501

        :return: The summary_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._summary_prompt_tokens

    @summary_prompt_tokens.setter
    def summary_prompt_tokens(self, summary_prompt_tokens):
        """Sets the summary_prompt_tokens of this AnalysisCostBreakdown.

        This is the number of prompt tokens used to summarize the call.  # noqa: E501

        :param summary_prompt_tokens: The summary_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._summary_prompt_tokens = summary_prompt_tokens

    @property
    def summary_completion_tokens(self):
        """Gets the summary_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501

        This is the number of completion tokens used to summarize the call.  # noqa: E501

        :return: The summary_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._summary_completion_tokens

    @summary_completion_tokens.setter
    def summary_completion_tokens(self, summary_completion_tokens):
        """Sets the summary_completion_tokens of this AnalysisCostBreakdown.

        This is the number of completion tokens used to summarize the call.  # noqa: E501

        :param summary_completion_tokens: The summary_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._summary_completion_tokens = summary_completion_tokens

    @property
    def structured_data(self):
        """Gets the structured_data of this AnalysisCostBreakdown.  # noqa: E501

        This is the cost to extract structured data from the call.  # noqa: E501

        :return: The structured_data of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._structured_data

    @structured_data.setter
    def structured_data(self, structured_data):
        """Sets the structured_data of this AnalysisCostBreakdown.

        This is the cost to extract structured data from the call.  # noqa: E501

        :param structured_data: The structured_data of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._structured_data = structured_data

    @property
    def structured_data_prompt_tokens(self):
        """Gets the structured_data_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501

        This is the number of prompt tokens used to extract structured data from the call.  # noqa: E501

        :return: The structured_data_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._structured_data_prompt_tokens

    @structured_data_prompt_tokens.setter
    def structured_data_prompt_tokens(self, structured_data_prompt_tokens):
        """Sets the structured_data_prompt_tokens of this AnalysisCostBreakdown.

        This is the number of prompt tokens used to extract structured data from the call.  # noqa: E501

        :param structured_data_prompt_tokens: The structured_data_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._structured_data_prompt_tokens = structured_data_prompt_tokens

    @property
    def structured_data_completion_tokens(self):
        """Gets the structured_data_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501

        This is the number of completion tokens used to extract structured data from the call.  # noqa: E501

        :return: The structured_data_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._structured_data_completion_tokens

    @structured_data_completion_tokens.setter
    def structured_data_completion_tokens(self, structured_data_completion_tokens):
        """Sets the structured_data_completion_tokens of this AnalysisCostBreakdown.

        This is the number of completion tokens used to extract structured data from the call.  # noqa: E501

        :param structured_data_completion_tokens: The structured_data_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._structured_data_completion_tokens = structured_data_completion_tokens

    @property
    def success_evaluation(self):
        """Gets the success_evaluation of this AnalysisCostBreakdown.  # noqa: E501

        This is the cost to evaluate if the call was successful.  # noqa: E501

        :return: The success_evaluation of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._success_evaluation

    @success_evaluation.setter
    def success_evaluation(self, success_evaluation):
        """Sets the success_evaluation of this AnalysisCostBreakdown.

        This is the cost to evaluate if the call was successful.  # noqa: E501

        :param success_evaluation: The success_evaluation of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._success_evaluation = success_evaluation

    @property
    def success_evaluation_prompt_tokens(self):
        """Gets the success_evaluation_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501

        This is the number of prompt tokens used to evaluate if the call was successful.  # noqa: E501

        :return: The success_evaluation_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._success_evaluation_prompt_tokens

    @success_evaluation_prompt_tokens.setter
    def success_evaluation_prompt_tokens(self, success_evaluation_prompt_tokens):
        """Sets the success_evaluation_prompt_tokens of this AnalysisCostBreakdown.

        This is the number of prompt tokens used to evaluate if the call was successful.  # noqa: E501

        :param success_evaluation_prompt_tokens: The success_evaluation_prompt_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._success_evaluation_prompt_tokens = success_evaluation_prompt_tokens

    @property
    def success_evaluation_completion_tokens(self):
        """Gets the success_evaluation_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501

        This is the number of completion tokens used to evaluate if the call was successful.  # noqa: E501

        :return: The success_evaluation_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :rtype: float
        """
        return self._success_evaluation_completion_tokens

    @success_evaluation_completion_tokens.setter
    def success_evaluation_completion_tokens(self, success_evaluation_completion_tokens):
        """Sets the success_evaluation_completion_tokens of this AnalysisCostBreakdown.

        This is the number of completion tokens used to evaluate if the call was successful.  # noqa: E501

        :param success_evaluation_completion_tokens: The success_evaluation_completion_tokens of this AnalysisCostBreakdown.  # noqa: E501
        :type: float
        """

        self._success_evaluation_completion_tokens = success_evaluation_completion_tokens

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalysisCostBreakdown, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalysisCostBreakdown):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
