# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ServerMessageResponseAssistantRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'destination': 'OneOfServerMessageResponseAssistantRequestDestination',
        'assistant_id': 'str',
        'assistant': 'AllOfServerMessageResponseAssistantRequestAssistant',
        'assistant_overrides': 'AllOfServerMessageResponseAssistantRequestAssistantOverrides',
        'squad_id': 'str',
        'squad': 'AllOfServerMessageResponseAssistantRequestSquad',
        'error': 'str'
    }

    attribute_map = {
        'destination': 'destination',
        'assistant_id': 'assistantId',
        'assistant': 'assistant',
        'assistant_overrides': 'assistantOverrides',
        'squad_id': 'squadId',
        'squad': 'squad',
        'error': 'error'
    }

    def __init__(self, destination=None, assistant_id=None, assistant=None, assistant_overrides=None, squad_id=None, squad=None, error=None):  # noqa: E501
        """ServerMessageResponseAssistantRequest - a model defined in Swagger"""  # noqa: E501
        self._destination = None
        self._assistant_id = None
        self._assistant = None
        self._assistant_overrides = None
        self._squad_id = None
        self._squad = None
        self._error = None
        self.discriminator = None
        if destination is not None:
            self.destination = destination
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if assistant is not None:
            self.assistant = assistant
        if assistant_overrides is not None:
            self.assistant_overrides = assistant_overrides
        if squad_id is not None:
            self.squad_id = squad_id
        if squad is not None:
            self.squad = squad
        if error is not None:
            self.error = error

    @property
    def destination(self):
        """Gets the destination of this ServerMessageResponseAssistantRequest.  # noqa: E501

        This is the destination to transfer the inbound call to. This will immediately transfer without using any assistants.  If this is sent, `assistantId`, `assistant`, `squadId`, and `squad` are ignored.  # noqa: E501

        :return: The destination of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :rtype: OneOfServerMessageResponseAssistantRequestDestination
        """
        return self._destination

    @destination.setter
    def destination(self, destination):
        """Sets the destination of this ServerMessageResponseAssistantRequest.

        This is the destination to transfer the inbound call to. This will immediately transfer without using any assistants.  If this is sent, `assistantId`, `assistant`, `squadId`, and `squad` are ignored.  # noqa: E501

        :param destination: The destination of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :type: OneOfServerMessageResponseAssistantRequestDestination
        """

        self._destination = destination

    @property
    def assistant_id(self):
        """Gets the assistant_id of this ServerMessageResponseAssistantRequest.  # noqa: E501

        This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.  # noqa: E501

        :return: The assistant_id of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this ServerMessageResponseAssistantRequest.

        This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.  # noqa: E501

        :param assistant_id: The assistant_id of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def assistant(self):
        """Gets the assistant of this ServerMessageResponseAssistantRequest.  # noqa: E501

        This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.  If you're unsure why you're getting an invalid assistant, try logging your response and send the JSON blob to POST /assistant which will return the validation errors.  # noqa: E501

        :return: The assistant of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :rtype: AllOfServerMessageResponseAssistantRequestAssistant
        """
        return self._assistant

    @assistant.setter
    def assistant(self, assistant):
        """Sets the assistant of this ServerMessageResponseAssistantRequest.

        This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.  If you're unsure why you're getting an invalid assistant, try logging your response and send the JSON blob to POST /assistant which will return the validation errors.  # noqa: E501

        :param assistant: The assistant of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :type: AllOfServerMessageResponseAssistantRequestAssistant
        """

        self._assistant = assistant

    @property
    def assistant_overrides(self):
        """Gets the assistant_overrides of this ServerMessageResponseAssistantRequest.  # noqa: E501

        These are the overrides for the `assistant` or `assistantId`'s settings and template variables.  # noqa: E501

        :return: The assistant_overrides of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :rtype: AllOfServerMessageResponseAssistantRequestAssistantOverrides
        """
        return self._assistant_overrides

    @assistant_overrides.setter
    def assistant_overrides(self, assistant_overrides):
        """Sets the assistant_overrides of this ServerMessageResponseAssistantRequest.

        These are the overrides for the `assistant` or `assistantId`'s settings and template variables.  # noqa: E501

        :param assistant_overrides: The assistant_overrides of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :type: AllOfServerMessageResponseAssistantRequestAssistantOverrides
        """

        self._assistant_overrides = assistant_overrides

    @property
    def squad_id(self):
        """Gets the squad_id of this ServerMessageResponseAssistantRequest.  # noqa: E501

        This is the squad that will be used for the call. To use a transient squad, use `squad` instead.  # noqa: E501

        :return: The squad_id of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._squad_id

    @squad_id.setter
    def squad_id(self, squad_id):
        """Sets the squad_id of this ServerMessageResponseAssistantRequest.

        This is the squad that will be used for the call. To use a transient squad, use `squad` instead.  # noqa: E501

        :param squad_id: The squad_id of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :type: str
        """

        self._squad_id = squad_id

    @property
    def squad(self):
        """Gets the squad of this ServerMessageResponseAssistantRequest.  # noqa: E501

        This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.  # noqa: E501

        :return: The squad of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :rtype: AllOfServerMessageResponseAssistantRequestSquad
        """
        return self._squad

    @squad.setter
    def squad(self, squad):
        """Sets the squad of this ServerMessageResponseAssistantRequest.

        This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.  # noqa: E501

        :param squad: The squad of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :type: AllOfServerMessageResponseAssistantRequestSquad
        """

        self._squad = squad

    @property
    def error(self):
        """Gets the error of this ServerMessageResponseAssistantRequest.  # noqa: E501

        This is the error if the call shouldn't be accepted. This is spoken to the customer.  If this is sent, `assistantId`, `assistant`, `squadId`, `squad`, and `destination` are ignored.  # noqa: E501

        :return: The error of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ServerMessageResponseAssistantRequest.

        This is the error if the call shouldn't be accepted. This is spoken to the customer.  If this is sent, `assistantId`, `assistant`, `squadId`, `squad`, and `destination` are ignored.  # noqa: E501

        :param error: The error of this ServerMessageResponseAssistantRequest.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ServerMessageResponseAssistantRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ServerMessageResponseAssistantRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
