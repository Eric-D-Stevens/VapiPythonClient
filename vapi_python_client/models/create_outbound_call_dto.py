# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CreateOutboundCallDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'assistant_id': 'str',
        'assistant': 'AllOfCreateOutboundCallDTOAssistant',
        'assistant_overrides': 'AllOfCreateOutboundCallDTOAssistantOverrides',
        'squad_id': 'str',
        'squad': 'AllOfCreateOutboundCallDTOSquad',
        'phone_number_id': 'str',
        'phone_number': 'AllOfCreateOutboundCallDTOPhoneNumber',
        'customer_id': 'str',
        'customer': 'AllOfCreateOutboundCallDTOCustomer'
    }

    attribute_map = {
        'name': 'name',
        'assistant_id': 'assistantId',
        'assistant': 'assistant',
        'assistant_overrides': 'assistantOverrides',
        'squad_id': 'squadId',
        'squad': 'squad',
        'phone_number_id': 'phoneNumberId',
        'phone_number': 'phoneNumber',
        'customer_id': 'customerId',
        'customer': 'customer'
    }

    def __init__(self, name=None, assistant_id=None, assistant=None, assistant_overrides=None, squad_id=None, squad=None, phone_number_id=None, phone_number=None, customer_id=None, customer=None):  # noqa: E501
        """CreateOutboundCallDTO - a model defined in Swagger"""  # noqa: E501
        self._name = None
        self._assistant_id = None
        self._assistant = None
        self._assistant_overrides = None
        self._squad_id = None
        self._squad = None
        self._phone_number_id = None
        self._phone_number = None
        self._customer_id = None
        self._customer = None
        self.discriminator = None
        if name is not None:
            self.name = name
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if assistant is not None:
            self.assistant = assistant
        if assistant_overrides is not None:
            self.assistant_overrides = assistant_overrides
        if squad_id is not None:
            self.squad_id = squad_id
        if squad is not None:
            self.squad = squad
        if phone_number_id is not None:
            self.phone_number_id = phone_number_id
        if phone_number is not None:
            self.phone_number = phone_number
        if customer_id is not None:
            self.customer_id = customer_id
        if customer is not None:
            self.customer = customer

    @property
    def name(self):
        """Gets the name of this CreateOutboundCallDTO.  # noqa: E501

        This is the name of the call. This is just for your own reference.  # noqa: E501

        :return: The name of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateOutboundCallDTO.

        This is the name of the call. This is just for your own reference.  # noqa: E501

        :param name: The name of this CreateOutboundCallDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def assistant_id(self):
        """Gets the assistant_id of this CreateOutboundCallDTO.  # noqa: E501

        This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.  # noqa: E501

        :return: The assistant_id of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this CreateOutboundCallDTO.

        This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.  # noqa: E501

        :param assistant_id: The assistant_id of this CreateOutboundCallDTO.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def assistant(self):
        """Gets the assistant of this CreateOutboundCallDTO.  # noqa: E501

        This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.  # noqa: E501

        :return: The assistant of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: AllOfCreateOutboundCallDTOAssistant
        """
        return self._assistant

    @assistant.setter
    def assistant(self, assistant):
        """Sets the assistant of this CreateOutboundCallDTO.

        This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.  # noqa: E501

        :param assistant: The assistant of this CreateOutboundCallDTO.  # noqa: E501
        :type: AllOfCreateOutboundCallDTOAssistant
        """

        self._assistant = assistant

    @property
    def assistant_overrides(self):
        """Gets the assistant_overrides of this CreateOutboundCallDTO.  # noqa: E501

        These are the overrides for the `assistant` or `assistantId`'s settings and template variables.  # noqa: E501

        :return: The assistant_overrides of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: AllOfCreateOutboundCallDTOAssistantOverrides
        """
        return self._assistant_overrides

    @assistant_overrides.setter
    def assistant_overrides(self, assistant_overrides):
        """Sets the assistant_overrides of this CreateOutboundCallDTO.

        These are the overrides for the `assistant` or `assistantId`'s settings and template variables.  # noqa: E501

        :param assistant_overrides: The assistant_overrides of this CreateOutboundCallDTO.  # noqa: E501
        :type: AllOfCreateOutboundCallDTOAssistantOverrides
        """

        self._assistant_overrides = assistant_overrides

    @property
    def squad_id(self):
        """Gets the squad_id of this CreateOutboundCallDTO.  # noqa: E501

        This is the squad that will be used for the call. To use a transient squad, use `squad` instead.  # noqa: E501

        :return: The squad_id of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: str
        """
        return self._squad_id

    @squad_id.setter
    def squad_id(self, squad_id):
        """Sets the squad_id of this CreateOutboundCallDTO.

        This is the squad that will be used for the call. To use a transient squad, use `squad` instead.  # noqa: E501

        :param squad_id: The squad_id of this CreateOutboundCallDTO.  # noqa: E501
        :type: str
        """

        self._squad_id = squad_id

    @property
    def squad(self):
        """Gets the squad of this CreateOutboundCallDTO.  # noqa: E501

        This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.  # noqa: E501

        :return: The squad of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: AllOfCreateOutboundCallDTOSquad
        """
        return self._squad

    @squad.setter
    def squad(self, squad):
        """Sets the squad of this CreateOutboundCallDTO.

        This is a squad that will be used for the call. To use an existing squad, use `squadId` instead.  # noqa: E501

        :param squad: The squad of this CreateOutboundCallDTO.  # noqa: E501
        :type: AllOfCreateOutboundCallDTOSquad
        """

        self._squad = squad

    @property
    def phone_number_id(self):
        """Gets the phone_number_id of this CreateOutboundCallDTO.  # noqa: E501

        This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The phone_number_id of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: str
        """
        return self._phone_number_id

    @phone_number_id.setter
    def phone_number_id(self, phone_number_id):
        """Sets the phone_number_id of this CreateOutboundCallDTO.

        This is the phone number that will be used for the call. To use a transient number, use `phoneNumber` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param phone_number_id: The phone_number_id of this CreateOutboundCallDTO.  # noqa: E501
        :type: str
        """

        self._phone_number_id = phone_number_id

    @property
    def phone_number(self):
        """Gets the phone_number of this CreateOutboundCallDTO.  # noqa: E501

        This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The phone_number of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: AllOfCreateOutboundCallDTOPhoneNumber
        """
        return self._phone_number

    @phone_number.setter
    def phone_number(self, phone_number):
        """Sets the phone_number of this CreateOutboundCallDTO.

        This is the phone number that will be used for the call. To use an existing number, use `phoneNumberId` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param phone_number: The phone_number of this CreateOutboundCallDTO.  # noqa: E501
        :type: AllOfCreateOutboundCallDTOPhoneNumber
        """

        self._phone_number = phone_number

    @property
    def customer_id(self):
        """Gets the customer_id of this CreateOutboundCallDTO.  # noqa: E501

        This is the customer that will be called. To call a transient customer , use `customer` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The customer_id of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: str
        """
        return self._customer_id

    @customer_id.setter
    def customer_id(self, customer_id):
        """Sets the customer_id of this CreateOutboundCallDTO.

        This is the customer that will be called. To call a transient customer , use `customer` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param customer_id: The customer_id of this CreateOutboundCallDTO.  # noqa: E501
        :type: str
        """

        self._customer_id = customer_id

    @property
    def customer(self):
        """Gets the customer of this CreateOutboundCallDTO.  # noqa: E501

        This is the customer that will be called. To call an existing customer, use `customerId` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :return: The customer of this CreateOutboundCallDTO.  # noqa: E501
        :rtype: AllOfCreateOutboundCallDTOCustomer
        """
        return self._customer

    @customer.setter
    def customer(self, customer):
        """Sets the customer of this CreateOutboundCallDTO.

        This is the customer that will be called. To call an existing customer, use `customerId` instead.  Only relevant for `outboundPhoneCall` and `inboundPhoneCall` type.  # noqa: E501

        :param customer: The customer of this CreateOutboundCallDTO.  # noqa: E501
        :type: AllOfCreateOutboundCallDTOCustomer
        """

        self._customer = customer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CreateOutboundCallDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateOutboundCallDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
