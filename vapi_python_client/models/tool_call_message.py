# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ToolCallMessage(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'role': 'str',
        'tool_calls': 'list[object]',
        'message': 'str',
        'time': 'float',
        'seconds_from_start': 'float'
    }

    attribute_map = {
        'role': 'role',
        'tool_calls': 'toolCalls',
        'message': 'message',
        'time': 'time',
        'seconds_from_start': 'secondsFromStart'
    }

    def __init__(self, role=None, tool_calls=None, message=None, time=None, seconds_from_start=None):  # noqa: E501
        """ToolCallMessage - a model defined in Swagger"""  # noqa: E501
        self._role = None
        self._tool_calls = None
        self._message = None
        self._time = None
        self._seconds_from_start = None
        self.discriminator = None
        self.role = role
        self.tool_calls = tool_calls
        self.message = message
        self.time = time
        self.seconds_from_start = seconds_from_start

    @property
    def role(self):
        """Gets the role of this ToolCallMessage.  # noqa: E501

        The role of the tool call in the conversation.  # noqa: E501

        :return: The role of this ToolCallMessage.  # noqa: E501
        :rtype: str
        """
        return self._role

    @role.setter
    def role(self, role):
        """Sets the role of this ToolCallMessage.

        The role of the tool call in the conversation.  # noqa: E501

        :param role: The role of this ToolCallMessage.  # noqa: E501
        :type: str
        """
        if role is None:
            raise ValueError("Invalid value for `role`, must not be `None`")  # noqa: E501

        self._role = role

    @property
    def tool_calls(self):
        """Gets the tool_calls of this ToolCallMessage.  # noqa: E501

        The list of tool calls made during the conversation.  # noqa: E501

        :return: The tool_calls of this ToolCallMessage.  # noqa: E501
        :rtype: list[object]
        """
        return self._tool_calls

    @tool_calls.setter
    def tool_calls(self, tool_calls):
        """Sets the tool_calls of this ToolCallMessage.

        The list of tool calls made during the conversation.  # noqa: E501

        :param tool_calls: The tool_calls of this ToolCallMessage.  # noqa: E501
        :type: list[object]
        """
        if tool_calls is None:
            raise ValueError("Invalid value for `tool_calls`, must not be `None`")  # noqa: E501

        self._tool_calls = tool_calls

    @property
    def message(self):
        """Gets the message of this ToolCallMessage.  # noqa: E501

        The message content for the tool call.  # noqa: E501

        :return: The message of this ToolCallMessage.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ToolCallMessage.

        The message content for the tool call.  # noqa: E501

        :param message: The message of this ToolCallMessage.  # noqa: E501
        :type: str
        """
        if message is None:
            raise ValueError("Invalid value for `message`, must not be `None`")  # noqa: E501

        self._message = message

    @property
    def time(self):
        """Gets the time of this ToolCallMessage.  # noqa: E501

        The timestamp when the message was sent.  # noqa: E501

        :return: The time of this ToolCallMessage.  # noqa: E501
        :rtype: float
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this ToolCallMessage.

        The timestamp when the message was sent.  # noqa: E501

        :param time: The time of this ToolCallMessage.  # noqa: E501
        :type: float
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    @property
    def seconds_from_start(self):
        """Gets the seconds_from_start of this ToolCallMessage.  # noqa: E501

        The number of seconds from the start of the conversation.  # noqa: E501

        :return: The seconds_from_start of this ToolCallMessage.  # noqa: E501
        :rtype: float
        """
        return self._seconds_from_start

    @seconds_from_start.setter
    def seconds_from_start(self, seconds_from_start):
        """Sets the seconds_from_start of this ToolCallMessage.

        The number of seconds from the start of the conversation.  # noqa: E501

        :param seconds_from_start: The seconds_from_start of this ToolCallMessage.  # noqa: E501
        :type: float
        """
        if seconds_from_start is None:
            raise ValueError("Invalid value for `seconds_from_start`, must not be `None`")  # noqa: E501

        self._seconds_from_start = seconds_from_start

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToolCallMessage, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolCallMessage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
