# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DeepgramTranscriber(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'str',
        'model': 'OneOfDeepgramTranscriberModel',
        'language': 'str',
        'smart_format': 'bool',
        'keywords': 'list[str]'
    }

    attribute_map = {
        'provider': 'provider',
        'model': 'model',
        'language': 'language',
        'smart_format': 'smartFormat',
        'keywords': 'keywords'
    }

    def __init__(self, provider=None, model=None, language=None, smart_format=None, keywords=None):  # noqa: E501
        """DeepgramTranscriber - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._model = None
        self._language = None
        self._smart_format = None
        self._keywords = None
        self.discriminator = None
        self.provider = provider
        if model is not None:
            self.model = model
        if language is not None:
            self.language = language
        if smart_format is not None:
            self.smart_format = smart_format
        if keywords is not None:
            self.keywords = keywords

    @property
    def provider(self):
        """Gets the provider of this DeepgramTranscriber.  # noqa: E501

        This is the transcription provider that will be used.  # noqa: E501

        :return: The provider of this DeepgramTranscriber.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this DeepgramTranscriber.

        This is the transcription provider that will be used.  # noqa: E501

        :param provider: The provider of this DeepgramTranscriber.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["deepgram"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def model(self):
        """Gets the model of this DeepgramTranscriber.  # noqa: E501

        This is the Deepgram model that will be used. A list of models can be found here: https://developers.deepgram.com/docs/models-languages-overview  # noqa: E501

        :return: The model of this DeepgramTranscriber.  # noqa: E501
        :rtype: OneOfDeepgramTranscriberModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this DeepgramTranscriber.

        This is the Deepgram model that will be used. A list of models can be found here: https://developers.deepgram.com/docs/models-languages-overview  # noqa: E501

        :param model: The model of this DeepgramTranscriber.  # noqa: E501
        :type: OneOfDeepgramTranscriberModel
        """

        self._model = model

    @property
    def language(self):
        """Gets the language of this DeepgramTranscriber.  # noqa: E501

        This is the language that will be set for the transcription. The list of languages Deepgram supports can be found here: https://developers.deepgram.com/docs/models-languages-overview  # noqa: E501

        :return: The language of this DeepgramTranscriber.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this DeepgramTranscriber.

        This is the language that will be set for the transcription. The list of languages Deepgram supports can be found here: https://developers.deepgram.com/docs/models-languages-overview  # noqa: E501

        :param language: The language of this DeepgramTranscriber.  # noqa: E501
        :type: str
        """
        allowed_values = ["bg", "ca", "cs", "da", "da-DK", "de", "de-CH", "el", "en", "en-AU", "en-GB", "en-IN", "en-NZ", "en-US", "es", "es-419", "es-LATAM", "et", "fi", "fr", "fr-CA", "hi", "hi-Latn", "hu", "id", "it", "ja", "ko", "ko-KR", "lt", "lv", "ms", "multi", "nl", "nl-BE", "no", "pl", "pt", "pt-BR", "ro", "ru", "sk", "sv", "sv-SE", "ta", "taq", "th", "th-TH", "tr", "uk", "vi", "zh", "zh-CN", "zh-Hans", "zh-Hant", "zh-TW"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def smart_format(self):
        """Gets the smart_format of this DeepgramTranscriber.  # noqa: E501

        This will be use smart format option provided by Deepgram. It's default disabled because it can sometimes format numbers as times sometimes but it's getting better.  # noqa: E501

        :return: The smart_format of this DeepgramTranscriber.  # noqa: E501
        :rtype: bool
        """
        return self._smart_format

    @smart_format.setter
    def smart_format(self, smart_format):
        """Sets the smart_format of this DeepgramTranscriber.

        This will be use smart format option provided by Deepgram. It's default disabled because it can sometimes format numbers as times sometimes but it's getting better.  # noqa: E501

        :param smart_format: The smart_format of this DeepgramTranscriber.  # noqa: E501
        :type: bool
        """

        self._smart_format = smart_format

    @property
    def keywords(self):
        """Gets the keywords of this DeepgramTranscriber.  # noqa: E501

        These keywords are passed to the transcription model to help it pick up use-case specific words. Anything that may not be a common word, like your company name, should be added here.  # noqa: E501

        :return: The keywords of this DeepgramTranscriber.  # noqa: E501
        :rtype: list[str]
        """
        return self._keywords

    @keywords.setter
    def keywords(self, keywords):
        """Sets the keywords of this DeepgramTranscriber.

        These keywords are passed to the transcription model to help it pick up use-case specific words. Anything that may not be a common word, like your company name, should be added here.  # noqa: E501

        :param keywords: The keywords of this DeepgramTranscriber.  # noqa: E501
        :type: list[str]
        """

        self._keywords = keywords

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DeepgramTranscriber, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DeepgramTranscriber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
