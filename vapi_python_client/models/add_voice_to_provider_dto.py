# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AddVoiceToProviderDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner_id': 'str',
        'voice_id': 'str',
        'name': 'str'
    }

    attribute_map = {
        'owner_id': 'ownerId',
        'voice_id': 'voiceId',
        'name': 'name'
    }

    def __init__(self, owner_id=None, voice_id=None, name=None):  # noqa: E501
        """AddVoiceToProviderDTO - a model defined in Swagger"""  # noqa: E501
        self._owner_id = None
        self._voice_id = None
        self._name = None
        self.discriminator = None
        self.owner_id = owner_id
        self.voice_id = voice_id
        self.name = name

    @property
    def owner_id(self):
        """Gets the owner_id of this AddVoiceToProviderDTO.  # noqa: E501

        This is the owner_id of your shared voice which you want to add to your provider Account from Provider Voice Library  # noqa: E501

        :return: The owner_id of this AddVoiceToProviderDTO.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this AddVoiceToProviderDTO.

        This is the owner_id of your shared voice which you want to add to your provider Account from Provider Voice Library  # noqa: E501

        :param owner_id: The owner_id of this AddVoiceToProviderDTO.  # noqa: E501
        :type: str
        """
        if owner_id is None:
            raise ValueError("Invalid value for `owner_id`, must not be `None`")  # noqa: E501

        self._owner_id = owner_id

    @property
    def voice_id(self):
        """Gets the voice_id of this AddVoiceToProviderDTO.  # noqa: E501

        This is the voice_id of the shared voice which you want to add to your provider Account from Provider Voice Library  # noqa: E501

        :return: The voice_id of this AddVoiceToProviderDTO.  # noqa: E501
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this AddVoiceToProviderDTO.

        This is the voice_id of the shared voice which you want to add to your provider Account from Provider Voice Library  # noqa: E501

        :param voice_id: The voice_id of this AddVoiceToProviderDTO.  # noqa: E501
        :type: str
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")  # noqa: E501

        self._voice_id = voice_id

    @property
    def name(self):
        """Gets the name of this AddVoiceToProviderDTO.  # noqa: E501

        This is the new name of the voice which you want to have once you have added voice to your provider Account from Provider Voice Library  # noqa: E501

        :return: The name of this AddVoiceToProviderDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AddVoiceToProviderDTO.

        This is the new name of the voice which you want to have once you have added voice to your provider Account from Provider Voice Library  # noqa: E501

        :param name: The name of this AddVoiceToProviderDTO.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AddVoiceToProviderDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AddVoiceToProviderDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
