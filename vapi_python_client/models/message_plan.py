# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MessagePlan(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'idle_messages': 'list[str]',
        'idle_message_max_spoken_count': 'float',
        'idle_timeout_seconds': 'float'
    }

    attribute_map = {
        'idle_messages': 'idleMessages',
        'idle_message_max_spoken_count': 'idleMessageMaxSpokenCount',
        'idle_timeout_seconds': 'idleTimeoutSeconds'
    }

    def __init__(self, idle_messages=None, idle_message_max_spoken_count=None, idle_timeout_seconds=None):  # noqa: E501
        """MessagePlan - a model defined in Swagger"""  # noqa: E501
        self._idle_messages = None
        self._idle_message_max_spoken_count = None
        self._idle_timeout_seconds = None
        self.discriminator = None
        if idle_messages is not None:
            self.idle_messages = idle_messages
        if idle_message_max_spoken_count is not None:
            self.idle_message_max_spoken_count = idle_message_max_spoken_count
        if idle_timeout_seconds is not None:
            self.idle_timeout_seconds = idle_timeout_seconds

    @property
    def idle_messages(self):
        """Gets the idle_messages of this MessagePlan.  # noqa: E501

        This are the messages that the assistant will speak when the user hasn't responded for `idleTimeoutSeconds`. Each time the timeout is triggered, a random message will be chosen from this array.  @default null (no idle message is spoken)  # noqa: E501

        :return: The idle_messages of this MessagePlan.  # noqa: E501
        :rtype: list[str]
        """
        return self._idle_messages

    @idle_messages.setter
    def idle_messages(self, idle_messages):
        """Sets the idle_messages of this MessagePlan.

        This are the messages that the assistant will speak when the user hasn't responded for `idleTimeoutSeconds`. Each time the timeout is triggered, a random message will be chosen from this array.  @default null (no idle message is spoken)  # noqa: E501

        :param idle_messages: The idle_messages of this MessagePlan.  # noqa: E501
        :type: list[str]
        """

        self._idle_messages = idle_messages

    @property
    def idle_message_max_spoken_count(self):
        """Gets the idle_message_max_spoken_count of this MessagePlan.  # noqa: E501

        This determines the maximum number of times `idleMessages` can be spoken during the call.  @default 3  # noqa: E501

        :return: The idle_message_max_spoken_count of this MessagePlan.  # noqa: E501
        :rtype: float
        """
        return self._idle_message_max_spoken_count

    @idle_message_max_spoken_count.setter
    def idle_message_max_spoken_count(self, idle_message_max_spoken_count):
        """Sets the idle_message_max_spoken_count of this MessagePlan.

        This determines the maximum number of times `idleMessages` can be spoken during the call.  @default 3  # noqa: E501

        :param idle_message_max_spoken_count: The idle_message_max_spoken_count of this MessagePlan.  # noqa: E501
        :type: float
        """

        self._idle_message_max_spoken_count = idle_message_max_spoken_count

    @property
    def idle_timeout_seconds(self):
        """Gets the idle_timeout_seconds of this MessagePlan.  # noqa: E501

        This is the timeout in seconds before a message from `idleMessages` is spoken. The clock starts when the assistant finishes speaking and remains active until the user speaks.  @default 10  # noqa: E501

        :return: The idle_timeout_seconds of this MessagePlan.  # noqa: E501
        :rtype: float
        """
        return self._idle_timeout_seconds

    @idle_timeout_seconds.setter
    def idle_timeout_seconds(self, idle_timeout_seconds):
        """Sets the idle_timeout_seconds of this MessagePlan.

        This is the timeout in seconds before a message from `idleMessages` is spoken. The clock starts when the assistant finishes speaking and remains active until the user speaks.  @default 10  # noqa: E501

        :param idle_timeout_seconds: The idle_timeout_seconds of this MessagePlan.  # noqa: E501
        :type: float
        """

        self._idle_timeout_seconds = idle_timeout_seconds

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MessagePlan, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MessagePlan):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
