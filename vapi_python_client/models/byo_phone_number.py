# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ByoPhoneNumber(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fallback_destination': 'OneOfByoPhoneNumberFallbackDestination',
        'provider': 'str',
        'id': 'str',
        'org_id': 'str',
        'created_at': 'datetime',
        'updated_at': 'datetime',
        'name': 'str',
        'assistant_id': 'str',
        'squad_id': 'str',
        'server_url': 'str',
        'server_url_secret': 'str',
        'number': 'str',
        'credential_id': 'str'
    }

    attribute_map = {
        'fallback_destination': 'fallbackDestination',
        'provider': 'provider',
        'id': 'id',
        'org_id': 'orgId',
        'created_at': 'createdAt',
        'updated_at': 'updatedAt',
        'name': 'name',
        'assistant_id': 'assistantId',
        'squad_id': 'squadId',
        'server_url': 'serverUrl',
        'server_url_secret': 'serverUrlSecret',
        'number': 'number',
        'credential_id': 'credentialId'
    }

    def __init__(self, fallback_destination=None, provider=None, id=None, org_id=None, created_at=None, updated_at=None, name=None, assistant_id=None, squad_id=None, server_url=None, server_url_secret=None, number=None, credential_id=None):  # noqa: E501
        """ByoPhoneNumber - a model defined in Swagger"""  # noqa: E501
        self._fallback_destination = None
        self._provider = None
        self._id = None
        self._org_id = None
        self._created_at = None
        self._updated_at = None
        self._name = None
        self._assistant_id = None
        self._squad_id = None
        self._server_url = None
        self._server_url_secret = None
        self._number = None
        self._credential_id = None
        self.discriminator = None
        if fallback_destination is not None:
            self.fallback_destination = fallback_destination
        self.provider = provider
        self.id = id
        self.org_id = org_id
        self.created_at = created_at
        self.updated_at = updated_at
        if name is not None:
            self.name = name
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if squad_id is not None:
            self.squad_id = squad_id
        if server_url is not None:
            self.server_url = server_url
        if server_url_secret is not None:
            self.server_url_secret = server_url_secret
        self.number = number
        self.credential_id = credential_id

    @property
    def fallback_destination(self):
        """Gets the fallback_destination of this ByoPhoneNumber.  # noqa: E501

        This is the fallback destination an inbound call will be transferred to if: 1. `assistantId` is not set 2. `squadId` is not set 3. and, `assistant-request` message to the `serverUrl` fails  If this is not set and above conditions are met, the inbound call is hung up with an error message.  # noqa: E501

        :return: The fallback_destination of this ByoPhoneNumber.  # noqa: E501
        :rtype: OneOfByoPhoneNumberFallbackDestination
        """
        return self._fallback_destination

    @fallback_destination.setter
    def fallback_destination(self, fallback_destination):
        """Sets the fallback_destination of this ByoPhoneNumber.

        This is the fallback destination an inbound call will be transferred to if: 1. `assistantId` is not set 2. `squadId` is not set 3. and, `assistant-request` message to the `serverUrl` fails  If this is not set and above conditions are met, the inbound call is hung up with an error message.  # noqa: E501

        :param fallback_destination: The fallback_destination of this ByoPhoneNumber.  # noqa: E501
        :type: OneOfByoPhoneNumberFallbackDestination
        """

        self._fallback_destination = fallback_destination

    @property
    def provider(self):
        """Gets the provider of this ByoPhoneNumber.  # noqa: E501

        This is to bring your own phone numbers from your own SIP trunks or Carriers.  # noqa: E501

        :return: The provider of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this ByoPhoneNumber.

        This is to bring your own phone numbers from your own SIP trunks or Carriers.  # noqa: E501

        :param provider: The provider of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["byo-phone-number"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def id(self):
        """Gets the id of this ByoPhoneNumber.  # noqa: E501

        This is the unique identifier for the phone number.  # noqa: E501

        :return: The id of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ByoPhoneNumber.

        This is the unique identifier for the phone number.  # noqa: E501

        :param id: The id of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def org_id(self):
        """Gets the org_id of this ByoPhoneNumber.  # noqa: E501

        This is the unique identifier for the org that this phone number belongs to.  # noqa: E501

        :return: The org_id of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this ByoPhoneNumber.

        This is the unique identifier for the org that this phone number belongs to.  # noqa: E501

        :param org_id: The org_id of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def created_at(self):
        """Gets the created_at of this ByoPhoneNumber.  # noqa: E501

        This is the ISO 8601 date-time string of when the phone number was created.  # noqa: E501

        :return: The created_at of this ByoPhoneNumber.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this ByoPhoneNumber.

        This is the ISO 8601 date-time string of when the phone number was created.  # noqa: E501

        :param created_at: The created_at of this ByoPhoneNumber.  # noqa: E501
        :type: datetime
        """
        if created_at is None:
            raise ValueError("Invalid value for `created_at`, must not be `None`")  # noqa: E501

        self._created_at = created_at

    @property
    def updated_at(self):
        """Gets the updated_at of this ByoPhoneNumber.  # noqa: E501

        This is the ISO 8601 date-time string of when the phone number was last updated.  # noqa: E501

        :return: The updated_at of this ByoPhoneNumber.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this ByoPhoneNumber.

        This is the ISO 8601 date-time string of when the phone number was last updated.  # noqa: E501

        :param updated_at: The updated_at of this ByoPhoneNumber.  # noqa: E501
        :type: datetime
        """
        if updated_at is None:
            raise ValueError("Invalid value for `updated_at`, must not be `None`")  # noqa: E501

        self._updated_at = updated_at

    @property
    def name(self):
        """Gets the name of this ByoPhoneNumber.  # noqa: E501

        This is the name of the phone number. This is just for your own reference.  # noqa: E501

        :return: The name of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ByoPhoneNumber.

        This is the name of the phone number. This is just for your own reference.  # noqa: E501

        :param name: The name of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def assistant_id(self):
        """Gets the assistant_id of this ByoPhoneNumber.  # noqa: E501

        This is the assistant that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.  # noqa: E501

        :return: The assistant_id of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this ByoPhoneNumber.

        This is the assistant that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.  # noqa: E501

        :param assistant_id: The assistant_id of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def squad_id(self):
        """Gets the squad_id of this ByoPhoneNumber.  # noqa: E501

        This is the squad that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.  # noqa: E501

        :return: The squad_id of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._squad_id

    @squad_id.setter
    def squad_id(self, squad_id):
        """Sets the squad_id of this ByoPhoneNumber.

        This is the squad that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.  # noqa: E501

        :param squad_id: The squad_id of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """

        self._squad_id = squad_id

    @property
    def server_url(self):
        """Gets the server_url of this ByoPhoneNumber.  # noqa: E501

        This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.  You can see the shape of the messages sent in `ServerMessage`.  This overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl.  # noqa: E501

        :return: The server_url of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._server_url

    @server_url.setter
    def server_url(self, server_url):
        """Sets the server_url of this ByoPhoneNumber.

        This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.  You can see the shape of the messages sent in `ServerMessage`.  This overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl.  # noqa: E501

        :param server_url: The server_url of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """

        self._server_url = server_url

    @property
    def server_url_secret(self):
        """Gets the server_url_secret of this ByoPhoneNumber.  # noqa: E501

        This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.  Same precedence logic as serverUrl.  # noqa: E501

        :return: The server_url_secret of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._server_url_secret

    @server_url_secret.setter
    def server_url_secret(self, server_url_secret):
        """Sets the server_url_secret of this ByoPhoneNumber.

        This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.  Same precedence logic as serverUrl.  # noqa: E501

        :param server_url_secret: The server_url_secret of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """

        self._server_url_secret = server_url_secret

    @property
    def number(self):
        """Gets the number of this ByoPhoneNumber.  # noqa: E501

        These are the digits of the phone number you own on your SIP trunk or Carrier.  This is not limited to E164 and can be any alphanumeric string. Example: `+1234567890`, or `abc`, or `1234'.  # noqa: E501

        :return: The number of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this ByoPhoneNumber.

        These are the digits of the phone number you own on your SIP trunk or Carrier.  This is not limited to E164 and can be any alphanumeric string. Example: `+1234567890`, or `abc`, or `1234'.  # noqa: E501

        :param number: The number of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """
        if number is None:
            raise ValueError("Invalid value for `number`, must not be `None`")  # noqa: E501

        self._number = number

    @property
    def credential_id(self):
        """Gets the credential_id of this ByoPhoneNumber.  # noqa: E501

        This is the credential of your own SIP trunk or Carrier (type `byo-sip-trunk`) which can be used to make calls to this phone number.  You can add the SIP trunk or Carrier credential in the Provider Credentials page on the Dashboard to get the credentialId.  # noqa: E501

        :return: The credential_id of this ByoPhoneNumber.  # noqa: E501
        :rtype: str
        """
        return self._credential_id

    @credential_id.setter
    def credential_id(self, credential_id):
        """Sets the credential_id of this ByoPhoneNumber.

        This is the credential of your own SIP trunk or Carrier (type `byo-sip-trunk`) which can be used to make calls to this phone number.  You can add the SIP trunk or Carrier credential in the Provider Credentials page on the Dashboard to get the credentialId.  # noqa: E501

        :param credential_id: The credential_id of this ByoPhoneNumber.  # noqa: E501
        :type: str
        """
        if credential_id is None:
            raise ValueError("Invalid value for `credential_id`, must not be `None`")  # noqa: E501

        self._credential_id = credential_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ByoPhoneNumber, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ByoPhoneNumber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
