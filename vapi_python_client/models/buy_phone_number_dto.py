# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BuyPhoneNumberDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'fallback_destination': 'OneOfBuyPhoneNumberDTOFallbackDestination',
        'area_code': 'str',
        'name': 'str',
        'assistant_id': 'str',
        'squad_id': 'str',
        'server_url': 'str',
        'server_url_secret': 'str'
    }

    attribute_map = {
        'fallback_destination': 'fallbackDestination',
        'area_code': 'areaCode',
        'name': 'name',
        'assistant_id': 'assistantId',
        'squad_id': 'squadId',
        'server_url': 'serverUrl',
        'server_url_secret': 'serverUrlSecret'
    }

    def __init__(self, fallback_destination=None, area_code=None, name=None, assistant_id=None, squad_id=None, server_url=None, server_url_secret=None):  # noqa: E501
        """BuyPhoneNumberDTO - a model defined in Swagger"""  # noqa: E501
        self._fallback_destination = None
        self._area_code = None
        self._name = None
        self._assistant_id = None
        self._squad_id = None
        self._server_url = None
        self._server_url_secret = None
        self.discriminator = None
        if fallback_destination is not None:
            self.fallback_destination = fallback_destination
        self.area_code = area_code
        if name is not None:
            self.name = name
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if squad_id is not None:
            self.squad_id = squad_id
        if server_url is not None:
            self.server_url = server_url
        if server_url_secret is not None:
            self.server_url_secret = server_url_secret

    @property
    def fallback_destination(self):
        """Gets the fallback_destination of this BuyPhoneNumberDTO.  # noqa: E501

        This is the fallback destination an inbound call will be transferred to if: 1. `assistantId` is not set 2. `squadId` is not set 3. and, `assistant-request` message to the `serverUrl` fails  If this is not set and above conditions are met, the inbound call is hung up with an error message.  # noqa: E501

        :return: The fallback_destination of this BuyPhoneNumberDTO.  # noqa: E501
        :rtype: OneOfBuyPhoneNumberDTOFallbackDestination
        """
        return self._fallback_destination

    @fallback_destination.setter
    def fallback_destination(self, fallback_destination):
        """Sets the fallback_destination of this BuyPhoneNumberDTO.

        This is the fallback destination an inbound call will be transferred to if: 1. `assistantId` is not set 2. `squadId` is not set 3. and, `assistant-request` message to the `serverUrl` fails  If this is not set and above conditions are met, the inbound call is hung up with an error message.  # noqa: E501

        :param fallback_destination: The fallback_destination of this BuyPhoneNumberDTO.  # noqa: E501
        :type: OneOfBuyPhoneNumberDTOFallbackDestination
        """

        self._fallback_destination = fallback_destination

    @property
    def area_code(self):
        """Gets the area_code of this BuyPhoneNumberDTO.  # noqa: E501

        This is the area code of the phone number to purchase.  # noqa: E501

        :return: The area_code of this BuyPhoneNumberDTO.  # noqa: E501
        :rtype: str
        """
        return self._area_code

    @area_code.setter
    def area_code(self, area_code):
        """Sets the area_code of this BuyPhoneNumberDTO.

        This is the area code of the phone number to purchase.  # noqa: E501

        :param area_code: The area_code of this BuyPhoneNumberDTO.  # noqa: E501
        :type: str
        """
        if area_code is None:
            raise ValueError("Invalid value for `area_code`, must not be `None`")  # noqa: E501

        self._area_code = area_code

    @property
    def name(self):
        """Gets the name of this BuyPhoneNumberDTO.  # noqa: E501

        This is the name of the phone number. This is just for your own reference.  # noqa: E501

        :return: The name of this BuyPhoneNumberDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this BuyPhoneNumberDTO.

        This is the name of the phone number. This is just for your own reference.  # noqa: E501

        :param name: The name of this BuyPhoneNumberDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def assistant_id(self):
        """Gets the assistant_id of this BuyPhoneNumberDTO.  # noqa: E501

        This is the assistant that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.  # noqa: E501

        :return: The assistant_id of this BuyPhoneNumberDTO.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this BuyPhoneNumberDTO.

        This is the assistant that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.  # noqa: E501

        :param assistant_id: The assistant_id of this BuyPhoneNumberDTO.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def squad_id(self):
        """Gets the squad_id of this BuyPhoneNumberDTO.  # noqa: E501

        This is the squad that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.  # noqa: E501

        :return: The squad_id of this BuyPhoneNumberDTO.  # noqa: E501
        :rtype: str
        """
        return self._squad_id

    @squad_id.setter
    def squad_id(self, squad_id):
        """Sets the squad_id of this BuyPhoneNumberDTO.

        This is the squad that will be used for incoming calls to this phone number.  If neither `assistantId` nor `squadId` is set, `assistant-request` will be sent to your Server URL. Check `ServerMessage` and `ServerMessageResponse` for the shape of the message and response that is expected.  # noqa: E501

        :param squad_id: The squad_id of this BuyPhoneNumberDTO.  # noqa: E501
        :type: str
        """

        self._squad_id = squad_id

    @property
    def server_url(self):
        """Gets the server_url of this BuyPhoneNumberDTO.  # noqa: E501

        This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.  You can see the shape of the messages sent in `ServerMessage`.  This overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl.  # noqa: E501

        :return: The server_url of this BuyPhoneNumberDTO.  # noqa: E501
        :rtype: str
        """
        return self._server_url

    @server_url.setter
    def server_url(self, server_url):
        """Sets the server_url of this BuyPhoneNumberDTO.

        This is the server URL where messages will be sent for calls on this number. This includes the `assistant-request` message.  You can see the shape of the messages sent in `ServerMessage`.  This overrides the `org.serverUrl`. Order of precedence: tool.server.url > assistant.serverUrl > phoneNumber.serverUrl > org.serverUrl.  # noqa: E501

        :param server_url: The server_url of this BuyPhoneNumberDTO.  # noqa: E501
        :type: str
        """

        self._server_url = server_url

    @property
    def server_url_secret(self):
        """Gets the server_url_secret of this BuyPhoneNumberDTO.  # noqa: E501

        This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.  Same precedence logic as serverUrl.  # noqa: E501

        :return: The server_url_secret of this BuyPhoneNumberDTO.  # noqa: E501
        :rtype: str
        """
        return self._server_url_secret

    @server_url_secret.setter
    def server_url_secret(self, server_url_secret):
        """Sets the server_url_secret of this BuyPhoneNumberDTO.

        This is the secret Vapi will send with every message to your server. It's sent as a header called x-vapi-secret.  Same precedence logic as serverUrl.  # noqa: E501

        :param server_url_secret: The server_url_secret of this BuyPhoneNumberDTO.  # noqa: E501
        :type: str
        """

        self._server_url_secret = server_url_secret

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BuyPhoneNumberDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BuyPhoneNumberDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
