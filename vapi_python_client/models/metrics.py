# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Metrics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'org_id': 'str',
        'range_start': 'str',
        'range_end': 'str',
        'bill': 'float',
        'bill_within_billing_limit': 'bool',
        'bill_daily_breakdown': 'object',
        'call_active': 'float',
        'call_active_within_concurrency_limit': 'bool',
        'call_minutes': 'float',
        'call_minutes_daily_breakdown': 'object',
        'call_minutes_average': 'float',
        'call_minutes_average_daily_breakdown': 'object',
        'call_count': 'float',
        'call_count_daily_breakdown': 'object'
    }

    attribute_map = {
        'org_id': 'orgId',
        'range_start': 'rangeStart',
        'range_end': 'rangeEnd',
        'bill': 'bill',
        'bill_within_billing_limit': 'billWithinBillingLimit',
        'bill_daily_breakdown': 'billDailyBreakdown',
        'call_active': 'callActive',
        'call_active_within_concurrency_limit': 'callActiveWithinConcurrencyLimit',
        'call_minutes': 'callMinutes',
        'call_minutes_daily_breakdown': 'callMinutesDailyBreakdown',
        'call_minutes_average': 'callMinutesAverage',
        'call_minutes_average_daily_breakdown': 'callMinutesAverageDailyBreakdown',
        'call_count': 'callCount',
        'call_count_daily_breakdown': 'callCountDailyBreakdown'
    }

    def __init__(self, org_id=None, range_start=None, range_end=None, bill=None, bill_within_billing_limit=None, bill_daily_breakdown=None, call_active=None, call_active_within_concurrency_limit=None, call_minutes=None, call_minutes_daily_breakdown=None, call_minutes_average=None, call_minutes_average_daily_breakdown=None, call_count=None, call_count_daily_breakdown=None):  # noqa: E501
        """Metrics - a model defined in Swagger"""  # noqa: E501
        self._org_id = None
        self._range_start = None
        self._range_end = None
        self._bill = None
        self._bill_within_billing_limit = None
        self._bill_daily_breakdown = None
        self._call_active = None
        self._call_active_within_concurrency_limit = None
        self._call_minutes = None
        self._call_minutes_daily_breakdown = None
        self._call_minutes_average = None
        self._call_minutes_average_daily_breakdown = None
        self._call_count = None
        self._call_count_daily_breakdown = None
        self.discriminator = None
        self.org_id = org_id
        self.range_start = range_start
        self.range_end = range_end
        self.bill = bill
        self.bill_within_billing_limit = bill_within_billing_limit
        self.bill_daily_breakdown = bill_daily_breakdown
        self.call_active = call_active
        self.call_active_within_concurrency_limit = call_active_within_concurrency_limit
        self.call_minutes = call_minutes
        self.call_minutes_daily_breakdown = call_minutes_daily_breakdown
        self.call_minutes_average = call_minutes_average
        self.call_minutes_average_daily_breakdown = call_minutes_average_daily_breakdown
        self.call_count = call_count
        self.call_count_daily_breakdown = call_count_daily_breakdown

    @property
    def org_id(self):
        """Gets the org_id of this Metrics.  # noqa: E501


        :return: The org_id of this Metrics.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this Metrics.


        :param org_id: The org_id of this Metrics.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def range_start(self):
        """Gets the range_start of this Metrics.  # noqa: E501


        :return: The range_start of this Metrics.  # noqa: E501
        :rtype: str
        """
        return self._range_start

    @range_start.setter
    def range_start(self, range_start):
        """Sets the range_start of this Metrics.


        :param range_start: The range_start of this Metrics.  # noqa: E501
        :type: str
        """
        if range_start is None:
            raise ValueError("Invalid value for `range_start`, must not be `None`")  # noqa: E501

        self._range_start = range_start

    @property
    def range_end(self):
        """Gets the range_end of this Metrics.  # noqa: E501


        :return: The range_end of this Metrics.  # noqa: E501
        :rtype: str
        """
        return self._range_end

    @range_end.setter
    def range_end(self, range_end):
        """Sets the range_end of this Metrics.


        :param range_end: The range_end of this Metrics.  # noqa: E501
        :type: str
        """
        if range_end is None:
            raise ValueError("Invalid value for `range_end`, must not be `None`")  # noqa: E501

        self._range_end = range_end

    @property
    def bill(self):
        """Gets the bill of this Metrics.  # noqa: E501


        :return: The bill of this Metrics.  # noqa: E501
        :rtype: float
        """
        return self._bill

    @bill.setter
    def bill(self, bill):
        """Sets the bill of this Metrics.


        :param bill: The bill of this Metrics.  # noqa: E501
        :type: float
        """
        if bill is None:
            raise ValueError("Invalid value for `bill`, must not be `None`")  # noqa: E501

        self._bill = bill

    @property
    def bill_within_billing_limit(self):
        """Gets the bill_within_billing_limit of this Metrics.  # noqa: E501


        :return: The bill_within_billing_limit of this Metrics.  # noqa: E501
        :rtype: bool
        """
        return self._bill_within_billing_limit

    @bill_within_billing_limit.setter
    def bill_within_billing_limit(self, bill_within_billing_limit):
        """Sets the bill_within_billing_limit of this Metrics.


        :param bill_within_billing_limit: The bill_within_billing_limit of this Metrics.  # noqa: E501
        :type: bool
        """
        if bill_within_billing_limit is None:
            raise ValueError("Invalid value for `bill_within_billing_limit`, must not be `None`")  # noqa: E501

        self._bill_within_billing_limit = bill_within_billing_limit

    @property
    def bill_daily_breakdown(self):
        """Gets the bill_daily_breakdown of this Metrics.  # noqa: E501


        :return: The bill_daily_breakdown of this Metrics.  # noqa: E501
        :rtype: object
        """
        return self._bill_daily_breakdown

    @bill_daily_breakdown.setter
    def bill_daily_breakdown(self, bill_daily_breakdown):
        """Sets the bill_daily_breakdown of this Metrics.


        :param bill_daily_breakdown: The bill_daily_breakdown of this Metrics.  # noqa: E501
        :type: object
        """
        if bill_daily_breakdown is None:
            raise ValueError("Invalid value for `bill_daily_breakdown`, must not be `None`")  # noqa: E501

        self._bill_daily_breakdown = bill_daily_breakdown

    @property
    def call_active(self):
        """Gets the call_active of this Metrics.  # noqa: E501


        :return: The call_active of this Metrics.  # noqa: E501
        :rtype: float
        """
        return self._call_active

    @call_active.setter
    def call_active(self, call_active):
        """Sets the call_active of this Metrics.


        :param call_active: The call_active of this Metrics.  # noqa: E501
        :type: float
        """
        if call_active is None:
            raise ValueError("Invalid value for `call_active`, must not be `None`")  # noqa: E501

        self._call_active = call_active

    @property
    def call_active_within_concurrency_limit(self):
        """Gets the call_active_within_concurrency_limit of this Metrics.  # noqa: E501


        :return: The call_active_within_concurrency_limit of this Metrics.  # noqa: E501
        :rtype: bool
        """
        return self._call_active_within_concurrency_limit

    @call_active_within_concurrency_limit.setter
    def call_active_within_concurrency_limit(self, call_active_within_concurrency_limit):
        """Sets the call_active_within_concurrency_limit of this Metrics.


        :param call_active_within_concurrency_limit: The call_active_within_concurrency_limit of this Metrics.  # noqa: E501
        :type: bool
        """
        if call_active_within_concurrency_limit is None:
            raise ValueError("Invalid value for `call_active_within_concurrency_limit`, must not be `None`")  # noqa: E501

        self._call_active_within_concurrency_limit = call_active_within_concurrency_limit

    @property
    def call_minutes(self):
        """Gets the call_minutes of this Metrics.  # noqa: E501


        :return: The call_minutes of this Metrics.  # noqa: E501
        :rtype: float
        """
        return self._call_minutes

    @call_minutes.setter
    def call_minutes(self, call_minutes):
        """Sets the call_minutes of this Metrics.


        :param call_minutes: The call_minutes of this Metrics.  # noqa: E501
        :type: float
        """
        if call_minutes is None:
            raise ValueError("Invalid value for `call_minutes`, must not be `None`")  # noqa: E501

        self._call_minutes = call_minutes

    @property
    def call_minutes_daily_breakdown(self):
        """Gets the call_minutes_daily_breakdown of this Metrics.  # noqa: E501


        :return: The call_minutes_daily_breakdown of this Metrics.  # noqa: E501
        :rtype: object
        """
        return self._call_minutes_daily_breakdown

    @call_minutes_daily_breakdown.setter
    def call_minutes_daily_breakdown(self, call_minutes_daily_breakdown):
        """Sets the call_minutes_daily_breakdown of this Metrics.


        :param call_minutes_daily_breakdown: The call_minutes_daily_breakdown of this Metrics.  # noqa: E501
        :type: object
        """
        if call_minutes_daily_breakdown is None:
            raise ValueError("Invalid value for `call_minutes_daily_breakdown`, must not be `None`")  # noqa: E501

        self._call_minutes_daily_breakdown = call_minutes_daily_breakdown

    @property
    def call_minutes_average(self):
        """Gets the call_minutes_average of this Metrics.  # noqa: E501


        :return: The call_minutes_average of this Metrics.  # noqa: E501
        :rtype: float
        """
        return self._call_minutes_average

    @call_minutes_average.setter
    def call_minutes_average(self, call_minutes_average):
        """Sets the call_minutes_average of this Metrics.


        :param call_minutes_average: The call_minutes_average of this Metrics.  # noqa: E501
        :type: float
        """
        if call_minutes_average is None:
            raise ValueError("Invalid value for `call_minutes_average`, must not be `None`")  # noqa: E501

        self._call_minutes_average = call_minutes_average

    @property
    def call_minutes_average_daily_breakdown(self):
        """Gets the call_minutes_average_daily_breakdown of this Metrics.  # noqa: E501


        :return: The call_minutes_average_daily_breakdown of this Metrics.  # noqa: E501
        :rtype: object
        """
        return self._call_minutes_average_daily_breakdown

    @call_minutes_average_daily_breakdown.setter
    def call_minutes_average_daily_breakdown(self, call_minutes_average_daily_breakdown):
        """Sets the call_minutes_average_daily_breakdown of this Metrics.


        :param call_minutes_average_daily_breakdown: The call_minutes_average_daily_breakdown of this Metrics.  # noqa: E501
        :type: object
        """
        if call_minutes_average_daily_breakdown is None:
            raise ValueError("Invalid value for `call_minutes_average_daily_breakdown`, must not be `None`")  # noqa: E501

        self._call_minutes_average_daily_breakdown = call_minutes_average_daily_breakdown

    @property
    def call_count(self):
        """Gets the call_count of this Metrics.  # noqa: E501


        :return: The call_count of this Metrics.  # noqa: E501
        :rtype: float
        """
        return self._call_count

    @call_count.setter
    def call_count(self, call_count):
        """Sets the call_count of this Metrics.


        :param call_count: The call_count of this Metrics.  # noqa: E501
        :type: float
        """
        if call_count is None:
            raise ValueError("Invalid value for `call_count`, must not be `None`")  # noqa: E501

        self._call_count = call_count

    @property
    def call_count_daily_breakdown(self):
        """Gets the call_count_daily_breakdown of this Metrics.  # noqa: E501


        :return: The call_count_daily_breakdown of this Metrics.  # noqa: E501
        :rtype: object
        """
        return self._call_count_daily_breakdown

    @call_count_daily_breakdown.setter
    def call_count_daily_breakdown(self, call_count_daily_breakdown):
        """Sets the call_count_daily_breakdown of this Metrics.


        :param call_count_daily_breakdown: The call_count_daily_breakdown of this Metrics.  # noqa: E501
        :type: object
        """
        if call_count_daily_breakdown is None:
            raise ValueError("Invalid value for `call_count_daily_breakdown`, must not be `None`")  # noqa: E501

        self._call_count_daily_breakdown = call_count_daily_breakdown

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Metrics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Metrics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
