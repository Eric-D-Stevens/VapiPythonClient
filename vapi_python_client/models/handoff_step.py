# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HandoffStep(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'block': 'OneOfHandoffStepBlock',
        'type': 'str',
        'destinations': 'list[OneOfHandoffStepDestinationsItems]',
        'name': 'str',
        'block_id': 'str',
        'input': 'object'
    }

    attribute_map = {
        'block': 'block',
        'type': 'type',
        'destinations': 'destinations',
        'name': 'name',
        'block_id': 'blockId',
        'input': 'input'
    }

    def __init__(self, block=None, type=None, destinations=None, name=None, block_id=None, input=None):  # noqa: E501
        """HandoffStep - a model defined in Swagger"""  # noqa: E501
        self._block = None
        self._type = None
        self._destinations = None
        self._name = None
        self._block_id = None
        self._input = None
        self.discriminator = None
        if block is not None:
            self.block = block
        self.type = type
        if destinations is not None:
            self.destinations = destinations
        self.name = name
        if block_id is not None:
            self.block_id = block_id
        if input is not None:
            self.input = input

    @property
    def block(self):
        """Gets the block of this HandoffStep.  # noqa: E501

        This is the block to use. To use an existing block, use `blockId`.  # noqa: E501

        :return: The block of this HandoffStep.  # noqa: E501
        :rtype: OneOfHandoffStepBlock
        """
        return self._block

    @block.setter
    def block(self, block):
        """Sets the block of this HandoffStep.

        This is the block to use. To use an existing block, use `blockId`.  # noqa: E501

        :param block: The block of this HandoffStep.  # noqa: E501
        :type: OneOfHandoffStepBlock
        """

        self._block = block

    @property
    def type(self):
        """Gets the type of this HandoffStep.  # noqa: E501

        This is a step that takes a handoff from the previous step. This means it won't return to the calling step. The workflow execution will continue linearly.  Use case: - You want to collect information linearly (e.g. a form, provide information, etc).  # noqa: E501

        :return: The type of this HandoffStep.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this HandoffStep.

        This is a step that takes a handoff from the previous step. This means it won't return to the calling step. The workflow execution will continue linearly.  Use case: - You want to collect information linearly (e.g. a form, provide information, etc).  # noqa: E501

        :param type: The type of this HandoffStep.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["handoff"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def destinations(self):
        """Gets the destinations of this HandoffStep.  # noqa: E501

        These are the destinations that the step can go to after it's done.  # noqa: E501

        :return: The destinations of this HandoffStep.  # noqa: E501
        :rtype: list[OneOfHandoffStepDestinationsItems]
        """
        return self._destinations

    @destinations.setter
    def destinations(self, destinations):
        """Sets the destinations of this HandoffStep.

        These are the destinations that the step can go to after it's done.  # noqa: E501

        :param destinations: The destinations of this HandoffStep.  # noqa: E501
        :type: list[OneOfHandoffStepDestinationsItems]
        """

        self._destinations = destinations

    @property
    def name(self):
        """Gets the name of this HandoffStep.  # noqa: E501

        This is the name of the step.  # noqa: E501

        :return: The name of this HandoffStep.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this HandoffStep.

        This is the name of the step.  # noqa: E501

        :param name: The name of this HandoffStep.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def block_id(self):
        """Gets the block_id of this HandoffStep.  # noqa: E501

        This is the id of the block to use. To use a transient block, use `block`.  # noqa: E501

        :return: The block_id of this HandoffStep.  # noqa: E501
        :rtype: str
        """
        return self._block_id

    @block_id.setter
    def block_id(self, block_id):
        """Sets the block_id of this HandoffStep.

        This is the id of the block to use. To use a transient block, use `block`.  # noqa: E501

        :param block_id: The block_id of this HandoffStep.  # noqa: E501
        :type: str
        """

        self._block_id = block_id

    @property
    def input(self):
        """Gets the input of this HandoffStep.  # noqa: E501

        This is the input to the block. You can use any key-value map as input to the block.  Example: {   \"name\": \"John Doe\",   \"age\": 20 }  You can reference any variable in the context of the current block: - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  Example: {   \"name\": \"{{my-tool-call-step.output.name}}\",   \"age\": \"{{my-tool-call-step.input.age}}\",   \"date\": \"{{workflow.input.date}}\" }  You can dynamically change the key name.  Example: {   \"{{my-tool-call-step.output.key-name-for-name}}\": \"{{name}}\",   \"{{my-tool-call-step.input.key-name-for-age}}\": \"{{age}}\",   \"{{workflow.input.key-name-for-date}}\": \"{{date}}\" }  You can represent the value as a string, number, boolean, array, or object.  Example: {   \"name\": \"john\",   \"age\": 20,   \"date\": \"2021-01-01\",   \"metadata\": {     \"unique-key\": \"{{my-tool-call-step.output.unique-key}}\"   },   \"array\": [\"A\", \"B\", \"C\"], }  # noqa: E501

        :return: The input of this HandoffStep.  # noqa: E501
        :rtype: object
        """
        return self._input

    @input.setter
    def input(self, input):
        """Sets the input of this HandoffStep.

        This is the input to the block. You can use any key-value map as input to the block.  Example: {   \"name\": \"John Doe\",   \"age\": 20 }  You can reference any variable in the context of the current block: - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  Example: {   \"name\": \"{{my-tool-call-step.output.name}}\",   \"age\": \"{{my-tool-call-step.input.age}}\",   \"date\": \"{{workflow.input.date}}\" }  You can dynamically change the key name.  Example: {   \"{{my-tool-call-step.output.key-name-for-name}}\": \"{{name}}\",   \"{{my-tool-call-step.input.key-name-for-age}}\": \"{{age}}\",   \"{{workflow.input.key-name-for-date}}\": \"{{date}}\" }  You can represent the value as a string, number, boolean, array, or object.  Example: {   \"name\": \"john\",   \"age\": 20,   \"date\": \"2021-01-01\",   \"metadata\": {     \"unique-key\": \"{{my-tool-call-step.output.unique-key}}\"   },   \"array\": [\"A\", \"B\", \"C\"], }  # noqa: E501

        :param input: The input of this HandoffStep.  # noqa: E501
        :type: object
        """

        self._input = input

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HandoffStep, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HandoffStep):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
