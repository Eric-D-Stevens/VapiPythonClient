# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class VoiceLibraryVoiceResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'voice_id': 'str',
        'name': 'str',
        'public_owner_id': 'str',
        'description': 'str',
        'gender': 'str',
        'age': 'object',
        'accent': 'str'
    }

    attribute_map = {
        'voice_id': 'voiceId',
        'name': 'name',
        'public_owner_id': 'publicOwnerId',
        'description': 'description',
        'gender': 'gender',
        'age': 'age',
        'accent': 'accent'
    }

    def __init__(self, voice_id=None, name=None, public_owner_id=None, description=None, gender=None, age=None, accent=None):  # noqa: E501
        """VoiceLibraryVoiceResponse - a model defined in Swagger"""  # noqa: E501
        self._voice_id = None
        self._name = None
        self._public_owner_id = None
        self._description = None
        self._gender = None
        self._age = None
        self._accent = None
        self.discriminator = None
        self.voice_id = voice_id
        self.name = name
        if public_owner_id is not None:
            self.public_owner_id = public_owner_id
        if description is not None:
            self.description = description
        if gender is not None:
            self.gender = gender
        if age is not None:
            self.age = age
        if accent is not None:
            self.accent = accent

    @property
    def voice_id(self):
        """Gets the voice_id of this VoiceLibraryVoiceResponse.  # noqa: E501


        :return: The voice_id of this VoiceLibraryVoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._voice_id

    @voice_id.setter
    def voice_id(self, voice_id):
        """Sets the voice_id of this VoiceLibraryVoiceResponse.


        :param voice_id: The voice_id of this VoiceLibraryVoiceResponse.  # noqa: E501
        :type: str
        """
        if voice_id is None:
            raise ValueError("Invalid value for `voice_id`, must not be `None`")  # noqa: E501

        self._voice_id = voice_id

    @property
    def name(self):
        """Gets the name of this VoiceLibraryVoiceResponse.  # noqa: E501


        :return: The name of this VoiceLibraryVoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this VoiceLibraryVoiceResponse.


        :param name: The name of this VoiceLibraryVoiceResponse.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def public_owner_id(self):
        """Gets the public_owner_id of this VoiceLibraryVoiceResponse.  # noqa: E501


        :return: The public_owner_id of this VoiceLibraryVoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._public_owner_id

    @public_owner_id.setter
    def public_owner_id(self, public_owner_id):
        """Sets the public_owner_id of this VoiceLibraryVoiceResponse.


        :param public_owner_id: The public_owner_id of this VoiceLibraryVoiceResponse.  # noqa: E501
        :type: str
        """

        self._public_owner_id = public_owner_id

    @property
    def description(self):
        """Gets the description of this VoiceLibraryVoiceResponse.  # noqa: E501


        :return: The description of this VoiceLibraryVoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this VoiceLibraryVoiceResponse.


        :param description: The description of this VoiceLibraryVoiceResponse.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def gender(self):
        """Gets the gender of this VoiceLibraryVoiceResponse.  # noqa: E501


        :return: The gender of this VoiceLibraryVoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._gender

    @gender.setter
    def gender(self, gender):
        """Sets the gender of this VoiceLibraryVoiceResponse.


        :param gender: The gender of this VoiceLibraryVoiceResponse.  # noqa: E501
        :type: str
        """

        self._gender = gender

    @property
    def age(self):
        """Gets the age of this VoiceLibraryVoiceResponse.  # noqa: E501


        :return: The age of this VoiceLibraryVoiceResponse.  # noqa: E501
        :rtype: object
        """
        return self._age

    @age.setter
    def age(self, age):
        """Sets the age of this VoiceLibraryVoiceResponse.


        :param age: The age of this VoiceLibraryVoiceResponse.  # noqa: E501
        :type: object
        """

        self._age = age

    @property
    def accent(self):
        """Gets the accent of this VoiceLibraryVoiceResponse.  # noqa: E501


        :return: The accent of this VoiceLibraryVoiceResponse.  # noqa: E501
        :rtype: str
        """
        return self._accent

    @accent.setter
    def accent(self, accent):
        """Sets the accent of this VoiceLibraryVoiceResponse.


        :param accent: The accent of this VoiceLibraryVoiceResponse.  # noqa: E501
        :type: str
        """

        self._accent = accent

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(VoiceLibraryVoiceResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, VoiceLibraryVoiceResponse):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
