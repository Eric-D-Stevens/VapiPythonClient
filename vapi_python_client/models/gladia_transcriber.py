# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class GladiaTranscriber(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'provider': 'str',
        'model': 'OneOfGladiaTranscriberModel',
        'language_behaviour': 'OneOfGladiaTranscriberLanguageBehaviour',
        'language': 'str',
        'transcription_hint': 'str',
        'prosody': 'bool',
        'audio_enhancer': 'bool'
    }

    attribute_map = {
        'provider': 'provider',
        'model': 'model',
        'language_behaviour': 'languageBehaviour',
        'language': 'language',
        'transcription_hint': 'transcriptionHint',
        'prosody': 'prosody',
        'audio_enhancer': 'audioEnhancer'
    }

    def __init__(self, provider=None, model=None, language_behaviour=None, language=None, transcription_hint=None, prosody=None, audio_enhancer=None):  # noqa: E501
        """GladiaTranscriber - a model defined in Swagger"""  # noqa: E501
        self._provider = None
        self._model = None
        self._language_behaviour = None
        self._language = None
        self._transcription_hint = None
        self._prosody = None
        self._audio_enhancer = None
        self.discriminator = None
        self.provider = provider
        if model is not None:
            self.model = model
        if language_behaviour is not None:
            self.language_behaviour = language_behaviour
        if language is not None:
            self.language = language
        if transcription_hint is not None:
            self.transcription_hint = transcription_hint
        if prosody is not None:
            self.prosody = prosody
        if audio_enhancer is not None:
            self.audio_enhancer = audio_enhancer

    @property
    def provider(self):
        """Gets the provider of this GladiaTranscriber.  # noqa: E501

        This is the transcription provider that will be used.  # noqa: E501

        :return: The provider of this GladiaTranscriber.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this GladiaTranscriber.

        This is the transcription provider that will be used.  # noqa: E501

        :param provider: The provider of this GladiaTranscriber.  # noqa: E501
        :type: str
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")  # noqa: E501
        allowed_values = ["gladia"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def model(self):
        """Gets the model of this GladiaTranscriber.  # noqa: E501

        This is the Gladia model that will be used. Default is 'fast'  # noqa: E501

        :return: The model of this GladiaTranscriber.  # noqa: E501
        :rtype: OneOfGladiaTranscriberModel
        """
        return self._model

    @model.setter
    def model(self, model):
        """Sets the model of this GladiaTranscriber.

        This is the Gladia model that will be used. Default is 'fast'  # noqa: E501

        :param model: The model of this GladiaTranscriber.  # noqa: E501
        :type: OneOfGladiaTranscriberModel
        """

        self._model = model

    @property
    def language_behaviour(self):
        """Gets the language_behaviour of this GladiaTranscriber.  # noqa: E501

        Defines how the transcription model detects the audio language. Default value is 'automatic single language'.  # noqa: E501

        :return: The language_behaviour of this GladiaTranscriber.  # noqa: E501
        :rtype: OneOfGladiaTranscriberLanguageBehaviour
        """
        return self._language_behaviour

    @language_behaviour.setter
    def language_behaviour(self, language_behaviour):
        """Sets the language_behaviour of this GladiaTranscriber.

        Defines how the transcription model detects the audio language. Default value is 'automatic single language'.  # noqa: E501

        :param language_behaviour: The language_behaviour of this GladiaTranscriber.  # noqa: E501
        :type: OneOfGladiaTranscriberLanguageBehaviour
        """

        self._language_behaviour = language_behaviour

    @property
    def language(self):
        """Gets the language of this GladiaTranscriber.  # noqa: E501

        Defines the language to use for the transcription. Required when languageBehaviour is 'manual'.  # noqa: E501

        :return: The language of this GladiaTranscriber.  # noqa: E501
        :rtype: str
        """
        return self._language

    @language.setter
    def language(self, language):
        """Sets the language of this GladiaTranscriber.

        Defines the language to use for the transcription. Required when languageBehaviour is 'manual'.  # noqa: E501

        :param language: The language of this GladiaTranscriber.  # noqa: E501
        :type: str
        """
        allowed_values = ["af", "sq", "am", "ar", "hy", "as", "az", "ba", "eu", "be", "bn", "bs", "br", "bg", "ca", "zh", "hr", "cs", "da", "nl", "en", "et", "fo", "fi", "fr", "gl", "ka", "de", "el", "gu", "ht", "ha", "haw", "he", "hi", "hu", "is", "id", "it", "ja", "jp", "jv", "kn", "kk", "km", "ko", "lo", "la", "lv", "ln", "lt", "lb", "mk", "mg", "ms", "ml", "mt", "mi", "mr", "mn", "mymr", "ne", "no", "nn", "oc", "ps", "fa", "pl", "pt", "pa", "ro", "ru", "sa", "sr", "sn", "sd", "si", "sk", "sl", "so", "es", "su", "sw", "sv", "tl", "tg", "ta", "tt", "te", "th", "bo", "tr", "tk", "uk", "ur", "uz", "vi", "cy", "yi", "yo"]  # noqa: E501
        if language not in allowed_values:
            raise ValueError(
                "Invalid value for `language` ({0}), must be one of {1}"  # noqa: E501
                .format(language, allowed_values)
            )

        self._language = language

    @property
    def transcription_hint(self):
        """Gets the transcription_hint of this GladiaTranscriber.  # noqa: E501

        Provides a custom vocabulary to the model to improve accuracy of transcribing context specific words, technical terms, names, etc. If empty, this argument is ignored. ⚠️ Warning ⚠️: Please be aware that the transcription_hint field has a character limit of 600. If you provide a transcription_hint longer than 600 characters, it will be automatically truncated to meet this limit.  # noqa: E501

        :return: The transcription_hint of this GladiaTranscriber.  # noqa: E501
        :rtype: str
        """
        return self._transcription_hint

    @transcription_hint.setter
    def transcription_hint(self, transcription_hint):
        """Sets the transcription_hint of this GladiaTranscriber.

        Provides a custom vocabulary to the model to improve accuracy of transcribing context specific words, technical terms, names, etc. If empty, this argument is ignored. ⚠️ Warning ⚠️: Please be aware that the transcription_hint field has a character limit of 600. If you provide a transcription_hint longer than 600 characters, it will be automatically truncated to meet this limit.  # noqa: E501

        :param transcription_hint: The transcription_hint of this GladiaTranscriber.  # noqa: E501
        :type: str
        """

        self._transcription_hint = transcription_hint

    @property
    def prosody(self):
        """Gets the prosody of this GladiaTranscriber.  # noqa: E501

        If prosody is true, you will get a transcription that can contain prosodies i.e. (laugh) (giggles) (malefic laugh) (toss) (music)… Default value is false.  # noqa: E501

        :return: The prosody of this GladiaTranscriber.  # noqa: E501
        :rtype: bool
        """
        return self._prosody

    @prosody.setter
    def prosody(self, prosody):
        """Sets the prosody of this GladiaTranscriber.

        If prosody is true, you will get a transcription that can contain prosodies i.e. (laugh) (giggles) (malefic laugh) (toss) (music)… Default value is false.  # noqa: E501

        :param prosody: The prosody of this GladiaTranscriber.  # noqa: E501
        :type: bool
        """

        self._prosody = prosody

    @property
    def audio_enhancer(self):
        """Gets the audio_enhancer of this GladiaTranscriber.  # noqa: E501

        If true, audio will be pre-processed to improve accuracy but latency will increase. Default value is false.  # noqa: E501

        :return: The audio_enhancer of this GladiaTranscriber.  # noqa: E501
        :rtype: bool
        """
        return self._audio_enhancer

    @audio_enhancer.setter
    def audio_enhancer(self, audio_enhancer):
        """Sets the audio_enhancer of this GladiaTranscriber.

        If true, audio will be pre-processed to improve accuracy but latency will increase. Default value is false.  # noqa: E501

        :param audio_enhancer: The audio_enhancer of this GladiaTranscriber.  # noqa: E501
        :type: bool
        """

        self._audio_enhancer = audio_enhancer

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(GladiaTranscriber, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, GladiaTranscriber):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
