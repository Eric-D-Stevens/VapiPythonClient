# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClientInboundMessageControl(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'control': 'str'
    }

    attribute_map = {
        'type': 'type',
        'control': 'control'
    }

    def __init__(self, type=None, control=None):  # noqa: E501
        """ClientInboundMessageControl - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._control = None
        self.discriminator = None
        self.type = type
        self.control = control

    @property
    def type(self):
        """Gets the type of this ClientInboundMessageControl.  # noqa: E501

        This is the type of the message. Send \"control\" message to control the assistant. `control` options are: - \"mute-assistant\" - mute the assistant - \"unmute-assistant\" - unmute the assistant - \"say-first-message\" - say the first message (this is used when video recording is enabled and the conversation is only started once the client side kicks off the recording)  # noqa: E501

        :return: The type of this ClientInboundMessageControl.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClientInboundMessageControl.

        This is the type of the message. Send \"control\" message to control the assistant. `control` options are: - \"mute-assistant\" - mute the assistant - \"unmute-assistant\" - unmute the assistant - \"say-first-message\" - say the first message (this is used when video recording is enabled and the conversation is only started once the client side kicks off the recording)  # noqa: E501

        :param type: The type of this ClientInboundMessageControl.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["control"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def control(self):
        """Gets the control of this ClientInboundMessageControl.  # noqa: E501

        This is the control action  # noqa: E501

        :return: The control of this ClientInboundMessageControl.  # noqa: E501
        :rtype: str
        """
        return self._control

    @control.setter
    def control(self, control):
        """Sets the control of this ClientInboundMessageControl.

        This is the control action  # noqa: E501

        :param control: The control of this ClientInboundMessageControl.  # noqa: E501
        :type: str
        """
        if control is None:
            raise ValueError("Invalid value for `control`, must not be `None`")  # noqa: E501
        allowed_values = ["mute-assistant", "unmute-assistant", "say-first-message"]  # noqa: E501
        if control not in allowed_values:
            raise ValueError(
                "Invalid value for `control` ({0}), must be one of {1}"  # noqa: E501
                .format(control, allowed_values)
            )

        self._control = control

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClientInboundMessageControl, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClientInboundMessageControl):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
