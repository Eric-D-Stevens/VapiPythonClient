# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ToolCallResult(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'message': 'list[OneOfToolCallResultMessageItems]',
        'name': 'str',
        'tool_call_id': 'str',
        'result': 'str',
        'error': 'str'
    }

    attribute_map = {
        'message': 'message',
        'name': 'name',
        'tool_call_id': 'toolCallId',
        'result': 'result',
        'error': 'error'
    }

    def __init__(self, message=None, name=None, tool_call_id=None, result=None, error=None):  # noqa: E501
        """ToolCallResult - a model defined in Swagger"""  # noqa: E501
        self._message = None
        self._name = None
        self._tool_call_id = None
        self._result = None
        self._error = None
        self.discriminator = None
        if message is not None:
            self.message = message
        self.name = name
        self.tool_call_id = tool_call_id
        if result is not None:
            self.result = result
        if error is not None:
            self.error = error

    @property
    def message(self):
        """Gets the message of this ToolCallResult.  # noqa: E501

        This is the message that will be spoken to the user.  If this is not returned, assistant will speak: 1. a `request-complete` or `request-failed` message from `tool.messages`, if it exists 2. a response generated by the model, if not  # noqa: E501

        :return: The message of this ToolCallResult.  # noqa: E501
        :rtype: list[OneOfToolCallResultMessageItems]
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this ToolCallResult.

        This is the message that will be spoken to the user.  If this is not returned, assistant will speak: 1. a `request-complete` or `request-failed` message from `tool.messages`, if it exists 2. a response generated by the model, if not  # noqa: E501

        :param message: The message of this ToolCallResult.  # noqa: E501
        :type: list[OneOfToolCallResultMessageItems]
        """

        self._message = message

    @property
    def name(self):
        """Gets the name of this ToolCallResult.  # noqa: E501

        This is the name of the function the model called.  # noqa: E501

        :return: The name of this ToolCallResult.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ToolCallResult.

        This is the name of the function the model called.  # noqa: E501

        :param name: The name of this ToolCallResult.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def tool_call_id(self):
        """Gets the tool_call_id of this ToolCallResult.  # noqa: E501

        This is the unique identifier for the tool call.  # noqa: E501

        :return: The tool_call_id of this ToolCallResult.  # noqa: E501
        :rtype: str
        """
        return self._tool_call_id

    @tool_call_id.setter
    def tool_call_id(self, tool_call_id):
        """Sets the tool_call_id of this ToolCallResult.

        This is the unique identifier for the tool call.  # noqa: E501

        :param tool_call_id: The tool_call_id of this ToolCallResult.  # noqa: E501
        :type: str
        """
        if tool_call_id is None:
            raise ValueError("Invalid value for `tool_call_id`, must not be `None`")  # noqa: E501

        self._tool_call_id = tool_call_id

    @property
    def result(self):
        """Gets the result of this ToolCallResult.  # noqa: E501

        This is the result if the tool call was successful. This is added to the conversation history.  Further, if this is returned, assistant will speak: 1. the `message`, if it exists and is of type `request-complete` 2. a `request-complete` message from `tool.messages`, if it exists 3. a response generated by the model, if neither exist  # noqa: E501

        :return: The result of this ToolCallResult.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ToolCallResult.

        This is the result if the tool call was successful. This is added to the conversation history.  Further, if this is returned, assistant will speak: 1. the `message`, if it exists and is of type `request-complete` 2. a `request-complete` message from `tool.messages`, if it exists 3. a response generated by the model, if neither exist  # noqa: E501

        :param result: The result of this ToolCallResult.  # noqa: E501
        :type: str
        """

        self._result = result

    @property
    def error(self):
        """Gets the error of this ToolCallResult.  # noqa: E501

        This is the error if the tool call was not successful. This is added to the conversation history.  Further, if this is returned, assistant will speak: 1. the `message`, if it exists and is of type `request-failed` 2. a `request-failed` message from `tool.messages`, if it exists 3. a response generated by the model, if neither exist  # noqa: E501

        :return: The error of this ToolCallResult.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this ToolCallResult.

        This is the error if the tool call was not successful. This is added to the conversation history.  Further, if this is returned, assistant will speak: 1. the `message`, if it exists and is of type `request-failed` 2. a `request-failed` message from `tool.messages`, if it exists 3. a response generated by the model, if neither exist  # noqa: E501

        :param error: The error of this ToolCallResult.  # noqa: E501
        :type: str
        """

        self._error = error

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ToolCallResult, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ToolCallResult):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
