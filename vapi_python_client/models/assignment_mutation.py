# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssignmentMutation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'conditions': 'list[OneOfAssignmentMutationConditionsItems]',
        'type': 'str',
        'variable': 'str',
        'value': 'str'
    }

    attribute_map = {
        'conditions': 'conditions',
        'type': 'type',
        'variable': 'variable',
        'value': 'value'
    }

    def __init__(self, conditions=None, type=None, variable=None, value=None):  # noqa: E501
        """AssignmentMutation - a model defined in Swagger"""  # noqa: E501
        self._conditions = None
        self._type = None
        self._variable = None
        self._value = None
        self.discriminator = None
        if conditions is not None:
            self.conditions = conditions
        self.type = type
        self.variable = variable
        self.value = value

    @property
    def conditions(self):
        """Gets the conditions of this AssignmentMutation.  # noqa: E501

        This is an optional array of conditions that must be met for this mutation to be triggered.  # noqa: E501

        :return: The conditions of this AssignmentMutation.  # noqa: E501
        :rtype: list[OneOfAssignmentMutationConditionsItems]
        """
        return self._conditions

    @conditions.setter
    def conditions(self, conditions):
        """Sets the conditions of this AssignmentMutation.

        This is an optional array of conditions that must be met for this mutation to be triggered.  # noqa: E501

        :param conditions: The conditions of this AssignmentMutation.  # noqa: E501
        :type: list[OneOfAssignmentMutationConditionsItems]
        """

        self._conditions = conditions

    @property
    def type(self):
        """Gets the type of this AssignmentMutation.  # noqa: E501

        This mutation assigns a new value to an existing or new variable.  # noqa: E501

        :return: The type of this AssignmentMutation.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this AssignmentMutation.

        This mutation assigns a new value to an existing or new variable.  # noqa: E501

        :param type: The type of this AssignmentMutation.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["assignment"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def variable(self):
        """Gets the variable of this AssignmentMutation.  # noqa: E501

        This is the variable to assign a new value to.  You can reference any variable in the context of the current block execution (step): - \"output.your-property-name\" for current step's output - \"your-step-name.output.your-property-name\" for another step's output (in the same workflow) - \"global.your-property-name\" for the global context  This needs to be the key path of the variable. If you use {{}}, it'll dereference that to the value of the variable before assignment. This can be useful if the path is dynamic. Example: - \"global.{{my-tool-call-step.output.my-key-name}}\"  You can also string interpolate multiple variables to get the key name: - \"global.{{my-tool-call-step.output.my-key-name-suffix}}-{{my-tool-call-step.output.my-key-name}}\"  The path to the new variable is created if it doesn't exist. Example: - \"global.this-does-not-exist.neither-does-this\" will create `this-does-not-exist` object with `neither-does-this` as a key  # noqa: E501

        :return: The variable of this AssignmentMutation.  # noqa: E501
        :rtype: str
        """
        return self._variable

    @variable.setter
    def variable(self, variable):
        """Sets the variable of this AssignmentMutation.

        This is the variable to assign a new value to.  You can reference any variable in the context of the current block execution (step): - \"output.your-property-name\" for current step's output - \"your-step-name.output.your-property-name\" for another step's output (in the same workflow) - \"global.your-property-name\" for the global context  This needs to be the key path of the variable. If you use {{}}, it'll dereference that to the value of the variable before assignment. This can be useful if the path is dynamic. Example: - \"global.{{my-tool-call-step.output.my-key-name}}\"  You can also string interpolate multiple variables to get the key name: - \"global.{{my-tool-call-step.output.my-key-name-suffix}}-{{my-tool-call-step.output.my-key-name}}\"  The path to the new variable is created if it doesn't exist. Example: - \"global.this-does-not-exist.neither-does-this\" will create `this-does-not-exist` object with `neither-does-this` as a key  # noqa: E501

        :param variable: The variable of this AssignmentMutation.  # noqa: E501
        :type: str
        """
        if variable is None:
            raise ValueError("Invalid value for `variable`, must not be `None`")  # noqa: E501

        self._variable = variable

    @property
    def value(self):
        """Gets the value of this AssignmentMutation.  # noqa: E501

        The value to assign to the variable.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{global.your-property-name}}\" for the global context  Or, you can use a constant: - \"1\" - \"text\" - \"true\" - \"false\"  Or, you can mix and match with string interpolation: - \"{{your-property-name}}-{{input.your-property-name-2}}-1\"  # noqa: E501

        :return: The value of this AssignmentMutation.  # noqa: E501
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """Sets the value of this AssignmentMutation.

        The value to assign to the variable.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{global.your-property-name}}\" for the global context  Or, you can use a constant: - \"1\" - \"text\" - \"true\" - \"false\"  Or, you can mix and match with string interpolation: - \"{{your-property-name}}-{{input.your-property-name-2}}-1\"  # noqa: E501

        :param value: The value of this AssignmentMutation.  # noqa: E501
        :type: str
        """
        if value is None:
            raise ValueError("Invalid value for `value`, must not be `None`")  # noqa: E501

        self._value = value

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssignmentMutation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssignmentMutation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
