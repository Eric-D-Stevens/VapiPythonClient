# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CallLogPrivileged(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'call_id': 'str',
        'org_id': 'str',
        'log': 'str',
        'level': 'str',
        'time': 'datetime'
    }

    attribute_map = {
        'call_id': 'callId',
        'org_id': 'orgId',
        'log': 'log',
        'level': 'level',
        'time': 'time'
    }

    def __init__(self, call_id=None, org_id=None, log=None, level=None, time=None):  # noqa: E501
        """CallLogPrivileged - a model defined in Swagger"""  # noqa: E501
        self._call_id = None
        self._org_id = None
        self._log = None
        self._level = None
        self._time = None
        self.discriminator = None
        self.call_id = call_id
        self.org_id = org_id
        self.log = log
        self.level = level
        self.time = time

    @property
    def call_id(self):
        """Gets the call_id of this CallLogPrivileged.  # noqa: E501

        This is the unique identifier for the call.  # noqa: E501

        :return: The call_id of this CallLogPrivileged.  # noqa: E501
        :rtype: str
        """
        return self._call_id

    @call_id.setter
    def call_id(self, call_id):
        """Sets the call_id of this CallLogPrivileged.

        This is the unique identifier for the call.  # noqa: E501

        :param call_id: The call_id of this CallLogPrivileged.  # noqa: E501
        :type: str
        """
        if call_id is None:
            raise ValueError("Invalid value for `call_id`, must not be `None`")  # noqa: E501

        self._call_id = call_id

    @property
    def org_id(self):
        """Gets the org_id of this CallLogPrivileged.  # noqa: E501

        This is the unique identifier for the org that this call log belongs to.  # noqa: E501

        :return: The org_id of this CallLogPrivileged.  # noqa: E501
        :rtype: str
        """
        return self._org_id

    @org_id.setter
    def org_id(self, org_id):
        """Sets the org_id of this CallLogPrivileged.

        This is the unique identifier for the org that this call log belongs to.  # noqa: E501

        :param org_id: The org_id of this CallLogPrivileged.  # noqa: E501
        :type: str
        """
        if org_id is None:
            raise ValueError("Invalid value for `org_id`, must not be `None`")  # noqa: E501

        self._org_id = org_id

    @property
    def log(self):
        """Gets the log of this CallLogPrivileged.  # noqa: E501

        This is the log message associated with the call.  # noqa: E501

        :return: The log of this CallLogPrivileged.  # noqa: E501
        :rtype: str
        """
        return self._log

    @log.setter
    def log(self, log):
        """Sets the log of this CallLogPrivileged.

        This is the log message associated with the call.  # noqa: E501

        :param log: The log of this CallLogPrivileged.  # noqa: E501
        :type: str
        """
        if log is None:
            raise ValueError("Invalid value for `log`, must not be `None`")  # noqa: E501

        self._log = log

    @property
    def level(self):
        """Gets the level of this CallLogPrivileged.  # noqa: E501

        This is the level of the log message.  # noqa: E501

        :return: The level of this CallLogPrivileged.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CallLogPrivileged.

        This is the level of the log message.  # noqa: E501

        :param level: The level of this CallLogPrivileged.  # noqa: E501
        :type: str
        """
        if level is None:
            raise ValueError("Invalid value for `level`, must not be `None`")  # noqa: E501
        allowed_values = ["INFO", "LOG", "WARN", "ERROR", "CHECKPOINT"]  # noqa: E501
        if level not in allowed_values:
            raise ValueError(
                "Invalid value for `level` ({0}), must be one of {1}"  # noqa: E501
                .format(level, allowed_values)
            )

        self._level = level

    @property
    def time(self):
        """Gets the time of this CallLogPrivileged.  # noqa: E501

        This is the ISO 8601 date-time string of when the log was created.  # noqa: E501

        :return: The time of this CallLogPrivileged.  # noqa: E501
        :rtype: datetime
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this CallLogPrivileged.

        This is the ISO 8601 date-time string of when the log was created.  # noqa: E501

        :param time: The time of this CallLogPrivileged.  # noqa: E501
        :type: datetime
        """
        if time is None:
            raise ValueError("Invalid value for `time`, must not be `None`")  # noqa: E501

        self._time = time

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CallLogPrivileged, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CallLogPrivileged):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
