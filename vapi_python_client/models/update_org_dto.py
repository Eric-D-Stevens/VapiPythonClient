# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateOrgDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'hipaa_enabled': 'bool',
        'name': 'str',
        'billing_limit': 'float',
        'server_url': 'str',
        'server_url_secret': 'str',
        'concurrency_limit': 'float'
    }

    attribute_map = {
        'hipaa_enabled': 'hipaaEnabled',
        'name': 'name',
        'billing_limit': 'billingLimit',
        'server_url': 'serverUrl',
        'server_url_secret': 'serverUrlSecret',
        'concurrency_limit': 'concurrencyLimit'
    }

    def __init__(self, hipaa_enabled=None, name=None, billing_limit=None, server_url=None, server_url_secret=None, concurrency_limit=None):  # noqa: E501
        """UpdateOrgDTO - a model defined in Swagger"""  # noqa: E501
        self._hipaa_enabled = None
        self._name = None
        self._billing_limit = None
        self._server_url = None
        self._server_url_secret = None
        self._concurrency_limit = None
        self.discriminator = None
        if hipaa_enabled is not None:
            self.hipaa_enabled = hipaa_enabled
        if name is not None:
            self.name = name
        if billing_limit is not None:
            self.billing_limit = billing_limit
        if server_url is not None:
            self.server_url = server_url
        if server_url_secret is not None:
            self.server_url_secret = server_url_secret
        if concurrency_limit is not None:
            self.concurrency_limit = concurrency_limit

    @property
    def hipaa_enabled(self):
        """Gets the hipaa_enabled of this UpdateOrgDTO.  # noqa: E501

        When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false. When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively. This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.  # noqa: E501

        :return: The hipaa_enabled of this UpdateOrgDTO.  # noqa: E501
        :rtype: bool
        """
        return self._hipaa_enabled

    @hipaa_enabled.setter
    def hipaa_enabled(self, hipaa_enabled):
        """Sets the hipaa_enabled of this UpdateOrgDTO.

        When this is enabled, no logs, recordings, or transcriptions will be stored. At the end of the call, you will still receive an end-of-call-report message to store on your server. Defaults to false. When HIPAA is enabled, only OpenAI/Custom LLM or Azure Providers will be available for LLM and Voice respectively. This is due to the compliance requirements of HIPAA. Other providers may not meet these requirements.  # noqa: E501

        :param hipaa_enabled: The hipaa_enabled of this UpdateOrgDTO.  # noqa: E501
        :type: bool
        """

        self._hipaa_enabled = hipaa_enabled

    @property
    def name(self):
        """Gets the name of this UpdateOrgDTO.  # noqa: E501

        This is the name of the org. This is just for your own reference.  # noqa: E501

        :return: The name of this UpdateOrgDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateOrgDTO.

        This is the name of the org. This is just for your own reference.  # noqa: E501

        :param name: The name of this UpdateOrgDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def billing_limit(self):
        """Gets the billing_limit of this UpdateOrgDTO.  # noqa: E501

        This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.  # noqa: E501

        :return: The billing_limit of this UpdateOrgDTO.  # noqa: E501
        :rtype: float
        """
        return self._billing_limit

    @billing_limit.setter
    def billing_limit(self, billing_limit):
        """Sets the billing_limit of this UpdateOrgDTO.

        This is the monthly billing limit for the org. To go beyond $1000/mo, please contact us at support@vapi.ai.  # noqa: E501

        :param billing_limit: The billing_limit of this UpdateOrgDTO.  # noqa: E501
        :type: float
        """

        self._billing_limit = billing_limit

    @property
    def server_url(self):
        """Gets the server_url of this UpdateOrgDTO.  # noqa: E501

        This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.  All requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.  # noqa: E501

        :return: The server_url of this UpdateOrgDTO.  # noqa: E501
        :rtype: str
        """
        return self._server_url

    @server_url.setter
    def server_url(self, server_url):
        """Sets the server_url of this UpdateOrgDTO.

        This is the URL Vapi will communicate with via HTTP GET and POST Requests. This is used for retrieving context, function calling, and end-of-call reports.  All requests will be sent with the call object among other things relevant to that message. You can find more details in the Server URL documentation.  # noqa: E501

        :param server_url: The server_url of this UpdateOrgDTO.  # noqa: E501
        :type: str
        """

        self._server_url = server_url

    @property
    def server_url_secret(self):
        """Gets the server_url_secret of this UpdateOrgDTO.  # noqa: E501

        This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.  # noqa: E501

        :return: The server_url_secret of this UpdateOrgDTO.  # noqa: E501
        :rtype: str
        """
        return self._server_url_secret

    @server_url_secret.setter
    def server_url_secret(self, server_url_secret):
        """Sets the server_url_secret of this UpdateOrgDTO.

        This is the secret you can set that Vapi will send with every request to your server. Will be sent as a header called x-vapi-secret.  # noqa: E501

        :param server_url_secret: The server_url_secret of this UpdateOrgDTO.  # noqa: E501
        :type: str
        """

        self._server_url_secret = server_url_secret

    @property
    def concurrency_limit(self):
        """Gets the concurrency_limit of this UpdateOrgDTO.  # noqa: E501

        This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.  # noqa: E501

        :return: The concurrency_limit of this UpdateOrgDTO.  # noqa: E501
        :rtype: float
        """
        return self._concurrency_limit

    @concurrency_limit.setter
    def concurrency_limit(self, concurrency_limit):
        """Sets the concurrency_limit of this UpdateOrgDTO.

        This is the concurrency limit for the org. This is the maximum number of calls that can be active at any given time. To go beyond 10, please contact us at support@vapi.ai.  # noqa: E501

        :param concurrency_limit: The concurrency_limit of this UpdateOrgDTO.  # noqa: E501
        :type: float
        """

        self._concurrency_limit = concurrency_limit

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateOrgDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateOrgDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
