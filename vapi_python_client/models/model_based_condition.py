# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ModelBasedCondition(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'instruction': 'str'
    }

    attribute_map = {
        'type': 'type',
        'instruction': 'instruction'
    }

    def __init__(self, type=None, instruction=None):  # noqa: E501
        """ModelBasedCondition - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._instruction = None
        self.discriminator = None
        self.type = type
        self.instruction = instruction

    @property
    def type(self):
        """Gets the type of this ModelBasedCondition.  # noqa: E501

        This condition is based on a model.  # noqa: E501

        :return: The type of this ModelBasedCondition.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ModelBasedCondition.

        This condition is based on a model.  # noqa: E501

        :param type: The type of this ModelBasedCondition.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["model-based"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def instruction(self):
        """Gets the instruction of this ModelBasedCondition.  # noqa: E501

        This is the instruction which should output a boolean value when passed to a model.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{input.your-property-name}}\" for current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  You can also talk about the current step's output or input directly: - \"{{output.your-property-name}} is greater than 10\" - \"{{input.your-property-name}} is greater than 10\"  Examples:  - \"{{input.age}} is greater than 10\"  - \"{{input.age}} is greater than {{input.age2}}\"  - \"{{output.age}} is greater than 10\"  # noqa: E501

        :return: The instruction of this ModelBasedCondition.  # noqa: E501
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this ModelBasedCondition.

        This is the instruction which should output a boolean value when passed to a model.  You can reference any variable in the context of the current block execution (step): - \"{{output.your-property-name}}\" for current step's output - \"{{input.your-property-name}}\" for current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  You can also talk about the current step's output or input directly: - \"{{output.your-property-name}} is greater than 10\" - \"{{input.your-property-name}} is greater than 10\"  Examples:  - \"{{input.age}} is greater than 10\"  - \"{{input.age}} is greater than {{input.age2}}\"  - \"{{output.age}} is greater than 10\"  # noqa: E501

        :param instruction: The instruction of this ModelBasedCondition.  # noqa: E501
        :type: str
        """
        if instruction is None:
            raise ValueError("Invalid value for `instruction`, must not be `None`")  # noqa: E501

        self._instruction = instruction

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ModelBasedCondition, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ModelBasedCondition):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
