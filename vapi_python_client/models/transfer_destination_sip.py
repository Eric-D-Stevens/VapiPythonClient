# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TransferDestinationSip(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'type': 'str',
        'sip_uri': 'str',
        'message': 'str',
        'description': 'str'
    }

    attribute_map = {
        'type': 'type',
        'sip_uri': 'sipUri',
        'message': 'message',
        'description': 'description'
    }

    def __init__(self, type=None, sip_uri=None, message=None, description=None):  # noqa: E501
        """TransferDestinationSip - a model defined in Swagger"""  # noqa: E501
        self._type = None
        self._sip_uri = None
        self._message = None
        self._description = None
        self.discriminator = None
        self.type = type
        self.sip_uri = sip_uri
        if message is not None:
            self.message = message
        if description is not None:
            self.description = description

    @property
    def type(self):
        """Gets the type of this TransferDestinationSip.  # noqa: E501


        :return: The type of this TransferDestinationSip.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TransferDestinationSip.


        :param type: The type of this TransferDestinationSip.  # noqa: E501
        :type: str
        """
        if type is None:
            raise ValueError("Invalid value for `type`, must not be `None`")  # noqa: E501
        allowed_values = ["sip"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def sip_uri(self):
        """Gets the sip_uri of this TransferDestinationSip.  # noqa: E501

        This is the SIP URI to transfer the call to.  # noqa: E501

        :return: The sip_uri of this TransferDestinationSip.  # noqa: E501
        :rtype: str
        """
        return self._sip_uri

    @sip_uri.setter
    def sip_uri(self, sip_uri):
        """Sets the sip_uri of this TransferDestinationSip.

        This is the SIP URI to transfer the call to.  # noqa: E501

        :param sip_uri: The sip_uri of this TransferDestinationSip.  # noqa: E501
        :type: str
        """
        if sip_uri is None:
            raise ValueError("Invalid value for `sip_uri`, must not be `None`")  # noqa: E501

        self._sip_uri = sip_uri

    @property
    def message(self):
        """Gets the message of this TransferDestinationSip.  # noqa: E501

        This is the message to say before transferring the call to the destination.  If this is not provided and transfer tool messages is not provided, default is \"Transferring the call now\".  If set to \"\", nothing is spoken. This is useful when you want to silently transfer. This is especially useful when transferring between assistants in a squad. In this scenario, you likely also want to set `assistant.firstMessageMode=assistant-speaks-first-with-model-generated-message` for the destination assistant.  # noqa: E501

        :return: The message of this TransferDestinationSip.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this TransferDestinationSip.

        This is the message to say before transferring the call to the destination.  If this is not provided and transfer tool messages is not provided, default is \"Transferring the call now\".  If set to \"\", nothing is spoken. This is useful when you want to silently transfer. This is especially useful when transferring between assistants in a squad. In this scenario, you likely also want to set `assistant.firstMessageMode=assistant-speaks-first-with-model-generated-message` for the destination assistant.  # noqa: E501

        :param message: The message of this TransferDestinationSip.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def description(self):
        """Gets the description of this TransferDestinationSip.  # noqa: E501

        This is the description of the destination, used by the AI to choose when and how to transfer the call.  # noqa: E501

        :return: The description of this TransferDestinationSip.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this TransferDestinationSip.

        This is the description of the destination, used by the AI to choose when and how to transfer the call.  # noqa: E501

        :param description: The description of this TransferDestinationSip.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TransferDestinationSip, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TransferDestinationSip):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
