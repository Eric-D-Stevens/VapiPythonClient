# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class SquadMemberDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'assistant_id': 'str',
        'assistant': 'AllOfSquadMemberDTOAssistant',
        'assistant_overrides': 'AllOfSquadMemberDTOAssistantOverrides',
        'assistant_destinations': 'list[TransferDestinationAssistant]'
    }

    attribute_map = {
        'assistant_id': 'assistantId',
        'assistant': 'assistant',
        'assistant_overrides': 'assistantOverrides',
        'assistant_destinations': 'assistantDestinations'
    }

    def __init__(self, assistant_id=None, assistant=None, assistant_overrides=None, assistant_destinations=None):  # noqa: E501
        """SquadMemberDTO - a model defined in Swagger"""  # noqa: E501
        self._assistant_id = None
        self._assistant = None
        self._assistant_overrides = None
        self._assistant_destinations = None
        self.discriminator = None
        if assistant_id is not None:
            self.assistant_id = assistant_id
        if assistant is not None:
            self.assistant = assistant
        if assistant_overrides is not None:
            self.assistant_overrides = assistant_overrides
        if assistant_destinations is not None:
            self.assistant_destinations = assistant_destinations

    @property
    def assistant_id(self):
        """Gets the assistant_id of this SquadMemberDTO.  # noqa: E501

        This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.  # noqa: E501

        :return: The assistant_id of this SquadMemberDTO.  # noqa: E501
        :rtype: str
        """
        return self._assistant_id

    @assistant_id.setter
    def assistant_id(self, assistant_id):
        """Sets the assistant_id of this SquadMemberDTO.

        This is the assistant that will be used for the call. To use a transient assistant, use `assistant` instead.  # noqa: E501

        :param assistant_id: The assistant_id of this SquadMemberDTO.  # noqa: E501
        :type: str
        """

        self._assistant_id = assistant_id

    @property
    def assistant(self):
        """Gets the assistant of this SquadMemberDTO.  # noqa: E501

        This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.  # noqa: E501

        :return: The assistant of this SquadMemberDTO.  # noqa: E501
        :rtype: AllOfSquadMemberDTOAssistant
        """
        return self._assistant

    @assistant.setter
    def assistant(self, assistant):
        """Sets the assistant of this SquadMemberDTO.

        This is the assistant that will be used for the call. To use an existing assistant, use `assistantId` instead.  # noqa: E501

        :param assistant: The assistant of this SquadMemberDTO.  # noqa: E501
        :type: AllOfSquadMemberDTOAssistant
        """

        self._assistant = assistant

    @property
    def assistant_overrides(self):
        """Gets the assistant_overrides of this SquadMemberDTO.  # noqa: E501

        This can be used to override the assistant's settings and provide values for it's template variables.  # noqa: E501

        :return: The assistant_overrides of this SquadMemberDTO.  # noqa: E501
        :rtype: AllOfSquadMemberDTOAssistantOverrides
        """
        return self._assistant_overrides

    @assistant_overrides.setter
    def assistant_overrides(self, assistant_overrides):
        """Sets the assistant_overrides of this SquadMemberDTO.

        This can be used to override the assistant's settings and provide values for it's template variables.  # noqa: E501

        :param assistant_overrides: The assistant_overrides of this SquadMemberDTO.  # noqa: E501
        :type: AllOfSquadMemberDTOAssistantOverrides
        """

        self._assistant_overrides = assistant_overrides

    @property
    def assistant_destinations(self):
        """Gets the assistant_destinations of this SquadMemberDTO.  # noqa: E501

        These are the others assistants that this assistant can transfer to.  If the assistant already has transfer call tool, these destinations are just appended to existing ones.  # noqa: E501

        :return: The assistant_destinations of this SquadMemberDTO.  # noqa: E501
        :rtype: list[TransferDestinationAssistant]
        """
        return self._assistant_destinations

    @assistant_destinations.setter
    def assistant_destinations(self, assistant_destinations):
        """Sets the assistant_destinations of this SquadMemberDTO.

        These are the others assistants that this assistant can transfer to.  If the assistant already has transfer call tool, these destinations are just appended to existing ones.  # noqa: E501

        :param assistant_destinations: The assistant_destinations of this SquadMemberDTO.  # noqa: E501
        :type: list[TransferDestinationAssistant]
        """

        self._assistant_destinations = assistant_destinations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SquadMemberDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SquadMemberDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
