# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AnalyticsQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'table': 'str',
        'group_by': 'list[str]',
        'name': 'str',
        'time_range': 'AllOfAnalyticsQueryTimeRange',
        'operations': 'list[AnalyticsOperation]'
    }

    attribute_map = {
        'table': 'table',
        'group_by': 'groupBy',
        'name': 'name',
        'time_range': 'timeRange',
        'operations': 'operations'
    }

    def __init__(self, table=None, group_by=None, name=None, time_range=None, operations=None):  # noqa: E501
        """AnalyticsQuery - a model defined in Swagger"""  # noqa: E501
        self._table = None
        self._group_by = None
        self._name = None
        self._time_range = None
        self._operations = None
        self.discriminator = None
        self.table = table
        if group_by is not None:
            self.group_by = group_by
        self.name = name
        if time_range is not None:
            self.time_range = time_range
        self.operations = operations

    @property
    def table(self):
        """Gets the table of this AnalyticsQuery.  # noqa: E501

        This is the table you want to query.  # noqa: E501

        :return: The table of this AnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._table

    @table.setter
    def table(self, table):
        """Sets the table of this AnalyticsQuery.

        This is the table you want to query.  # noqa: E501

        :param table: The table of this AnalyticsQuery.  # noqa: E501
        :type: str
        """
        if table is None:
            raise ValueError("Invalid value for `table`, must not be `None`")  # noqa: E501
        allowed_values = ["call"]  # noqa: E501
        if table not in allowed_values:
            raise ValueError(
                "Invalid value for `table` ({0}), must be one of {1}"  # noqa: E501
                .format(table, allowed_values)
            )

        self._table = table

    @property
    def group_by(self):
        """Gets the group_by of this AnalyticsQuery.  # noqa: E501

        This is the list of columns you want to group by.  # noqa: E501

        :return: The group_by of this AnalyticsQuery.  # noqa: E501
        :rtype: list[str]
        """
        return self._group_by

    @group_by.setter
    def group_by(self, group_by):
        """Sets the group_by of this AnalyticsQuery.

        This is the list of columns you want to group by.  # noqa: E501

        :param group_by: The group_by of this AnalyticsQuery.  # noqa: E501
        :type: list[str]
        """
        allowed_values = ["type", "assistantId", "endedReason", "analysis.successEvaluation", "status"]  # noqa: E501
        if not set(group_by).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `group_by` [{0}], must be a subset of [{1}]"  # noqa: E501
                .format(", ".join(map(str, set(group_by) - set(allowed_values))),  # noqa: E501
                        ", ".join(map(str, allowed_values)))
            )

        self._group_by = group_by

    @property
    def name(self):
        """Gets the name of this AnalyticsQuery.  # noqa: E501

        This is the name of the query. This will be used to identify the query in the response.  # noqa: E501

        :return: The name of this AnalyticsQuery.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AnalyticsQuery.

        This is the name of the query. This will be used to identify the query in the response.  # noqa: E501

        :param name: The name of this AnalyticsQuery.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def time_range(self):
        """Gets the time_range of this AnalyticsQuery.  # noqa: E501

        This is the time range for the query.  # noqa: E501

        :return: The time_range of this AnalyticsQuery.  # noqa: E501
        :rtype: AllOfAnalyticsQueryTimeRange
        """
        return self._time_range

    @time_range.setter
    def time_range(self, time_range):
        """Sets the time_range of this AnalyticsQuery.

        This is the time range for the query.  # noqa: E501

        :param time_range: The time_range of this AnalyticsQuery.  # noqa: E501
        :type: AllOfAnalyticsQueryTimeRange
        """

        self._time_range = time_range

    @property
    def operations(self):
        """Gets the operations of this AnalyticsQuery.  # noqa: E501

        This is the list of operations you want to perform.  # noqa: E501

        :return: The operations of this AnalyticsQuery.  # noqa: E501
        :rtype: list[AnalyticsOperation]
        """
        return self._operations

    @operations.setter
    def operations(self, operations):
        """Sets the operations of this AnalyticsQuery.

        This is the list of operations you want to perform.  # noqa: E501

        :param operations: The operations of this AnalyticsQuery.  # noqa: E501
        :type: list[AnalyticsOperation]
        """
        if operations is None:
            raise ValueError("Invalid value for `operations`, must not be `None`")  # noqa: E501

        self._operations = operations

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AnalyticsQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AnalyticsQuery):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
