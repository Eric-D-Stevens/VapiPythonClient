# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TokenRestrictions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'enabled': 'bool',
        'allowed_origins': 'list[str]',
        'allowed_assistant_ids': 'list[str]',
        'allow_transient_assistant': 'bool'
    }

    attribute_map = {
        'enabled': 'enabled',
        'allowed_origins': 'allowedOrigins',
        'allowed_assistant_ids': 'allowedAssistantIds',
        'allow_transient_assistant': 'allowTransientAssistant'
    }

    def __init__(self, enabled=None, allowed_origins=None, allowed_assistant_ids=None, allow_transient_assistant=None):  # noqa: E501
        """TokenRestrictions - a model defined in Swagger"""  # noqa: E501
        self._enabled = None
        self._allowed_origins = None
        self._allowed_assistant_ids = None
        self._allow_transient_assistant = None
        self.discriminator = None
        if enabled is not None:
            self.enabled = enabled
        if allowed_origins is not None:
            self.allowed_origins = allowed_origins
        if allowed_assistant_ids is not None:
            self.allowed_assistant_ids = allowed_assistant_ids
        if allow_transient_assistant is not None:
            self.allow_transient_assistant = allow_transient_assistant

    @property
    def enabled(self):
        """Gets the enabled of this TokenRestrictions.  # noqa: E501

        This determines whether the token is enabled or disabled. Default is true, it's enabled.  # noqa: E501

        :return: The enabled of this TokenRestrictions.  # noqa: E501
        :rtype: bool
        """
        return self._enabled

    @enabled.setter
    def enabled(self, enabled):
        """Sets the enabled of this TokenRestrictions.

        This determines whether the token is enabled or disabled. Default is true, it's enabled.  # noqa: E501

        :param enabled: The enabled of this TokenRestrictions.  # noqa: E501
        :type: bool
        """

        self._enabled = enabled

    @property
    def allowed_origins(self):
        """Gets the allowed_origins of this TokenRestrictions.  # noqa: E501

        This determines the allowed origins for this token. Validates the `Origin` header. Default is any origin.  Only relevant for `public` tokens.  # noqa: E501

        :return: The allowed_origins of this TokenRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_origins

    @allowed_origins.setter
    def allowed_origins(self, allowed_origins):
        """Sets the allowed_origins of this TokenRestrictions.

        This determines the allowed origins for this token. Validates the `Origin` header. Default is any origin.  Only relevant for `public` tokens.  # noqa: E501

        :param allowed_origins: The allowed_origins of this TokenRestrictions.  # noqa: E501
        :type: list[str]
        """

        self._allowed_origins = allowed_origins

    @property
    def allowed_assistant_ids(self):
        """Gets the allowed_assistant_ids of this TokenRestrictions.  # noqa: E501

        This determines which assistantIds can be used when creating a call. Default is any assistantId.  Only relevant for `public` tokens.  # noqa: E501

        :return: The allowed_assistant_ids of this TokenRestrictions.  # noqa: E501
        :rtype: list[str]
        """
        return self._allowed_assistant_ids

    @allowed_assistant_ids.setter
    def allowed_assistant_ids(self, allowed_assistant_ids):
        """Sets the allowed_assistant_ids of this TokenRestrictions.

        This determines which assistantIds can be used when creating a call. Default is any assistantId.  Only relevant for `public` tokens.  # noqa: E501

        :param allowed_assistant_ids: The allowed_assistant_ids of this TokenRestrictions.  # noqa: E501
        :type: list[str]
        """

        self._allowed_assistant_ids = allowed_assistant_ids

    @property
    def allow_transient_assistant(self):
        """Gets the allow_transient_assistant of this TokenRestrictions.  # noqa: E501

        This determines whether transient assistants can be used when creating a call. Default is true.  If `allowedAssistantIds` is provided, this is automatically false.  Only relevant for `public` tokens.  # noqa: E501

        :return: The allow_transient_assistant of this TokenRestrictions.  # noqa: E501
        :rtype: bool
        """
        return self._allow_transient_assistant

    @allow_transient_assistant.setter
    def allow_transient_assistant(self, allow_transient_assistant):
        """Sets the allow_transient_assistant of this TokenRestrictions.

        This determines whether transient assistants can be used when creating a call. Default is true.  If `allowedAssistantIds` is provided, this is automatically false.  Only relevant for `public` tokens.  # noqa: E501

        :param allow_transient_assistant: The allow_transient_assistant of this TokenRestrictions.  # noqa: E501
        :type: bool
        """

        self._allow_transient_assistant = allow_transient_assistant

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TokenRestrictions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TokenRestrictions):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
