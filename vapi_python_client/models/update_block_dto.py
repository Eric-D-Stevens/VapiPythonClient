# coding: utf-8

"""
    Vapi API

    API for building voice assistants  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class UpdateBlockDTO(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'messages': 'list[OneOfUpdateBlockDTOMessagesItems]',
        'input_schema': 'AllOfUpdateBlockDTOInputSchema',
        'output_schema': 'AllOfUpdateBlockDTOOutputSchema',
        'tool': 'OneOfUpdateBlockDTOTool',
        'steps': 'list[OneOfUpdateBlockDTOStepsItems]',
        'name': 'str',
        'instruction': 'str',
        'tool_id': 'str'
    }

    attribute_map = {
        'messages': 'messages',
        'input_schema': 'inputSchema',
        'output_schema': 'outputSchema',
        'tool': 'tool',
        'steps': 'steps',
        'name': 'name',
        'instruction': 'instruction',
        'tool_id': 'toolId'
    }

    def __init__(self, messages=None, input_schema=None, output_schema=None, tool=None, steps=None, name=None, instruction=None, tool_id=None):  # noqa: E501
        """UpdateBlockDTO - a model defined in Swagger"""  # noqa: E501
        self._messages = None
        self._input_schema = None
        self._output_schema = None
        self._tool = None
        self._steps = None
        self._name = None
        self._instruction = None
        self._tool_id = None
        self.discriminator = None
        if messages is not None:
            self.messages = messages
        if input_schema is not None:
            self.input_schema = input_schema
        if output_schema is not None:
            self.output_schema = output_schema
        if tool is not None:
            self.tool = tool
        if steps is not None:
            self.steps = steps
        if name is not None:
            self.name = name
        if instruction is not None:
            self.instruction = instruction
        if tool_id is not None:
            self.tool_id = tool_id

    @property
    def messages(self):
        """Gets the messages of this UpdateBlockDTO.  # noqa: E501

        These are the pre-configured messages that will be spoken to the user while the block is running.  # noqa: E501

        :return: The messages of this UpdateBlockDTO.  # noqa: E501
        :rtype: list[OneOfUpdateBlockDTOMessagesItems]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this UpdateBlockDTO.

        These are the pre-configured messages that will be spoken to the user while the block is running.  # noqa: E501

        :param messages: The messages of this UpdateBlockDTO.  # noqa: E501
        :type: list[OneOfUpdateBlockDTOMessagesItems]
        """

        self._messages = messages

    @property
    def input_schema(self):
        """Gets the input_schema of this UpdateBlockDTO.  # noqa: E501

        This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`  These are accessible as variables: - ({{input.propertyName}}) in context of the block execution (step) - ({{stepName.input.propertyName}}) in context of the workflow  # noqa: E501

        :return: The input_schema of this UpdateBlockDTO.  # noqa: E501
        :rtype: AllOfUpdateBlockDTOInputSchema
        """
        return self._input_schema

    @input_schema.setter
    def input_schema(self, input_schema):
        """Sets the input_schema of this UpdateBlockDTO.

        This is the input schema for the block. This is the input the block needs to run. It's given to the block as `steps[0].input`  These are accessible as variables: - ({{input.propertyName}}) in context of the block execution (step) - ({{stepName.input.propertyName}}) in context of the workflow  # noqa: E501

        :param input_schema: The input_schema of this UpdateBlockDTO.  # noqa: E501
        :type: AllOfUpdateBlockDTOInputSchema
        """

        self._input_schema = input_schema

    @property
    def output_schema(self):
        """Gets the output_schema of this UpdateBlockDTO.  # noqa: E501

        This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).  These are accessible as variables: - ({{output.propertyName}}) in context of the block execution (step) - ({{stepName.output.propertyName}}) in context of the workflow  # noqa: E501

        :return: The output_schema of this UpdateBlockDTO.  # noqa: E501
        :rtype: AllOfUpdateBlockDTOOutputSchema
        """
        return self._output_schema

    @output_schema.setter
    def output_schema(self, output_schema):
        """Sets the output_schema of this UpdateBlockDTO.

        This is the output schema for the block. This is the output the block will return to the workflow (`{{stepName.output}}`).  These are accessible as variables: - ({{output.propertyName}}) in context of the block execution (step) - ({{stepName.output.propertyName}}) in context of the workflow  # noqa: E501

        :param output_schema: The output_schema of this UpdateBlockDTO.  # noqa: E501
        :type: AllOfUpdateBlockDTOOutputSchema
        """

        self._output_schema = output_schema

    @property
    def tool(self):
        """Gets the tool of this UpdateBlockDTO.  # noqa: E501

        This is the tool that the block will call. To use an existing tool, use `toolId`.  # noqa: E501

        :return: The tool of this UpdateBlockDTO.  # noqa: E501
        :rtype: OneOfUpdateBlockDTOTool
        """
        return self._tool

    @tool.setter
    def tool(self, tool):
        """Sets the tool of this UpdateBlockDTO.

        This is the tool that the block will call. To use an existing tool, use `toolId`.  # noqa: E501

        :param tool: The tool of this UpdateBlockDTO.  # noqa: E501
        :type: OneOfUpdateBlockDTOTool
        """

        self._tool = tool

    @property
    def steps(self):
        """Gets the steps of this UpdateBlockDTO.  # noqa: E501

        These are the steps in the workflow.  # noqa: E501

        :return: The steps of this UpdateBlockDTO.  # noqa: E501
        :rtype: list[OneOfUpdateBlockDTOStepsItems]
        """
        return self._steps

    @steps.setter
    def steps(self, steps):
        """Sets the steps of this UpdateBlockDTO.

        These are the steps in the workflow.  # noqa: E501

        :param steps: The steps of this UpdateBlockDTO.  # noqa: E501
        :type: list[OneOfUpdateBlockDTOStepsItems]
        """

        self._steps = steps

    @property
    def name(self):
        """Gets the name of this UpdateBlockDTO.  # noqa: E501

        This is the name of the block. This is just for your reference.  # noqa: E501

        :return: The name of this UpdateBlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this UpdateBlockDTO.

        This is the name of the block. This is just for your reference.  # noqa: E501

        :param name: The name of this UpdateBlockDTO.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def instruction(self):
        """Gets the instruction of this UpdateBlockDTO.  # noqa: E501

        This is the instruction to the model.  You can reference any variable in the context of the current block execution (step): - \"{{input.your-property-name}}\" for the current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  This can be as simple or as complex as you want it to be. - \"say hello and ask the user about their day!\" - \"collect the user's first and last name\" - \"user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}\"  # noqa: E501

        :return: The instruction of this UpdateBlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._instruction

    @instruction.setter
    def instruction(self, instruction):
        """Sets the instruction of this UpdateBlockDTO.

        This is the instruction to the model.  You can reference any variable in the context of the current block execution (step): - \"{{input.your-property-name}}\" for the current step's input - \"{{your-step-name.output.your-property-name}}\" for another step's output (in the same workflow) - \"{{your-step-name.input.your-property-name}}\" for another step's input (in the same workflow) - \"{{workflow.input.your-property-name}}\" for the current workflow's input - \"{{global.your-property-name}}\" for the global context  This can be as simple or as complex as you want it to be. - \"say hello and ask the user about their day!\" - \"collect the user's first and last name\" - \"user is {{input.firstName}} {{input.lastName}}. their age is {{input.age}}. ask them about their salary and if they might be interested in buying a house. we offer {{input.offer}}\"  # noqa: E501

        :param instruction: The instruction of this UpdateBlockDTO.  # noqa: E501
        :type: str
        """

        self._instruction = instruction

    @property
    def tool_id(self):
        """Gets the tool_id of this UpdateBlockDTO.  # noqa: E501

        This is the id of the tool that the block will call. To use a transient tool, use `tool`.  # noqa: E501

        :return: The tool_id of this UpdateBlockDTO.  # noqa: E501
        :rtype: str
        """
        return self._tool_id

    @tool_id.setter
    def tool_id(self, tool_id):
        """Sets the tool_id of this UpdateBlockDTO.

        This is the id of the tool that the block will call. To use a transient tool, use `tool`.  # noqa: E501

        :param tool_id: The tool_id of this UpdateBlockDTO.  # noqa: E501
        :type: str
        """

        self._tool_id = tool_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(UpdateBlockDTO, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UpdateBlockDTO):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
